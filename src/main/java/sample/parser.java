
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sample;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\003\000\002\003\005\000\002\003\002" +
    "\000\002\003\003\000\002\003\005\000\002\004\004\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\011\000\002\004\006\000\002\004\013\000\002\004" +
    "\004\000\002\004\003\000\002\004\005\000\002\004\004" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\003\000\002\005\003\000\002\006\003\000\002" +
    "\007\002\000\002\007\003\000\002\007\005\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\011\005\000" +
    "\002\012\003\000\002\013\004\000\002\014\006\000\002" +
    "\014\007\000\002\014\012\000\002\014\003\000\002\015" +
    "\006\000\002\016\006\000\002\016\007\000\002\016\012" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\020\005\000\002\021\006\000\002" +
    "\022\003\000\002\022\003\000\002\022\005\000\002\022" +
    "\005\000\002\022\011\000\002\022\011\000\002\022\011" +
    "\000\002\022\011\000\002\022\005\000\002\022\007\000" +
    "\002\022\005\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\040\002\uffff\006\025\012\024\021\023\022" +
    "\022\023\017\024\016\025\015\027\014\031\031\035\026" +
    "\041\005\042\004\043\021\044\007\001\002\000\024\002" +
    "\uffd4\004\uffd4\005\uffd4\007\uffd4\014\uffd4\017\uffd4\020\uffd4" +
    "\030\uffd4\034\uffd4\001\002\000\024\002\uffd2\004\uffd2\005" +
    "\uffd2\007\uffd2\014\uffd2\017\uffd2\020\uffd2\030\uffd2\034\uffd2" +
    "\001\002\000\024\002\uffd9\004\uffd9\005\uffd9\007\uffd9\014" +
    "\uffd9\017\uffd9\020\uffd9\030\uffd9\034\uffd9\001\002\000\034" +
    "\002\ufff8\004\ufff8\005\ufff8\006\066\007\ufff8\010\065\011" +
    "\072\013\071\014\ufff8\017\ufff8\020\ufff8\030\ufff8\034\ufff8" +
    "\001\002\000\024\002\uffc3\004\uffc3\005\uffc3\007\uffc3\014" +
    "\uffc3\017\uffc3\020\uffc3\030\uffc3\034\uffc3\001\002\000\024" +
    "\002\uffd1\004\uffd1\005\uffd1\007\uffd1\014\uffd1\017\uffd1\020" +
    "\uffd1\030\uffd1\034\uffd1\001\002\000\024\002\uffeb\004\uffeb" +
    "\005\uffeb\007\uffeb\014\uffeb\017\uffeb\020\uffeb\030\uffeb\034" +
    "\uffeb\001\002\000\004\011\202\001\002\000\024\002\ufff1" +
    "\004\ufff1\005\ufff1\007\ufff1\014\ufff1\017\ufff1\020\ufff1\030" +
    "\ufff1\034\ufff1\001\002\000\004\044\201\001\002\000\036" +
    "\006\025\012\024\021\023\022\022\023\017\024\016\025" +
    "\015\027\014\031\031\035\026\041\005\042\004\043\021" +
    "\044\007\001\002\000\004\044\162\001\002\000\022\002" +
    "\ufffe\004\157\005\156\007\ufffe\014\061\017\ufffe\020\ufffe" +
    "\030\060\001\002\000\024\002\uffd3\004\uffd3\005\uffd3\007" +
    "\uffd3\014\uffd3\017\uffd3\020\uffd3\030\uffd3\034\uffd3\001\002" +
    "\000\004\044\133\001\002\000\024\002\ufff6\004\ufff6\005" +
    "\ufff6\007\ufff6\014\ufff6\017\ufff6\020\ufff6\030\ufff6\034\ufff6" +
    "\001\002\000\036\006\025\012\024\021\023\022\022\023" +
    "\017\024\016\025\015\027\014\031\031\035\026\041\005" +
    "\042\004\043\021\044\007\001\002\000\036\006\025\012" +
    "\024\021\023\022\022\023\017\024\016\025\015\027\014" +
    "\031\031\035\026\041\005\042\004\043\021\044\007\001" +
    "\002\000\024\002\ufff7\004\ufff7\005\ufff7\007\ufff7\014\ufff7" +
    "\017\ufff7\020\ufff7\030\ufff7\034\ufff7\001\002\000\010\002" +
    "\000\017\000\020\000\001\002\000\026\002\uffcd\004\uffcd" +
    "\005\uffcd\007\uffcd\011\117\014\uffcd\017\uffcd\020\uffcd\030" +
    "\uffcd\034\uffcd\001\002\000\036\006\025\012\024\021\023" +
    "\022\022\023\017\024\016\025\015\027\014\031\031\035" +
    "\026\041\005\042\004\043\021\044\007\001\002\000\026" +
    "\002\uffce\004\uffce\005\uffce\007\uffce\011\035\014\uffce\017" +
    "\uffce\020\uffce\030\uffce\034\uffce\001\002\000\004\002\034" +
    "\001\002\000\004\002\001\001\002\000\036\006\037\012" +
    "\024\021\023\022\022\023\017\024\016\025\015\027\014" +
    "\031\031\035\026\041\005\042\004\043\021\044\007\001" +
    "\002\000\024\002\uffcc\004\uffcc\005\uffcc\007\uffcc\014\061" +
    "\017\uffcc\020\uffcc\030\060\034\uffcc\001\002\000\036\006" +
    "\025\012\024\021\023\022\022\023\017\024\016\025\015" +
    "\027\014\031\031\035\026\041\005\042\004\043\021\044" +
    "\040\001\002\000\022\005\067\006\066\007\ufff8\010\065" +
    "\011\072\013\071\014\ufff8\030\ufff8\001\002\000\010\007" +
    "\057\014\061\030\060\001\002\000\014\005\043\007\uffce" +
    "\011\035\014\uffce\030\uffce\001\002\000\004\044\044\001" +
    "\002\000\004\010\047\001\002\000\004\007\046\001\002" +
    "\000\024\002\uffc8\004\uffc8\005\uffc8\007\uffc8\014\uffc8\017" +
    "\uffc8\020\uffc8\030\uffc8\034\uffc8\001\002\000\016\015\055" +
    "\016\051\026\053\032\050\033\056\040\054\001\002\000" +
    "\062\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\011\uffe5" +
    "\012\uffe5\014\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\027\uffe5\030\uffe5\031\uffe5\034\uffe5" +
    "\035\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\001\002\000" +
    "\062\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\011\uffe2" +
    "\012\uffe2\014\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\027\uffe2\030\uffe2\031\uffe2\034\uffe2" +
    "\035\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\001\002\000" +
    "\026\002\uffd0\004\uffd0\005\uffd0\007\uffd0\011\uffd0\014\uffd0" +
    "\017\uffd0\020\uffd0\030\uffd0\034\uffd0\001\002\000\062\002" +
    "\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\011\uffe3\012\uffe3" +
    "\014\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\027\uffe3\030\uffe3\031\uffe3\034\uffe3\035\uffe3" +
    "\041\uffe3\042\uffe3\043\uffe3\044\uffe3\001\002\000\062\002" +
    "\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\011\uffe0\012\uffe0" +
    "\014\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\027\uffe0\030\uffe0\031\uffe0\034\uffe0\035\uffe0" +
    "\041\uffe0\042\uffe0\043\uffe0\044\uffe0\001\002\000\062\002" +
    "\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\011\uffe4\012\uffe4" +
    "\014\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\027\uffe4\030\uffe4\031\uffe4\034\uffe4\035\uffe4" +
    "\041\uffe4\042\uffe4\043\uffe4\044\uffe4\001\002\000\062\002" +
    "\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\011\uffe1\012\uffe1" +
    "\014\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\027\uffe1\030\uffe1\031\uffe1\034\uffe1\035\uffe1" +
    "\041\uffe1\042\uffe1\043\uffe1\044\uffe1\001\002\000\024\002" +
    "\uffec\004\uffec\005\uffec\007\uffec\014\uffec\017\uffec\020\uffec" +
    "\030\uffec\034\uffec\001\002\000\036\006\025\012\024\021" +
    "\023\022\022\023\017\024\016\025\015\027\014\031\031" +
    "\035\026\041\005\042\004\043\021\044\007\001\002\000" +
    "\036\006\025\012\024\021\023\022\022\023\017\024\016" +
    "\025\015\027\014\031\031\035\026\041\005\042\004\043" +
    "\021\044\007\001\002\000\024\002\uffee\004\uffee\005\uffee" +
    "\007\uffee\014\061\017\uffee\020\uffee\030\060\034\uffee\001" +
    "\002\000\024\002\uffed\004\uffed\005\uffed\007\uffed\014\061" +
    "\017\uffed\020\uffed\030\060\034\uffed\001\002\000\004\011" +
    "\114\001\002\000\022\015\055\016\051\026\053\032\050" +
    "\033\056\036\113\037\112\040\054\001\002\000\040\006" +
    "\025\007\uffff\012\024\021\023\022\022\023\017\024\016" +
    "\025\015\027\014\031\031\035\026\041\005\042\004\043" +
    "\021\044\007\001\002\000\004\044\104\001\002\000\006" +
    "\006\077\011\100\001\002\000\004\044\074\001\002\000" +
    "\036\006\025\012\024\021\023\022\022\023\017\024\016" +
    "\025\015\027\014\031\031\035\026\041\005\042\004\043" +
    "\021\044\007\001\002\000\024\002\uffc4\004\uffc4\005\uffc4" +
    "\007\uffc4\014\061\017\uffc4\020\uffc4\030\060\034\uffc4\001" +
    "\002\000\026\002\uffc6\004\uffc6\005\uffc6\007\uffc6\011\075" +
    "\014\uffc6\017\uffc6\020\uffc6\030\uffc6\034\uffc6\001\002\000" +
    "\036\006\025\012\024\021\023\022\022\023\017\024\016" +
    "\025\015\027\014\031\031\035\026\041\005\042\004\043" +
    "\021\044\007\001\002\000\024\002\uffc5\004\uffc5\005\uffc5" +
    "\007\uffc5\014\061\017\uffc5\020\uffc5\030\060\034\uffc5\001" +
    "\002\000\016\015\055\016\051\026\053\032\050\033\056" +
    "\040\054\001\002\000\036\006\025\012\024\021\023\022" +
    "\022\023\017\024\016\025\015\027\014\031\031\035\026" +
    "\041\005\042\004\043\021\044\007\001\002\000\024\002" +
    "\uffdc\004\uffdc\005\uffdc\007\uffdc\014\061\017\uffdc\020\uffdc" +
    "\030\060\034\uffdc\001\002\000\004\007\103\001\002\000" +
    "\042\006\uffd8\011\uffd8\012\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\027\uffd8\031\uffd8\035\uffd8\041" +
    "\uffd8\042\uffd8\043\uffd8\044\uffd8\001\002\000\004\007\105" +
    "\001\002\000\024\002\uffca\004\uffca\005\uffca\007\uffca\014" +
    "\uffca\017\uffca\020\uffca\030\uffca\034\uffca\001\002\000\004" +
    "\007\110\001\002\000\004\007\uffea\001\002\000\024\002" +
    "\ufff4\004\ufff4\005\ufff4\007\ufff4\014\ufff4\017\ufff4\020\ufff4" +
    "\030\ufff4\034\ufff4\001\002\000\042\006\uffdd\011\uffdd\012" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd" +
    "\027\uffdd\031\uffdd\035\uffdd\041\uffdd\042\uffdd\043\uffdd\044" +
    "\uffdd\001\002\000\042\006\uffde\011\uffde\012\uffde\020\uffde" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\027\uffde\031" +
    "\uffde\035\uffde\041\uffde\042\uffde\043\uffde\044\uffde\001\002" +
    "\000\004\011\uffdf\001\002\000\036\006\025\012\024\021" +
    "\023\022\022\023\017\024\016\025\015\027\014\031\031" +
    "\035\026\041\005\042\004\043\021\044\007\001\002\000" +
    "\024\002\uffd7\004\uffd7\005\uffd7\007\uffd7\014\061\017\uffd7" +
    "\020\uffd7\030\060\034\uffd7\001\002\000\024\002\ufff2\004" +
    "\ufff2\005\ufff2\007\ufff2\014\061\017\ufff2\020\ufff2\030\060" +
    "\034\ufff2\001\002\000\036\006\121\012\024\021\023\022" +
    "\022\023\017\024\016\025\015\027\014\031\031\035\026" +
    "\041\005\042\004\043\021\044\007\001\002\000\024\002" +
    "\uffcb\004\uffcb\005\uffcb\007\uffcb\014\061\017\uffcb\020\uffcb" +
    "\030\060\034\uffcb\001\002\000\036\006\025\012\024\021" +
    "\023\022\022\023\017\024\016\025\015\027\014\031\031" +
    "\035\026\041\005\042\004\043\021\044\122\001\002\000" +
    "\022\005\127\006\066\007\ufff8\010\065\011\072\013\071" +
    "\014\ufff8\030\ufff8\001\002\000\014\005\124\007\uffce\011" +
    "\035\014\uffce\030\uffce\001\002\000\004\044\044\001\002" +
    "\000\004\007\126\001\002\000\024\002\uffc7\004\uffc7\005" +
    "\uffc7\007\uffc7\014\uffc7\017\uffc7\020\uffc7\030\uffc7\034\uffc7" +
    "\001\002\000\004\044\130\001\002\000\004\007\131\001" +
    "\002\000\024\002\uffc9\004\uffc9\005\uffc9\007\uffc9\014\uffc9" +
    "\017\uffc9\020\uffc9\030\uffc9\034\uffc9\001\002\000\024\002" +
    "\uffef\004\uffef\005\uffef\007\uffef\014\061\017\uffef\020\uffef" +
    "\030\060\034\uffef\001\002\000\004\006\134\001\002\000" +
    "\006\007\uffe8\044\044\001\002\000\004\007\142\001\002" +
    "\000\006\005\140\007\uffe7\001\002\000\004\007\uffe9\001" +
    "\002\000\006\007\uffe8\044\044\001\002\000\004\007\uffe6" +
    "\001\002\000\004\010\144\001\002\000\040\006\025\012" +
    "\024\020\uffff\021\023\022\022\023\017\024\016\025\015" +
    "\027\014\031\031\035\026\041\005\042\004\043\021\044" +
    "\007\001\002\000\020\015\055\016\051\026\053\032\050" +
    "\033\056\037\112\040\054\001\002\000\040\006\146\012" +
    "\024\020\uffff\021\023\022\022\023\017\024\016\025\015" +
    "\027\014\031\031\035\026\041\005\042\004\043\021\044" +
    "\007\001\002\000\052\006\025\012\024\015\055\016\051" +
    "\021\023\022\022\023\017\024\016\025\015\026\053\027" +
    "\014\031\031\032\050\033\056\035\026\040\054\041\005" +
    "\042\004\043\021\044\007\001\002\000\004\020\150\001" +
    "\002\000\024\002\uffda\004\uffda\005\uffda\007\uffda\014\uffda" +
    "\017\uffda\020\uffda\030\uffda\034\uffda\001\002\000\040\006" +
    "\025\012\024\020\uffff\021\023\022\022\023\017\024\016" +
    "\025\015\027\014\031\031\035\026\041\005\042\004\043" +
    "\021\044\007\001\002\000\004\020\153\001\002\000\024" +
    "\002\ufff3\004\ufff3\005\ufff3\007\ufff3\014\ufff3\017\ufff3\020" +
    "\ufff3\030\ufff3\034\ufff3\001\002\000\004\020\155\001\002" +
    "\000\024\002\uffd5\004\uffd5\005\uffd5\007\uffd5\014\uffd5\017" +
    "\uffd5\020\uffd5\030\uffd5\034\uffd5\001\002\000\046\002\uffff" +
    "\006\025\007\uffff\012\024\017\uffff\020\uffff\021\023\022" +
    "\022\023\017\024\016\025\015\027\014\031\031\035\026" +
    "\041\005\042\004\043\021\044\007\001\002\000\046\002" +
    "\uffff\006\025\007\uffff\012\024\017\uffff\020\uffff\021\023" +
    "\022\022\023\017\024\016\025\015\027\014\031\031\035" +
    "\026\041\005\042\004\043\021\044\007\001\002\000\012" +
    "\002\ufffd\007\ufffd\017\ufffd\020\ufffd\001\002\000\012\002" +
    "\ufffa\007\ufffa\017\ufffa\020\ufffa\001\002\000\004\010\163" +
    "\001\002\000\020\015\055\016\051\026\053\032\050\033" +
    "\056\037\112\040\054\001\002\000\004\011\170\001\002" +
    "\000\006\006\077\011\166\001\002\000\036\006\025\012" +
    "\024\021\023\022\022\023\017\024\016\025\015\027\014" +
    "\031\031\035\026\041\005\042\004\043\021\044\007\001" +
    "\002\000\024\002\uffdb\004\uffdb\005\uffdb\007\uffdb\014\061" +
    "\017\uffdb\020\uffdb\030\060\034\uffdb\001\002\000\036\006" +
    "\025\012\024\021\023\022\022\023\017\024\016\025\015" +
    "\027\014\031\031\035\026\041\005\042\004\043\021\044" +
    "\007\001\002\000\024\002\uffd6\004\uffd6\005\uffd6\007\uffd6" +
    "\014\061\017\uffd6\020\uffd6\030\060\034\uffd6\001\002\000" +
    "\026\002\uffcf\004\uffcf\005\uffcf\007\uffcf\011\uffcf\014\uffcf" +
    "\017\uffcf\020\uffcf\030\uffcf\034\uffcf\001\002\000\010\014" +
    "\061\030\060\034\174\001\002\000\040\006\025\012\024" +
    "\017\uffff\021\023\022\022\023\017\024\016\025\015\027" +
    "\014\031\031\035\026\041\005\042\004\043\021\044\007" +
    "\001\002\000\004\017\176\001\002\000\040\006\025\012" +
    "\024\020\uffff\021\023\022\022\023\017\024\016\025\015" +
    "\027\014\031\031\035\026\041\005\042\004\043\021\044" +
    "\007\001\002\000\004\020\200\001\002\000\024\002\ufff5" +
    "\004\ufff5\005\ufff5\007\ufff5\014\ufff5\017\ufff5\020\ufff5\030" +
    "\ufff5\034\ufff5\001\002\000\024\002\ufff9\004\ufff9\005\ufff9" +
    "\007\ufff9\014\ufff9\017\ufff9\020\ufff9\030\ufff9\034\ufff9\001" +
    "\002\000\016\015\055\016\051\026\053\032\050\033\056" +
    "\040\054\001\002\000\024\002\ufff0\004\ufff0\005\ufff0\007" +
    "\ufff0\014\ufff0\017\ufff0\020\ufff0\030\ufff0\034\ufff0\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\026\002\032\003\026\004\017\011\012\014" +
    "\007\016\005\017\011\020\031\021\027\022\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\067\015\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\172\011\012\014\007" +
    "\016\005\017\011\020\031\021\027\022\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\131\011\012\014" +
    "\007\016\005\017\011\020\031\021\027\022\010\001\001" +
    "\000\022\004\040\011\012\014\007\016\005\017\011\020" +
    "\031\021\027\022\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\115\011\012\014" +
    "\007\016\005\017\011\020\031\021\027\022\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\035\011\012\014\007\016\005\017\011\020\031" +
    "\021\027\022\010\001\001\000\002\001\001\000\022\004" +
    "\040\011\012\014\007\016\005\017\011\020\041\021\027" +
    "\022\010\001\001\000\006\013\067\015\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\062\011\012\014\007\016\005\017\011\020\031\021" +
    "\027\022\010\001\001\000\022\004\061\011\012\014\007" +
    "\016\005\017\011\020\031\021\027\022\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\051\012\110\001\001\000\026\003\106\004\017\005" +
    "\105\011\012\014\007\016\005\017\011\020\031\021\027" +
    "\022\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\072\011\012\014\007\016\005" +
    "\017\011\020\031\021\027\022\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\075\011\012\014\007" +
    "\016\005\017\011\020\031\021\027\022\010\001\001\000" +
    "\002\001\001\000\004\010\101\001\001\000\022\004\100" +
    "\011\012\014\007\016\005\017\011\020\031\021\027\022" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\114\011" +
    "\012\014\007\016\005\017\011\020\031\021\027\022\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\117\011\012\014\007\016\005\017\011\020\031\021\027" +
    "\022\010\001\001\000\002\001\001\000\022\004\040\011" +
    "\012\014\007\016\005\017\011\020\122\021\027\022\010" +
    "\001\001\000\006\013\067\015\063\001\001\000\002\001" +
    "\001\000\004\020\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\134" +
    "\007\136\020\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\140\020\135\001\001" +
    "\000\002\001\001\000\006\013\144\015\142\001\001\000" +
    "\026\002\153\003\026\004\017\011\012\014\007\016\005" +
    "\017\011\020\031\021\027\022\010\001\001\000\006\010" +
    "\150\012\110\001\001\000\026\002\146\003\026\004\017" +
    "\011\012\014\007\016\005\017\011\020\031\021\027\022" +
    "\010\001\001\000\024\004\040\010\101\011\012\014\007" +
    "\016\005\017\011\020\031\021\027\022\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\002\151\003\026" +
    "\004\017\011\012\014\007\016\005\017\011\020\031\021" +
    "\027\022\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\160\004" +
    "\017\011\012\014\007\016\005\017\011\020\031\021\027" +
    "\022\010\001\001\000\024\003\157\004\017\011\012\014" +
    "\007\016\005\017\011\020\031\021\027\022\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\164\015" +
    "\163\001\001\000\006\010\171\012\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\166\011\012\014" +
    "\007\016\005\017\011\020\031\021\027\022\010\001\001" +
    "\000\002\001\001\000\022\004\170\011\012\014\007\016" +
    "\005\017\011\020\031\021\027\022\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\002" +
    "\174\003\026\004\017\011\012\014\007\016\005\017\011" +
    "\020\031\021\027\022\010\001\001\000\002\001\001\000" +
    "\026\002\176\003\026\004\017\011\012\014\007\016\005" +
    "\017\011\020\031\021\027\022\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\202" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public sample.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (sample.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		sample.Absyn.Program start_val = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListExpr 
            {
              sample.Absyn.Program RESULT =null;
		sample.Absyn.ListExpr p_1 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ProgramExprs(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListExpr ::= 
            {
              sample.Absyn.ListExpr RESULT =null;
		 RESULT = new sample.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListExpr ::= Expr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListExpr ::= Expr _SYMB_0 ListExpr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.ListExpr p_3 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListExpr ::= 
            {
              sample.Absyn.ListExpr RESULT =null;
		 RESULT = new sample.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListExpr ::= Expr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListExpr ::= Expr _SYMB_1 ListExpr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.ListExpr p_3 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expr ::= _SYMB_17 _IDENT_ 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Import(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expr ::= _IDENT_ 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Var(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expr ::= _SYMB_25 
            {
              sample.Absyn.Expr RESULT =null;
		 RESULT = new sample.Absyn.ConstTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expr ::= _SYMB_13 
            {
              sample.Absyn.Expr RESULT =null;
		 RESULT = new sample.Absyn.ConstFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expr ::= _SYMB_16 Expr _SYMB_24 Program _SYMB_11 Program _SYMB_12 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		sample.Absyn.Program p_4 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Program p_6 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.If(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expr ::= _IDENT_ _SYMB_2 ComaExprs _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.ComaExprs p_3 = (sample.Absyn.ComaExprs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.FuncCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expr ::= _SYMB_14 _IDENT_ _SYMB_2 FArgs _SYMB_3 _SYMB_4 Type Program _SYMB_12 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		sample.Absyn.FArgs p_4 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		sample.Absyn.Type p_7 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Program p_8 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.Func(p_2,p_4,p_7,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expr ::= _SYMB_21 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Return(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expr ::= _SYMB_19 
            {
              sample.Absyn.Expr RESULT =null;
		 RESULT = new sample.Absyn.NilKeyword(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expr ::= TypeAl _SYMB_5 Type 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.TypeAl p_1 = (sample.Absyn.TypeAl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Type p_3 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TypeAliasing(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expr ::= _SYMB_6 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Not(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expr ::= Expr _SYMB_8 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.And(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expr ::= Expr _SYMB_20 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Or(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expr ::= _SYMB_2 Expr _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expr ::= Expr1 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ComaExprs ::= ListExpr 
            {
              sample.Absyn.ComaExprs RESULT =null;
		sample.Absyn.ListExpr p_1 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Vars(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComaExprs",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FArgs ::= ListDec 
            {
              sample.Absyn.FArgs RESULT =null;
		sample.Absyn.ListDec p_1 = (sample.Absyn.ListDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.FuncArgs(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FArgs",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ListDec ::= 
            {
              sample.Absyn.ListDec RESULT =null;
		 RESULT = new sample.Absyn.ListDec(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ListDec ::= Dec 
            {
              sample.Absyn.ListDec RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ListDec(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListDec ::= Dec _SYMB_1 ListDec 
            {
              sample.Absyn.ListDec RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.ListDec p_3 = (sample.Absyn.ListDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Type ::= _SYMB_22 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.StringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Type ::= _SYMB_9 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.BoolType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Type ::= _SYMB_18 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Type ::= _SYMB_10 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.DoubleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Type ::= _SYMB_23 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.TableType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Type ::= _SYMB_28 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.VoidType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TypeAl ::= _IDENT_ _SYMB_4 _SYMB_26 
            {
              sample.Absyn.TypeAl RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new sample.Absyn.TypeAlIdent(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeAl",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VarKW ::= _SYMB_27 
            {
              sample.Absyn.VarKW RESULT =null;
		 RESULT = new sample.Absyn.VarKeyword(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarKW",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TAnnot ::= _SYMB_4 VarKW 
            {
              sample.Absyn.TAnnot RESULT =null;
		sample.Absyn.VarKW p_2 = (sample.Absyn.VarKW)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TypeAnnotation(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TAnnot",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expr3 ::= _IDENT_ TAnnot _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.TAnnot p_2 = (sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_4 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.VarTypeAnnotation(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expr3 ::= _SYMB_15 _IDENT_ TAnnot _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.TAnnot p_3 = (sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_5 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.GlVarTypeAnnotation(p_2,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expr3 ::= _SYMB_14 _IDENT_ _SYMB_2 FArgs _SYMB_3 TAnnot Program _SYMB_12 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		sample.Absyn.FArgs p_4 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		sample.Absyn.TAnnot p_6 = (sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Program p_7 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.FuncTypeAnnotation(p_2,p_4,p_6,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr3 ::= Expr4 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TAscript ::= TAnnot _SYMB_2 Type _SYMB_3 
            {
              sample.Absyn.TAscript RESULT =null;
		sample.Absyn.TAnnot p_1 = (sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Type p_3 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.TypeAscription(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TAscript",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr4 ::= _IDENT_ TAscript _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.TAscript p_2 = (sample.Absyn.TAscript)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_4 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.VarTypeAscription(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expr4 ::= _SYMB_15 _IDENT_ TAscript _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.TAscript p_3 = (sample.Absyn.TAscript)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_5 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.GlVarTypeAscription(p_2,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expr4 ::= _SYMB_14 _IDENT_ _SYMB_2 FArgs _SYMB_3 TAscript Program _SYMB_12 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		sample.Absyn.FArgs p_4 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		sample.Absyn.TAscript p_6 = (sample.Absyn.TAscript)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Program p_7 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.FuncTypeAscription(p_2,p_4,p_6,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expr1 ::= _INTEGER_ 
            {
              sample.Absyn.Expr RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.EInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr1 ::= _DOUBLE_ 
            {
              sample.Absyn.Expr RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.EDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr1 ::= _STRING_ 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.EStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr1 ::= Expr2 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Dec ::= _IDENT_ _SYMB_4 Type 
            {
              sample.Absyn.Dec RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Type p_3 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Declaration(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // GlDec ::= _SYMB_15 _IDENT_ _SYMB_4 Type 
            {
              sample.Absyn.GlDec RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Type p_4 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.GlDeclaration(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GlDec",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr2 ::= Dec 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.OnlyDecl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr2 ::= GlDec 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.GlDec p_1 = (sample.Absyn.GlDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.OnlyGlDecl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr2 ::= Dec _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.InitDecl(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr2 ::= GlDec _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.GlDec p_1 = (sample.Absyn.GlDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.InitGlDecl(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr2 ::= Dec _SYMB_5 _SYMB_2 _IDENT_ _SYMB_1 _IDENT_ _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String p_6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.TableDecl(p_1,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr2 ::= GlDec _SYMB_5 _SYMB_2 _IDENT_ _SYMB_1 _IDENT_ _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.GlDec p_1 = (sample.Absyn.GlDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String p_6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.GlTableDecl(p_1,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr2 ::= Dec _SYMB_5 _SYMB_2 Dec _SYMB_1 Dec _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		sample.Absyn.Dec p_4 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Dec p_6 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.InitTableDecl(p_1,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr2 ::= GlDec _SYMB_5 _SYMB_2 Dec _SYMB_1 Dec _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.GlDec p_1 = (sample.Absyn.GlDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		sample.Absyn.Dec p_4 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Dec p_6 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.InitGlTableDecl(p_1,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr2 ::= _IDENT_ _SYMB_7 _IDENT_ 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TableElementCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr2 ::= _IDENT_ _SYMB_7 _IDENT_ _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_5 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TableElementAssignment(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr2 ::= _IDENT_ _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Assignment(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr2 ::= Expr3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
