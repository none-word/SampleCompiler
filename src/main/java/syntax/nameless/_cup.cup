// -*- Java -*- File generated by the BNF Converter (bnfc 2.9.4).

// Parser definition for use with Java Cup
package nameless;

action code {:
public java_cup.runtime.ComplexSymbolFactory.Location getLeftLocation(
    java_cup.runtime.ComplexSymbolFactory.Location ... locations) {
  for (java_cup.runtime.ComplexSymbolFactory.Location l : locations) {
    if (l != null) {
      return l;
    }
  }
  return null;
}
:}
parser code {:
  public nameless.Absyn.Expr pExpr() throws Exception
  {
    java_cup.runtime.Symbol res = parse();
    return (nameless.Absyn.Expr) res.value;
  }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
  report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
  throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal nameless.Absyn.Expr Expr;

terminal _SYMB_0;    //   0
terminal _SYMB_1;    //   [
terminal _SYMB_2;    //   ]
terminal _SYMB_3;    //   {
terminal _SYMB_4;    //   }
terminal _SYMB_5;    //   (
terminal _SYMB_6;    //   )
terminal _SYMB_7;    //   else
terminal _SYMB_8;    //   false
terminal _SYMB_9;    //   fun
terminal _SYMB_10;    //   if
terminal _SYMB_11;    //   iszero
terminal _SYMB_12;    //   pred
terminal _SYMB_13;    //   return
terminal _SYMB_14;    //   succ
terminal _SYMB_15;    //   then
terminal _SYMB_16;    //   true



terminal Integer _INTEGER_;

terminal String _IDENT_;



start with Expr;


Expr ::= _SYMB_16:p_1  {: RESULT = new nameless.Absyn.ConstTrue(); :}
  | _SYMB_8:p_1  {: RESULT = new nameless.Absyn.ConstFalse(); :}
  | _SYMB_10:p_1 Expr:p_2 _SYMB_15:p_3 Expr:p_4 _SYMB_7:p_5 Expr:p_6  {: RESULT = new nameless.Absyn.If(p_2,p_4,p_6); :}
  | _SYMB_0:p_1  {: RESULT = new nameless.Absyn.ConstZero(); :}
  | _SYMB_14:p_1 Expr:p_2  {: RESULT = new nameless.Absyn.Succ(p_2); :}
  | _SYMB_12:p_1 Expr:p_2  {: RESULT = new nameless.Absyn.Pred(p_2); :}
  | _SYMB_11:p_1 Expr:p_2  {: RESULT = new nameless.Absyn.IsZero(p_2); :}
  | _IDENT_:p_1  {: RESULT = new nameless.Absyn.FreeVar(p_1); :}
  | _SYMB_1:p_1 _INTEGER_:p_2 _SYMB_2:p_3  {: RESULT = new nameless.Absyn.BoundVar(p_2); :}
  | _SYMB_9:p_1 _SYMB_3:p_2 _SYMB_13:p_3 Expr:p_4 _SYMB_4:p_5  {: RESULT = new nameless.Absyn.Abstraction(p_4); :}
  | Expr:p_1 Expr:p_2  {: RESULT = new nameless.Absyn.Application(p_1,p_2); :}
  | _SYMB_5:p_1 Expr:p_2 _SYMB_6:p_3  {: RESULT = p_2; :}
;

