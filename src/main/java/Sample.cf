comment "--" ;
comment "[[" "]]" ;

ProgramExprs.  Program ::= [Expr] ;

separator Expr ";" ;

Var.        Expr  ::= Ident ;
ConstTrue.  Expr  ::= "true" ;
ConstFalse. Expr  ::= "false" ;
If.         Expr  ::= "if" Expr "then" Program "else" Program "end" ;
Vars.       ComaExprs  ::= [Expr] ;
separator Expr ",";

FuncCall.         Expr  ::= Ident "(" ComaExprs ")" ;
FuncArgs.         FArgs ::= [Dec] ;
separator Dec ",";
Func.             Expr ::= "function" Ident "(" FArgs ")" ":" Type Program "end";
Return.           Expr ::= "return" Expr;

StringType.       Type ::= "string" ;
BoolType.         Type ::= "boolean" ;
UnitType.         Type ::= "void" ;
IntType.          Type ::= "integer" ;
DoubleType.       Type ::= "double" ;
TableType.        Type ::= "table" ;

EInt.	          Expr2	::=	Integer	;
EDouble.	      Expr2	::=	Double	;
EStr.	          Expr2	::=	String	;

Not.                 Expr  ::= "!" Expr ;
And.                 Expr  ::= Expr "and" Expr ;
Or.                  Expr  ::= Expr "or" Expr ;

ConstZero.  Expr  ::= "0" ;
Succ.       Expr  ::= "succ" Expr ;
Pred.       Expr  ::= "pred" Expr ;
IsZero.     Expr  ::= "iszero" Expr ;

Declaration.         Dec ::= Ident ":" Type ;
LocalVarDeclaration. Dec ::= "local" Ident ":" Type ;

OnlyDecl.  Expr1 ::= Dec ;
InitDecl.  Expr1 ::= Dec "=" Expr ;

_. Expr ::= "(" Expr ")" ;
_. Expr ::= Expr1 ;
_. Expr1 ::= Expr2 ;

