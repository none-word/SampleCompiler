// File generated by the BNF Converter (bnfc 2.9.4).

package sample;

/*** Visitor Design Pattern Skeleton. ***/

/* This implements the common visitor design pattern.
   Tests show it to be slightly less efficient than the
   instanceof method, but easier to use.
   Replace the R and A parameters with the desired return
   and context types.*/

public class VisitSkel
{
  public class ProgramVisitor<R,A> implements sample.Absyn.Program.Visitor<R,A>
  {
    public R visit(sample.Absyn.ProgramExprs p, A arg)
    { /* Code for ProgramExprs goes here */
      for (sample.Absyn.Expr x: p.listexpr_) {
        x.accept(new ExprVisitor<R,A>(), arg);
      }
      return null;
    }
  }
  public class ExprVisitor<R,A> implements sample.Absyn.Expr.Visitor<R,A>
  {
    public R visit(sample.Absyn.Var p, A arg)
    { /* Code for Var goes here */
      //p.ident_;
      return null;
    }
    public R visit(sample.Absyn.ConstTrue p, A arg)
    { /* Code for ConstTrue goes here */
      return null;
    }
    public R visit(sample.Absyn.ConstFalse p, A arg)
    { /* Code for ConstFalse goes here */
      return null;
    }
    public R visit(sample.Absyn.If p, A arg)
    { /* Code for If goes here */
      p.expr_.accept(new ExprVisitor<R,A>(), arg);
      p.program_1.accept(new ProgramVisitor<R,A>(), arg);
      p.program_2.accept(new ProgramVisitor<R,A>(), arg);
      return null;
    }
    public R visit(sample.Absyn.FuncCall p, A arg)
    { /* Code for FuncCall goes here */
      //p.ident_;
      p.comaexprs_.accept(new ComaExprsVisitor<R,A>(), arg);
      return null;
    }
    public R visit(sample.Absyn.Func p, A arg)
    { /* Code for Func goes here */
      //p.ident_;
      p.fargs_.accept(new FArgsVisitor<R,A>(), arg);
      p.type_.accept(new TypeVisitor<R,A>(), arg);
      p.program_.accept(new ProgramVisitor<R,A>(), arg);
      return null;
    }
    public R visit(sample.Absyn.Return p, A arg)
    { /* Code for Return goes here */
      p.expr_.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(sample.Absyn.Not p, A arg)
    { /* Code for Not goes here */
      p.expr_.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(sample.Absyn.And p, A arg)
    { /* Code for And goes here */
      p.expr_1.accept(new ExprVisitor<R,A>(), arg);
      p.expr_2.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(sample.Absyn.Or p, A arg)
    { /* Code for Or goes here */
      p.expr_1.accept(new ExprVisitor<R,A>(), arg);
      p.expr_2.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(sample.Absyn.ConstZero p, A arg)
    { /* Code for ConstZero goes here */
      return null;
    }
    public R visit(sample.Absyn.Succ p, A arg)
    { /* Code for Succ goes here */
      p.expr_.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(sample.Absyn.Pred p, A arg)
    { /* Code for Pred goes here */
      p.expr_.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(sample.Absyn.IsZero p, A arg)
    { /* Code for IsZero goes here */
      p.expr_.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(sample.Absyn.TypeAliasing p, A arg)
    { /* Code for TypeAliasing goes here */
      //p.ident_;
      p.typekw_.accept(new TypeKWVisitor<R,A>(), arg);
      p.type_.accept(new TypeVisitor<R,A>(), arg);
      return null;
    }
    public R visit(sample.Absyn.LcTypeAliasing p, A arg)
    { /* Code for LcTypeAliasing goes here */
      //p.ident_;
      p.typekw_.accept(new TypeKWVisitor<R,A>(), arg);
      p.type_.accept(new TypeVisitor<R,A>(), arg);
      return null;
    }
    public R visit(sample.Absyn.VarTypeAnnotation p, A arg)
    { /* Code for VarTypeAnnotation goes here */
      //p.ident_;
      p.tannot_.accept(new TAnnotVisitor<R,A>(), arg);
      p.expr_.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(sample.Absyn.LcVarTypeAnnotation p, A arg)
    { /* Code for LcVarTypeAnnotation goes here */
      //p.ident_;
      p.tannot_.accept(new TAnnotVisitor<R,A>(), arg);
      p.expr_.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(sample.Absyn.FuncTypeAnnotation p, A arg)
    { /* Code for FuncTypeAnnotation goes here */
      //p.ident_;
      p.fargs_.accept(new FArgsVisitor<R,A>(), arg);
      p.tannot_.accept(new TAnnotVisitor<R,A>(), arg);
      p.program_.accept(new ProgramVisitor<R,A>(), arg);
      return null;
    }
    public R visit(sample.Absyn.VarTypeAscription p, A arg)
    { /* Code for VarTypeAscription goes here */
      //p.ident_;
      p.tascript_.accept(new TAscriptVisitor<R,A>(), arg);
      p.expr_.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(sample.Absyn.LcVarTypeAscription p, A arg)
    { /* Code for LcVarTypeAscription goes here */
      //p.ident_;
      p.tascript_.accept(new TAscriptVisitor<R,A>(), arg);
      p.expr_.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(sample.Absyn.FuncTypeAscription p, A arg)
    { /* Code for FuncTypeAscription goes here */
      //p.ident_;
      p.fargs_.accept(new FArgsVisitor<R,A>(), arg);
      p.tascript_.accept(new TAscriptVisitor<R,A>(), arg);
      p.program_.accept(new ProgramVisitor<R,A>(), arg);
      return null;
    }
    public R visit(sample.Absyn.EInt p, A arg)
    { /* Code for EInt goes here */
      //p.integer_;
      return null;
    }
    public R visit(sample.Absyn.EDouble p, A arg)
    { /* Code for EDouble goes here */
      //p.double_;
      return null;
    }
    public R visit(sample.Absyn.EStr p, A arg)
    { /* Code for EStr goes here */
      //p.string_;
      return null;
    }
    public R visit(sample.Absyn.OnlyDecl p, A arg)
    { /* Code for OnlyDecl goes here */
      p.dec_.accept(new DecVisitor<R,A>(), arg);
      return null;
    }
    public R visit(sample.Absyn.InitDecl p, A arg)
    { /* Code for InitDecl goes here */
      p.dec_.accept(new DecVisitor<R,A>(), arg);
      p.expr_.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(sample.Absyn.InitTableDecl p, A arg)
    { /* Code for InitTableDecl goes here */
      p.dec_1.accept(new DecVisitor<R,A>(), arg);
      p.dec_2.accept(new DecVisitor<R,A>(), arg);
      p.dec_3.accept(new DecVisitor<R,A>(), arg);
      return null;
    }
  }
  public class ComaExprsVisitor<R,A> implements sample.Absyn.ComaExprs.Visitor<R,A>
  {
    public R visit(sample.Absyn.Vars p, A arg)
    { /* Code for Vars goes here */
      for (sample.Absyn.Expr x: p.listexpr_) {
        x.accept(new ExprVisitor<R,A>(), arg);
      }
      return null;
    }
  }
  public class FArgsVisitor<R,A> implements sample.Absyn.FArgs.Visitor<R,A>
  {
    public R visit(sample.Absyn.FuncArgs p, A arg)
    { /* Code for FuncArgs goes here */
      for (sample.Absyn.Dec x: p.listdec_) {
        x.accept(new DecVisitor<R,A>(), arg);
      }
      return null;
    }
  }
  public class TypeVisitor<R,A> implements sample.Absyn.Type.Visitor<R,A>
  {
    public R visit(sample.Absyn.StringType p, A arg)
    { /* Code for StringType goes here */
      return null;
    }
    public R visit(sample.Absyn.BoolType p, A arg)
    { /* Code for BoolType goes here */
      return null;
    }
    public R visit(sample.Absyn.UnitType p, A arg)
    { /* Code for UnitType goes here */
      return null;
    }
    public R visit(sample.Absyn.IntType p, A arg)
    { /* Code for IntType goes here */
      return null;
    }
    public R visit(sample.Absyn.DoubleType p, A arg)
    { /* Code for DoubleType goes here */
      return null;
    }
    public R visit(sample.Absyn.TableType p, A arg)
    { /* Code for TableType goes here */
      return null;
    }
    public R visit(sample.Absyn.NilType p, A arg)
    { /* Code for NilType goes here */
      return null;
    }
    public R visit(sample.Absyn.VoidType p, A arg)
    { /* Code for VoidType goes here */
      return null;
    }
  }
  public class TypeKWVisitor<R,A> implements sample.Absyn.TypeKW.Visitor<R,A>
  {
    public R visit(sample.Absyn.TypeKeyword p, A arg)
    { /* Code for TypeKeyword goes here */
      return null;
    }
  }
  public class VarKWVisitor<R,A> implements sample.Absyn.VarKW.Visitor<R,A>
  {
    public R visit(sample.Absyn.VarKeyword p, A arg)
    { /* Code for VarKeyword goes here */
      return null;
    }
  }
  public class TAnnotVisitor<R,A> implements sample.Absyn.TAnnot.Visitor<R,A>
  {
    public R visit(sample.Absyn.TypeAnnotation p, A arg)
    { /* Code for TypeAnnotation goes here */
      p.varkw_.accept(new VarKWVisitor<R,A>(), arg);
      return null;
    }
  }
  public class TAscriptVisitor<R,A> implements sample.Absyn.TAscript.Visitor<R,A>
  {
    public R visit(sample.Absyn.TypeAscription p, A arg)
    { /* Code for TypeAscription goes here */
      p.tannot_.accept(new TAnnotVisitor<R,A>(), arg);
      p.type_.accept(new TypeVisitor<R,A>(), arg);
      return null;
    }
  }
  public class DecVisitor<R,A> implements sample.Absyn.Dec.Visitor<R,A>
  {
    public R visit(sample.Absyn.Declaration p, A arg)
    { /* Code for Declaration goes here */
      //p.ident_;
      p.type_.accept(new TypeVisitor<R,A>(), arg);
      return null;
    }
    public R visit(sample.Absyn.LcVarDeclaration p, A arg)
    { /* Code for LcVarDeclaration goes here */
      //p.ident_;
      p.type_.accept(new TypeVisitor<R,A>(), arg);
      return null;
    }
  }
}
