
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Sample;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\003\000\002\003\005\000\002\003\002" +
    "\000\002\003\003\000\002\003\005\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\011\000\002" +
    "\004\006\000\002\004\013\000\002\004\004\000\002\004" +
    "\004\000\002\004\005\000\002\004\005\000\002\004\003" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\005\000\002\004\003\000\002\005\003\000\002" +
    "\006\003\000\002\007\002\000\002\007\003\000\002\007" +
    "\005\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\012\005\000\002\012\006\000\002\013\003\000\002\013" +
    "\005\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\044\002\uffff\006\022\011\021\012\020\021" +
    "\017\022\016\023\013\025\012\026\011\030\027\031\026" +
    "\033\025\036\023\040\005\041\004\042\015\043\006\001" +
    "\002\000\024\002\uffde\004\uffde\005\uffde\007\uffde\014\uffde" +
    "\017\uffde\020\uffde\027\uffde\035\uffde\001\002\000\024\002" +
    "\uffdc\004\uffdc\005\uffdc\007\uffdc\014\uffdc\017\uffdc\020\uffdc" +
    "\027\uffdc\035\uffdc\001\002\000\030\002\ufff9\004\ufff9\005" +
    "\ufff9\006\112\007\ufff9\010\057\014\ufff9\017\ufff9\020\ufff9" +
    "\027\ufff9\035\ufff9\001\002\000\024\002\uffd7\004\uffd7\005" +
    "\uffd7\007\uffd7\014\uffd7\017\uffd7\020\uffd7\027\uffd7\035\uffd7" +
    "\001\002\000\024\002\uffea\004\uffea\005\uffea\007\uffea\014" +
    "\uffea\017\uffea\020\uffea\027\uffea\035\uffea\001\002\000\004" +
    "\043\107\001\002\000\042\006\022\011\021\012\020\021" +
    "\017\022\016\023\013\025\012\026\011\030\027\031\026" +
    "\033\025\036\023\040\005\041\004\042\015\043\006\001" +
    "\002\000\042\006\022\011\021\012\020\021\017\022\016" +
    "\023\013\025\012\026\011\030\027\031\026\033\025\036" +
    "\023\040\005\041\004\042\015\043\006\001\002\000\022" +
    "\002\ufffe\004\075\005\074\007\ufffe\014\036\017\ufffe\020" +
    "\ufffe\027\035\001\002\000\024\002\uffdd\004\uffdd\005\uffdd" +
    "\007\uffdd\014\uffdd\017\uffdd\020\uffdd\027\uffdd\035\uffdd\001" +
    "\002\000\004\043\047\001\002\000\024\002\ufff7\004\ufff7" +
    "\005\ufff7\007\ufff7\014\ufff7\017\ufff7\020\ufff7\027\ufff7\035" +
    "\ufff7\001\002\000\024\002\uffef\004\uffef\005\uffef\007\uffef" +
    "\014\uffef\017\uffef\020\uffef\027\uffef\035\uffef\001\002\000" +
    "\042\006\022\011\021\012\020\021\017\022\016\023\013" +
    "\025\012\026\011\030\027\031\026\033\025\036\023\040" +
    "\005\041\004\042\015\043\006\001\002\000\042\006\022" +
    "\011\021\012\020\021\017\022\016\023\013\025\012\026" +
    "\011\030\027\031\026\033\025\036\023\040\005\041\004" +
    "\042\015\043\006\001\002\000\024\002\ufff8\004\ufff8\005" +
    "\ufff8\007\ufff8\014\ufff8\017\ufff8\020\ufff8\027\ufff8\035\ufff8" +
    "\001\002\000\010\002\000\017\000\020\000\001\002\000" +
    "\042\006\022\011\021\012\020\021\017\022\016\023\013" +
    "\025\012\026\011\030\027\031\026\033\025\036\023\040" +
    "\005\041\004\042\015\043\006\001\002\000\042\006\022" +
    "\011\021\012\020\021\017\022\016\023\013\025\012\026" +
    "\011\030\027\031\026\033\025\036\023\040\005\041\004" +
    "\042\015\043\006\001\002\000\042\006\022\011\021\012" +
    "\020\021\017\022\016\023\013\025\012\026\011\030\027" +
    "\031\026\033\025\036\023\040\005\041\004\042\015\043" +
    "\006\001\002\000\026\002\uffd9\004\uffd9\005\uffd9\007\uffd9" +
    "\013\033\014\uffd9\017\uffd9\020\uffd9\027\uffd9\035\uffd9\001" +
    "\002\000\004\002\032\001\002\000\004\002\001\001\002" +
    "\000\042\006\022\011\021\012\020\021\017\022\016\023" +
    "\013\025\012\026\011\030\027\031\026\033\025\036\023" +
    "\040\005\041\004\042\015\043\006\001\002\000\024\002" +
    "\uffd8\004\uffd8\005\uffd8\007\uffd8\014\036\017\uffd8\020\uffd8" +
    "\027\035\035\uffd8\001\002\000\042\006\022\011\021\012" +
    "\020\021\017\022\016\023\013\025\012\026\011\030\027" +
    "\031\026\033\025\036\023\040\005\041\004\042\015\043" +
    "\006\001\002\000\042\006\022\011\021\012\020\021\017" +
    "\022\016\023\013\025\012\026\011\030\027\031\026\033" +
    "\025\036\023\040\005\041\004\042\015\043\006\001\002" +
    "\000\024\002\ufff1\004\ufff1\005\ufff1\007\ufff1\014\036\017" +
    "\ufff1\020\ufff1\027\035\035\ufff1\001\002\000\024\002\ufff0" +
    "\004\ufff0\005\ufff0\007\ufff0\014\036\017\ufff0\020\ufff0\027" +
    "\035\035\ufff0\001\002\000\024\002\uffed\004\uffed\005\uffed" +
    "\007\uffed\014\036\017\uffed\020\uffed\027\035\035\uffed\001" +
    "\002\000\024\002\ufff3\004\ufff3\005\ufff3\007\ufff3\014\036" +
    "\017\ufff3\020\ufff3\027\035\035\ufff3\001\002\000\024\002" +
    "\uffee\004\uffee\005\uffee\007\uffee\014\036\017\uffee\020\uffee" +
    "\027\035\035\uffee\001\002\000\010\007\045\014\036\027" +
    "\035\001\002\000\024\002\uffeb\004\uffeb\005\uffeb\007\uffeb" +
    "\014\uffeb\017\uffeb\020\uffeb\027\uffeb\035\uffeb\001\002\000" +
    "\024\002\ufff2\004\ufff2\005\ufff2\007\ufff2\014\036\017\ufff2" +
    "\020\ufff2\027\035\035\ufff2\001\002\000\004\006\050\001" +
    "\002\000\010\007\uffe7\026\011\043\052\001\002\000\004" +
    "\007\067\001\002\000\004\010\057\001\002\000\006\005" +
    "\055\007\uffe6\001\002\000\004\007\uffe8\001\002\000\010" +
    "\007\uffe7\026\011\043\052\001\002\000\004\007\uffe5\001" +
    "\002\000\016\015\065\016\060\024\063\032\061\034\066" +
    "\037\064\001\002\000\066\002\uffe0\004\uffe0\005\uffe0\006" +
    "\uffe0\007\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\022\uffe0\023\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\033\uffe0\035\uffe0\036\uffe0\040\uffe0" +
    "\041\uffe0\042\uffe0\043\uffe0\001\002\000\066\002\uffe4\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\033\uffe4\035\uffe4" +
    "\036\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\001\002\000" +
    "\026\002\uffdb\004\uffdb\005\uffdb\007\uffdb\013\uffdb\014\uffdb" +
    "\017\uffdb\020\uffdb\027\uffdb\035\uffdb\001\002\000\066\002" +
    "\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\033\uffe1" +
    "\035\uffe1\036\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\001" +
    "\002\000\066\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2" +
    "\011\uffe2\012\uffe2\013\uffe2\014\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\023\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\033\uffe2\035\uffe2\036\uffe2\040\uffe2\041\uffe2\042" +
    "\uffe2\043\uffe2\001\002\000\066\002\uffe3\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\017" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\033\uffe3\035\uffe3\036\uffe3\040" +
    "\uffe3\041\uffe3\042\uffe3\043\uffe3\001\002\000\066\002\uffdf" +
    "\004\uffdf\005\uffdf\006\uffdf\007\uffdf\011\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\033\uffdf\035" +
    "\uffdf\036\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\001\002" +
    "\000\004\010\070\001\002\000\016\015\065\016\060\024" +
    "\063\032\061\034\066\037\064\001\002\000\044\006\022" +
    "\011\021\012\020\020\uffff\021\017\022\016\023\013\025" +
    "\012\026\011\030\027\031\026\033\025\036\023\040\005" +
    "\041\004\042\015\043\006\001\002\000\004\020\073\001" +
    "\002\000\024\002\ufff4\004\ufff4\005\ufff4\007\ufff4\014\ufff4" +
    "\017\ufff4\020\ufff4\027\ufff4\035\ufff4\001\002\000\052\002" +
    "\uffff\006\022\007\uffff\011\021\012\020\017\uffff\020\uffff" +
    "\021\017\022\016\023\013\025\012\026\011\030\027\031" +
    "\026\033\025\036\023\040\005\041\004\042\015\043\006" +
    "\001\002\000\052\002\uffff\006\022\007\uffff\011\021\012" +
    "\020\017\uffff\020\uffff\021\017\022\016\023\013\025\012" +
    "\026\011\030\027\031\026\033\025\036\023\040\005\041" +
    "\004\042\015\043\006\001\002\000\012\002\ufffd\007\ufffd" +
    "\017\ufffd\020\ufffd\001\002\000\012\002\ufffa\007\ufffa\017" +
    "\ufffa\020\ufffa\001\002\000\010\014\036\027\035\035\101" +
    "\001\002\000\044\006\022\011\021\012\020\017\uffff\021" +
    "\017\022\016\023\013\025\012\026\011\030\027\031\026" +
    "\033\025\036\023\040\005\041\004\042\015\043\006\001" +
    "\002\000\004\017\103\001\002\000\044\006\022\011\021" +
    "\012\020\020\uffff\021\017\022\016\023\013\025\012\026" +
    "\011\030\027\031\026\033\025\036\023\040\005\041\004" +
    "\042\015\043\006\001\002\000\004\020\105\001\002\000" +
    "\024\002\ufff6\004\ufff6\005\ufff6\007\ufff6\014\ufff6\017\ufff6" +
    "\020\ufff6\027\ufff6\035\ufff6\001\002\000\024\002\uffec\004" +
    "\uffec\005\uffec\007\uffec\014\036\017\uffec\020\uffec\027\035" +
    "\035\uffec\001\002\000\004\010\110\001\002\000\016\015" +
    "\065\016\060\024\063\032\061\034\066\037\064\001\002" +
    "\000\026\002\uffda\004\uffda\005\uffda\007\uffda\013\uffda\014" +
    "\uffda\017\uffda\020\uffda\027\uffda\035\uffda\001\002\000\044" +
    "\006\022\007\uffff\011\021\012\020\021\017\022\016\023" +
    "\013\025\012\026\011\030\027\031\026\033\025\036\023" +
    "\040\005\041\004\042\015\043\006\001\002\000\004\007" +
    "\115\001\002\000\004\007\uffe9\001\002\000\024\002\ufff5" +
    "\004\ufff5\005\ufff5\007\ufff5\014\ufff5\017\ufff5\020\ufff5\027" +
    "\ufff5\035\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\016\002\030\003\023\004\013\011\006\012" +
    "\027\013\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\105\011\006\012\027\013\007" +
    "\001\001\000\012\004\077\011\006\012\027\013\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\045\011" +
    "\006\012\027\013\007\001\001\000\012\004\043\011\006" +
    "\012\027\013\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\042\011\006\012\027\013\007\001\001" +
    "\000\012\004\041\011\006\012\027\013\007\001\001\000" +
    "\012\004\040\011\006\012\027\013\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\033\011\006\012\027\013\007\001\001\000\002\001\001" +
    "\000\012\004\037\011\006\012\027\013\007\001\001\000" +
    "\012\004\036\011\006\012\027\013\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\050\007" +
    "\053\012\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\055\012" +
    "\052\001\001\000\002\001\001\000\004\010\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\070\001\001\000" +
    "\016\002\071\003\023\004\013\011\006\012\027\013\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\076\004\013\011\006\012\027\013\007\001\001\000\014" +
    "\003\075\004\013\011\006\012\027\013\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\002\101\003\023\004\013\011\006\012\027\013\007\001" +
    "\001\000\002\001\001\000\016\002\103\003\023\004\013" +
    "\011\006\012\027\013\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\110\001\001\000\002\001\001\000\016\003\113\004" +
    "\013\005\112\011\006\012\027\013\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public Sample.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (Sample.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		Sample.Absyn.Program start_val = (Sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListExpr 
            {
              Sample.Absyn.Program RESULT =null;
		Sample.Absyn.ListExpr p_1 = (Sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.ProgramExprs(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListExpr ::= 
            {
              Sample.Absyn.ListExpr RESULT =null;
		 RESULT = new Sample.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListExpr ::= Expr 
            {
              Sample.Absyn.ListExpr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListExpr ::= Expr _SYMB_0 ListExpr 
            {
              Sample.Absyn.ListExpr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.ListExpr p_3 = (Sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListExpr ::= 
            {
              Sample.Absyn.ListExpr RESULT =null;
		 RESULT = new Sample.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListExpr ::= Expr 
            {
              Sample.Absyn.ListExpr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListExpr ::= Expr _SYMB_1 ListExpr 
            {
              Sample.Absyn.ListExpr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.ListExpr p_3 = (Sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expr ::= _IDENT_ 
            {
              Sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Var(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expr ::= _SYMB_26 
            {
              Sample.Absyn.Expr RESULT =null;
		 RESULT = new Sample.Absyn.ConstTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expr ::= _SYMB_13 
            {
              Sample.Absyn.Expr RESULT =null;
		 RESULT = new Sample.Absyn.ConstFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expr ::= _SYMB_15 Expr _SYMB_25 Program _SYMB_11 Program _SYMB_12 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Sample.Absyn.Program p_4 = (Sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Sample.Absyn.Program p_6 = (Sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Sample.Absyn.If(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expr ::= _IDENT_ _SYMB_2 ComaExprs _SYMB_3 
            {
              Sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Sample.Absyn.ComaExprs p_3 = (Sample.Absyn.ComaExprs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Sample.Absyn.FuncCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expr ::= _SYMB_14 _IDENT_ _SYMB_2 FArgs _SYMB_3 _SYMB_4 Type Program _SYMB_12 
            {
              Sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		Sample.Absyn.FArgs p_4 = (Sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Sample.Absyn.Type p_7 = (Sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Program p_8 = (Sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Sample.Absyn.Func(p_2,p_4,p_7,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expr ::= _SYMB_21 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Return(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expr ::= _SYMB_5 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Not(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expr ::= Expr _SYMB_8 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Expr p_3 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.And(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expr ::= Expr _SYMB_19 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Expr p_3 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Or(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expr ::= _SYMB_6 
            {
              Sample.Absyn.Expr RESULT =null;
		 RESULT = new Sample.Absyn.ConstZero(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expr ::= _SYMB_23 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Succ(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expr ::= _SYMB_20 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Pred(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expr ::= _SYMB_17 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.IsZero(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expr ::= _SYMB_2 Expr _SYMB_3 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expr ::= Expr1 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ComaExprs ::= ListExpr 
            {
              Sample.Absyn.ComaExprs RESULT =null;
		Sample.Absyn.ListExpr p_1 = (Sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Vars(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComaExprs",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FArgs ::= ListDec 
            {
              Sample.Absyn.FArgs RESULT =null;
		Sample.Absyn.ListDec p_1 = (Sample.Absyn.ListDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.FuncArgs(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FArgs",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ListDec ::= 
            {
              Sample.Absyn.ListDec RESULT =null;
		 RESULT = new Sample.Absyn.ListDec(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListDec ::= Dec 
            {
              Sample.Absyn.ListDec RESULT =null;
		Sample.Absyn.Dec p_1 = (Sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.ListDec(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListDec ::= Dec _SYMB_1 ListDec 
            {
              Sample.Absyn.ListDec RESULT =null;
		Sample.Absyn.Dec p_1 = (Sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.ListDec p_3 = (Sample.Absyn.ListDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Type ::= _SYMB_22 
            {
              Sample.Absyn.Type RESULT =null;
		 RESULT = new Sample.Absyn.StringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Type ::= _SYMB_9 
            {
              Sample.Absyn.Type RESULT =null;
		 RESULT = new Sample.Absyn.BoolType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Type ::= _SYMB_27 
            {
              Sample.Absyn.Type RESULT =null;
		 RESULT = new Sample.Absyn.UnitType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Type ::= _SYMB_16 
            {
              Sample.Absyn.Type RESULT =null;
		 RESULT = new Sample.Absyn.IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Type ::= _SYMB_10 
            {
              Sample.Absyn.Type RESULT =null;
		 RESULT = new Sample.Absyn.DoubleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Type ::= _SYMB_24 
            {
              Sample.Absyn.Type RESULT =null;
		 RESULT = new Sample.Absyn.TableType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expr2 ::= _INTEGER_ 
            {
              Sample.Absyn.Expr RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.EInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expr2 ::= _DOUBLE_ 
            {
              Sample.Absyn.Expr RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.EDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expr2 ::= _STRING_ 
            {
              Sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.EStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Dec ::= _IDENT_ _SYMB_4 Type 
            {
              Sample.Absyn.Dec RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Type p_3 = (Sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Declaration(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Dec ::= _SYMB_18 _IDENT_ _SYMB_4 Type 
            {
              Sample.Absyn.Dec RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Type p_4 = (Sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.LocalVarDeclaration(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr1 ::= Dec 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Dec p_1 = (Sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.OnlyDecl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr1 ::= Dec _SYMB_7 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Dec p_1 = (Sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Expr p_3 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.InitDecl(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr1 ::= Expr2 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",9, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
