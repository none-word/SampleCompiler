
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sample;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\003\000\002\003\005\000\002\003\002" +
    "\000\002\003\003\000\002\003\005\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\011\000\002" +
    "\004\006\000\002\004\013\000\002\004\004\000\002\004" +
    "\003\000\002\004\004\000\002\004\005\000\002\004\005" +
    "\000\002\004\003\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\005\000\002\004\003\000\002" +
    "\005\003\000\002\006\003\000\002\007\002\000\002\007" +
    "\003\000\002\007\005\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\011\003\000\002" +
    "\012\007\000\002\012\006\000\002\012\007\000\002\012" +
    "\012\000\002\012\003\000\002\013\003\000\002\014\004" +
    "\000\002\015\006\000\002\016\006\000\002\016\007\000" +
    "\002\016\012\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\020\005\000\002\021" +
    "\006\000\002\022\003\000\002\022\003\000\002\022\005" +
    "\000\002\022\005\000\002\022\011\000\002\022\011\000" +
    "\002\022\011\000\002\022\011\000\002\022\005\000\002" +
    "\022\007\000\002\022\005\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\062\002\uffff\006\031\012\030\013\027\016" +
    "\026\017\025\022\023\023\020\024\017\025\016\026\015" +
    "\027\014\030\042\032\040\033\037\034\035\035\034\036" +
    "\033\040\032\043\010\044\005\045\004\046\022\047\006" +
    "\001\002\000\024\002\uffd0\004\uffd0\005\uffd0\007\uffd0\015" +
    "\uffd0\020\uffd0\021\uffd0\031\uffd0\037\uffd0\001\002\000\024" +
    "\002\uffce\004\uffce\005\uffce\007\uffce\015\uffce\020\uffce\021" +
    "\uffce\031\uffce\037\uffce\001\002\000\034\002\ufff9\004\ufff9" +
    "\005\ufff9\006\072\007\ufff9\010\071\011\076\014\075\015" +
    "\ufff9\020\ufff9\021\ufff9\031\ufff9\037\ufff9\001\002\000\024" +
    "\002\uffd7\004\uffd7\005\uffd7\007\uffd7\015\uffd7\020\uffd7\021" +
    "\uffd7\031\uffd7\037\uffd7\001\002\000\106\002\uffde\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031" +
    "\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde" +
    "\040\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\001" +
    "\002\000\024\002\uffbf\004\uffbf\005\uffbf\007\uffbf\015\uffbf" +
    "\020\uffbf\021\uffbf\031\uffbf\037\uffbf\001\002\000\024\002" +
    "\uffcd\004\uffcd\005\uffcd\007\uffcd\015\uffcd\020\uffcd\021\uffcd" +
    "\031\uffcd\037\uffcd\001\002\000\024\002\uffe9\004\uffe9\005" +
    "\uffe9\007\uffe9\015\uffe9\020\uffe9\021\uffe9\031\uffe9\037\uffe9" +
    "\001\002\000\060\006\031\012\030\013\027\016\026\017" +
    "\025\022\023\023\020\024\017\025\016\026\015\027\014" +
    "\030\042\032\040\033\037\034\035\035\034\036\033\040" +
    "\032\043\010\044\005\045\004\046\022\047\006\001\002" +
    "\000\106\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\013\uffe1\015\uffe1\016\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\036\uffe1\037\uffe1\040\uffe1\043\uffe1\044\uffe1\045" +
    "\uffe1\046\uffe1\047\uffe1\001\002\000\060\006\031\012\030" +
    "\013\027\016\026\017\025\022\023\023\020\024\017\025" +
    "\016\026\015\027\014\030\042\032\040\033\037\034\035" +
    "\035\034\036\033\040\032\043\010\044\005\045\004\046" +
    "\022\047\006\001\002\000\004\047\175\001\002\000\004" +
    "\047\151\001\002\000\022\002\ufffe\004\146\005\145\007" +
    "\ufffe\015\065\020\ufffe\021\ufffe\031\064\001\002\000\024" +
    "\002\uffcf\004\uffcf\005\uffcf\007\uffcf\015\uffcf\020\uffcf\021" +
    "\uffcf\031\uffcf\037\uffcf\001\002\000\024\002\ufff7\004\ufff7" +
    "\005\ufff7\007\ufff7\015\ufff7\020\ufff7\021\ufff7\031\ufff7\037" +
    "\ufff7\001\002\000\004\010\140\001\002\000\106\002\uffe0" +
    "\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012" +
    "\uffe0\013\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047" +
    "\uffe0\001\002\000\106\002\uffe2\004\uffe2\005\uffe2\006\uffe2" +
    "\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\043\uffe2" +
    "\044\uffe2\045\uffe2\046\uffe2\047\uffe2\001\002\000\024\002" +
    "\uffee\004\uffee\005\uffee\007\uffee\015\uffee\020\uffee\021\uffee" +
    "\031\uffee\037\uffee\001\002\000\060\006\031\012\030\013" +
    "\027\016\026\017\025\022\023\023\020\024\017\025\016" +
    "\026\015\027\014\030\042\032\040\033\037\034\035\035" +
    "\034\036\033\040\032\043\010\044\005\045\004\046\022" +
    "\047\006\001\002\000\060\006\031\012\030\013\027\016" +
    "\026\017\025\022\023\023\020\024\017\025\016\026\015" +
    "\027\014\030\042\032\040\033\037\034\035\035\034\036" +
    "\033\040\032\043\010\044\005\045\004\046\022\047\006" +
    "\001\002\000\024\002\ufff8\004\ufff8\005\ufff8\007\ufff8\015" +
    "\ufff8\020\ufff8\021\ufff8\031\ufff8\037\ufff8\001\002\000\106" +
    "\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011" +
    "\uffdf\012\uffdf\013\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\040\uffdf\043\uffdf\044\uffdf\045\uffdf\046" +
    "\uffdf\047\uffdf\001\002\000\060\006\031\012\030\013\027" +
    "\016\026\017\025\022\023\023\020\024\017\025\016\026" +
    "\015\027\014\030\042\032\040\033\037\034\035\035\034" +
    "\036\033\040\032\043\010\044\005\045\004\046\022\047" +
    "\006\001\002\000\106\002\uffe3\004\uffe3\005\uffe3\006\uffe3" +
    "\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\046\uffe3\047\uffe3\001\002\000\010\002" +
    "\000\020\000\021\000\001\002\000\060\006\031\012\030" +
    "\013\027\016\026\017\025\022\023\023\020\024\017\025" +
    "\016\026\015\027\014\030\042\032\040\033\037\034\035" +
    "\035\034\036\033\040\032\043\010\044\005\045\004\046" +
    "\022\047\006\001\002\000\060\006\031\012\030\013\027" +
    "\016\026\017\025\022\023\023\020\024\017\025\016\026" +
    "\015\027\014\030\042\032\040\033\037\034\035\035\034" +
    "\036\033\040\032\043\010\044\005\045\004\046\022\047" +
    "\006\001\002\000\026\002\uffc9\004\uffc9\005\uffc9\007\uffc9" +
    "\011\121\015\uffc9\020\uffc9\021\uffc9\031\uffc9\037\uffc9\001" +
    "\002\000\024\002\ufff2\004\ufff2\005\ufff2\007\ufff2\015\ufff2" +
    "\020\ufff2\021\ufff2\031\ufff2\037\ufff2\001\002\000\026\002" +
    "\uffca\004\uffca\005\uffca\007\uffca\011\046\015\uffca\020\uffca" +
    "\021\uffca\031\uffca\037\uffca\001\002\000\004\002\045\001" +
    "\002\000\004\002\001\001\002\000\060\006\050\012\030" +
    "\013\027\016\026\017\025\022\023\023\020\024\017\025" +
    "\016\026\015\027\014\030\042\032\040\033\037\034\035" +
    "\035\034\036\033\040\032\043\010\044\005\045\004\046" +
    "\022\047\006\001\002\000\024\002\uffc8\004\uffc8\005\uffc8" +
    "\007\uffc8\015\065\020\uffc8\021\uffc8\031\064\037\uffc8\001" +
    "\002\000\060\006\031\012\030\013\027\016\026\017\025" +
    "\022\023\023\020\024\017\025\016\026\015\027\014\030" +
    "\042\032\040\033\037\034\035\035\034\036\033\040\032" +
    "\043\010\044\005\045\004\046\022\047\051\001\002\000" +
    "\022\005\073\006\072\007\ufff9\010\071\011\076\014\075" +
    "\015\ufff9\031\ufff9\001\002\000\010\007\063\015\065\031" +
    "\064\001\002\000\014\005\054\007\uffca\011\046\015\uffca" +
    "\031\uffca\001\002\000\004\047\055\001\002\000\004\010" +
    "\060\001\002\000\004\007\057\001\002\000\024\002\uffc4" +
    "\004\uffc4\005\uffc4\007\uffc4\015\uffc4\020\uffc4\021\uffc4\031" +
    "\uffc4\037\uffc4\001\002\000\020\016\026\017\025\026\015" +
    "\034\035\036\033\043\010\047\062\001\002\000\026\002" +
    "\uffcc\004\uffcc\005\uffcc\007\uffcc\011\uffcc\015\uffcc\020\uffcc" +
    "\021\uffcc\031\uffcc\037\uffcc\001\002\000\104\002\uffdd\004" +
    "\uffdd\005\uffdd\006\uffdd\007\uffdd\011\uffdd\012\uffdd\013\uffdd" +
    "\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040" +
    "\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\001\002" +
    "\000\024\002\uffea\004\uffea\005\uffea\007\uffea\015\uffea\020" +
    "\uffea\021\uffea\031\uffea\037\uffea\001\002\000\060\006\031" +
    "\012\030\013\027\016\026\017\025\022\023\023\020\024" +
    "\017\025\016\026\015\027\014\030\042\032\040\033\037" +
    "\034\035\035\034\036\033\040\032\043\010\044\005\045" +
    "\004\046\022\047\006\001\002\000\060\006\031\012\030" +
    "\013\027\016\026\017\025\022\023\023\020\024\017\025" +
    "\016\026\015\027\014\030\042\032\040\033\037\034\035" +
    "\035\034\036\033\040\032\043\010\044\005\045\004\046" +
    "\022\047\006\001\002\000\024\002\ufff0\004\ufff0\005\ufff0" +
    "\007\ufff0\015\065\020\ufff0\021\ufff0\031\064\037\ufff0\001" +
    "\002\000\024\002\uffef\004\uffef\005\uffef\007\uffef\015\065" +
    "\020\uffef\021\uffef\031\064\037\uffef\001\002\000\004\011" +
    "\117\001\002\000\022\016\026\017\025\026\015\034\035" +
    "\036\033\042\116\043\010\047\062\001\002\000\062\006" +
    "\031\007\uffff\012\030\013\027\016\026\017\025\022\023" +
    "\023\020\024\017\025\016\026\015\027\014\030\042\032" +
    "\040\033\037\034\035\035\034\036\033\040\032\043\010" +
    "\044\005\045\004\046\022\047\006\001\002\000\004\047" +
    "\110\001\002\000\006\006\103\011\104\001\002\000\004" +
    "\047\100\001\002\000\060\006\031\012\030\013\027\016" +
    "\026\017\025\022\023\023\020\024\017\025\016\026\015" +
    "\027\014\030\042\032\040\033\037\034\035\035\034\036" +
    "\033\040\032\043\010\044\005\045\004\046\022\047\006" +
    "\001\002\000\024\002\uffc0\004\uffc0\005\uffc0\007\uffc0\015" +
    "\065\020\uffc0\021\uffc0\031\064\037\uffc0\001\002\000\026" +
    "\002\uffc2\004\uffc2\005\uffc2\007\uffc2\011\101\015\uffc2\020" +
    "\uffc2\021\uffc2\031\uffc2\037\uffc2\001\002\000\060\006\031" +
    "\012\030\013\027\016\026\017\025\022\023\023\020\024" +
    "\017\025\016\026\015\027\014\030\042\032\040\033\037" +
    "\034\035\035\034\036\033\040\032\043\010\044\005\045" +
    "\004\046\022\047\006\001\002\000\024\002\uffc1\004\uffc1" +
    "\005\uffc1\007\uffc1\015\065\020\uffc1\021\uffc1\031\064\037" +
    "\uffc1\001\002\000\020\016\026\017\025\026\015\034\035" +
    "\036\033\043\010\047\062\001\002\000\060\006\031\012" +
    "\030\013\027\016\026\017\025\022\023\023\020\024\017" +
    "\025\016\026\015\027\014\030\042\032\040\033\037\034" +
    "\035\035\034\036\033\040\032\043\010\044\005\045\004" +
    "\046\022\047\006\001\002\000\024\002\uffda\004\uffda\005" +
    "\uffda\007\uffda\015\065\020\uffda\021\uffda\031\064\037\uffda" +
    "\001\002\000\004\007\107\001\002\000\064\006\uffd4\011" +
    "\uffd4\012\uffd4\013\uffd4\016\uffd4\017\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\040\uffd4\043\uffd4" +
    "\044\uffd4\045\uffd4\046\uffd4\047\uffd4\001\002\000\004\007" +
    "\111\001\002\000\024\002\uffc6\004\uffc6\005\uffc6\007\uffc6" +
    "\015\uffc6\020\uffc6\021\uffc6\031\uffc6\037\uffc6\001\002\000" +
    "\004\007\114\001\002\000\004\007\uffe8\001\002\000\024" +
    "\002\ufff5\004\ufff5\005\ufff5\007\ufff5\015\ufff5\020\ufff5\021" +
    "\ufff5\031\ufff5\037\ufff5\001\002\000\064\006\uffd5\011\uffd5" +
    "\012\uffd5\013\uffd5\016\uffd5\017\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\040\uffd5\043\uffd5\044" +
    "\uffd5\045\uffd5\046\uffd5\047\uffd5\001\002\000\064\006\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\016\uffd6\017\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\040\uffd6\043" +
    "\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\001\002\000\060" +
    "\006\031\012\030\013\027\016\026\017\025\022\023\023" +
    "\020\024\017\025\016\026\015\027\014\030\042\032\040" +
    "\033\037\034\035\035\034\036\033\040\032\043\010\044" +
    "\005\045\004\046\022\047\006\001\002\000\024\002\uffd3" +
    "\004\uffd3\005\uffd3\007\uffd3\015\065\020\uffd3\021\uffd3\031" +
    "\064\037\uffd3\001\002\000\060\006\123\012\030\013\027" +
    "\016\026\017\025\022\023\023\020\024\017\025\016\026" +
    "\015\027\014\030\042\032\040\033\037\034\035\035\034" +
    "\036\033\040\032\043\010\044\005\045\004\046\022\047" +
    "\006\001\002\000\024\002\uffc7\004\uffc7\005\uffc7\007\uffc7" +
    "\015\065\020\uffc7\021\uffc7\031\064\037\uffc7\001\002\000" +
    "\060\006\031\012\030\013\027\016\026\017\025\022\023" +
    "\023\020\024\017\025\016\026\015\027\014\030\042\032" +
    "\040\033\037\034\035\035\034\036\033\040\032\043\010" +
    "\044\005\045\004\046\022\047\124\001\002\000\022\005" +
    "\131\006\072\007\ufff9\010\071\011\076\014\075\015\ufff9" +
    "\031\ufff9\001\002\000\014\005\126\007\uffca\011\046\015" +
    "\uffca\031\uffca\001\002\000\004\047\055\001\002\000\004" +
    "\007\130\001\002\000\024\002\uffc3\004\uffc3\005\uffc3\007" +
    "\uffc3\015\uffc3\020\uffc3\021\uffc3\031\uffc3\037\uffc3\001\002" +
    "\000\004\047\132\001\002\000\004\007\133\001\002\000" +
    "\024\002\uffc5\004\uffc5\005\uffc5\007\uffc5\015\uffc5\020\uffc5" +
    "\021\uffc5\031\uffc5\037\uffc5\001\002\000\024\002\uffec\004" +
    "\uffec\005\uffec\007\uffec\015\065\020\uffec\021\uffec\031\064" +
    "\037\uffec\001\002\000\024\002\ufff3\004\ufff3\005\ufff3\007" +
    "\ufff3\015\065\020\ufff3\021\ufff3\031\064\037\ufff3\001\002" +
    "\000\024\002\uffed\004\uffed\005\uffed\007\uffed\015\065\020" +
    "\uffed\021\uffed\031\064\037\uffed\001\002\000\024\002\ufff1" +
    "\004\ufff1\005\ufff1\007\ufff1\015\065\020\ufff1\021\ufff1\031" +
    "\064\037\ufff1\001\002\000\004\041\141\001\002\000\004" +
    "\011\uffdc\001\002\000\004\011\143\001\002\000\020\016" +
    "\026\017\025\026\015\034\035\036\033\043\010\047\062" +
    "\001\002\000\024\002\uffdb\004\uffdb\005\uffdb\007\uffdb\015" +
    "\uffdb\020\uffdb\021\uffdb\031\uffdb\037\uffdb\001\002\000\070" +
    "\002\uffff\006\031\007\uffff\012\030\013\027\016\026\017" +
    "\025\020\uffff\021\uffff\022\023\023\020\024\017\025\016" +
    "\026\015\027\014\030\042\032\040\033\037\034\035\035" +
    "\034\036\033\040\032\043\010\044\005\045\004\046\022" +
    "\047\006\001\002\000\070\002\uffff\006\031\007\uffff\012" +
    "\030\013\027\016\026\017\025\020\uffff\021\uffff\022\023" +
    "\023\020\024\017\025\016\026\015\027\014\030\042\032" +
    "\040\033\037\034\035\035\034\036\033\040\032\043\010" +
    "\044\005\045\004\046\022\047\006\001\002\000\012\002" +
    "\ufffd\007\ufffd\020\ufffd\021\ufffd\001\002\000\012\002\ufffa" +
    "\007\ufffa\020\ufffa\021\ufffa\001\002\000\004\006\152\001" +
    "\002\000\006\007\uffe6\047\055\001\002\000\004\007\160" +
    "\001\002\000\006\005\156\007\uffe5\001\002\000\004\007" +
    "\uffe7\001\002\000\006\007\uffe6\047\055\001\002\000\004" +
    "\007\uffe4\001\002\000\004\010\161\001\002\000\022\016" +
    "\026\017\025\026\015\034\035\036\033\042\116\043\010" +
    "\047\062\001\002\000\062\006\031\012\030\013\027\016" +
    "\026\017\025\021\uffff\022\023\023\020\024\017\025\016" +
    "\026\015\027\014\030\042\032\040\033\037\034\035\035" +
    "\034\036\033\040\032\043\010\044\005\045\004\046\022" +
    "\047\006\001\002\000\062\006\164\012\030\013\027\016" +
    "\026\017\025\021\uffff\022\023\023\020\024\017\025\016" +
    "\026\015\027\014\030\042\032\040\033\037\034\035\035" +
    "\034\036\033\040\032\043\010\044\005\045\004\046\022" +
    "\047\006\001\002\000\060\006\031\012\030\013\027\016" +
    "\026\017\025\022\023\023\020\024\017\025\016\026\015" +
    "\027\014\030\042\032\040\033\037\034\035\035\034\036" +
    "\033\040\032\043\010\044\005\045\004\046\022\047\006" +
    "\001\002\000\004\021\166\001\002\000\024\002\uffd8\004" +
    "\uffd8\005\uffd8\007\uffd8\015\uffd8\020\uffd8\021\uffd8\031\uffd8" +
    "\037\uffd8\001\002\000\006\007\107\010\140\001\002\000" +
    "\004\021\171\001\002\000\024\002\uffd1\004\uffd1\005\uffd1" +
    "\007\uffd1\015\uffd1\020\uffd1\021\uffd1\031\uffd1\037\uffd1\001" +
    "\002\000\062\006\031\012\030\013\027\016\026\017\025" +
    "\021\uffff\022\023\023\020\024\017\025\016\026\015\027" +
    "\014\030\042\032\040\033\037\034\035\035\034\036\033" +
    "\040\032\043\010\044\005\045\004\046\022\047\006\001" +
    "\002\000\004\021\174\001\002\000\024\002\ufff4\004\ufff4" +
    "\005\ufff4\007\ufff4\015\ufff4\020\ufff4\021\ufff4\031\ufff4\037" +
    "\ufff4\001\002\000\004\010\177\001\002\000\004\011\204" +
    "\001\002\000\022\016\026\017\025\026\015\034\035\036" +
    "\033\042\116\043\010\047\062\001\002\000\006\006\103" +
    "\011\201\001\002\000\060\006\031\012\030\013\027\016" +
    "\026\017\025\022\023\023\020\024\017\025\016\026\015" +
    "\027\014\030\042\032\040\033\037\034\035\035\034\036" +
    "\033\040\032\043\010\044\005\045\004\046\022\047\006" +
    "\001\002\000\024\002\uffd9\004\uffd9\005\uffd9\007\uffd9\015" +
    "\065\020\uffd9\021\uffd9\031\064\037\uffd9\001\002\000\026" +
    "\002\uffcb\004\uffcb\005\uffcb\007\uffcb\011\uffcb\015\uffcb\020" +
    "\uffcb\021\uffcb\031\uffcb\037\uffcb\001\002\000\060\006\031" +
    "\012\030\013\027\016\026\017\025\022\023\023\020\024" +
    "\017\025\016\026\015\027\014\030\042\032\040\033\037" +
    "\034\035\035\034\036\033\040\032\043\010\044\005\045" +
    "\004\046\022\047\006\001\002\000\024\002\uffd2\004\uffd2" +
    "\005\uffd2\007\uffd2\015\065\020\uffd2\021\uffd2\031\064\037" +
    "\uffd2\001\002\000\010\015\065\031\064\037\207\001\002" +
    "\000\062\006\031\012\030\013\027\016\026\017\025\020" +
    "\uffff\022\023\023\020\024\017\025\016\026\015\027\014" +
    "\030\042\032\040\033\037\034\035\035\034\036\033\040" +
    "\032\043\010\044\005\045\004\046\022\047\006\001\002" +
    "\000\004\020\211\001\002\000\062\006\031\012\030\013" +
    "\027\016\026\017\025\021\uffff\022\023\023\020\024\017" +
    "\025\016\026\015\027\014\030\042\032\040\033\037\034" +
    "\035\035\034\036\033\040\032\043\010\044\005\045\004" +
    "\046\022\047\006\001\002\000\004\021\213\001\002\000" +
    "\024\002\ufff6\004\ufff6\005\ufff6\007\ufff6\015\ufff6\020\ufff6" +
    "\021\ufff6\031\ufff6\037\ufff6\001\002\000\024\002\uffeb\004" +
    "\uffeb\005\uffeb\007\uffeb\015\065\020\uffeb\021\uffeb\031\064" +
    "\037\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\026\002\043\003\035\004\020\010\023\012" +
    "\010\016\006\017\012\020\042\021\040\022\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\073\015" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\213\010\023\012\010\016\006\017\012\020\042\021\040" +
    "\022\011\001\001\000\002\001\001\000\022\004\205\010" +
    "\023\012\010\016\006\017\012\020\042\021\040\022\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\136\010\023\012\010\016\006\017\012\020\042" +
    "\021\040\022\011\001\001\000\022\004\051\010\023\012" +
    "\010\016\006\017\012\020\042\021\040\022\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\135\010" +
    "\023\012\010\016\006\017\012\020\042\021\040\022\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\134\010\023\012\010\016\006\017\012\020\042\021\040" +
    "\022\011\001\001\000\022\004\133\010\023\012\010\016" +
    "\006\017\012\020\042\021\040\022\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\046\010\023\012\010" +
    "\016\006\017\012\020\042\021\040\022\011\001\001\000" +
    "\002\001\001\000\022\004\051\010\023\012\010\016\006" +
    "\017\012\020\052\021\040\022\011\001\001\000\006\014" +
    "\073\015\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\066\010\023\012\010\016\006\017\012\020\042\021\040" +
    "\022\011\001\001\000\022\004\065\010\023\012\010\016" +
    "\006\017\012\020\042\021\040\022\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\060\013\114\001\001\000\026\003\112\004\020\005\111" +
    "\010\023\012\010\016\006\017\012\020\042\021\040\022" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\004\076\010\023\012\010\016\006\017" +
    "\012\020\042\021\040\022\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\101\010\023\012\010\016" +
    "\006\017\012\020\042\021\040\022\011\001\001\000\002" +
    "\001\001\000\004\010\105\001\001\000\022\004\104\010" +
    "\023\012\010\016\006\017\012\020\042\021\040\022\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\117\010\023\012\010\016\006" +
    "\017\012\020\042\021\040\022\011\001\001\000\002\001" +
    "\001\000\022\004\121\010\023\012\010\016\006\017\012" +
    "\020\042\021\040\022\011\001\001\000\002\001\001\000" +
    "\022\004\051\010\023\012\010\016\006\017\012\020\124" +
    "\021\040\022\011\001\001\000\006\014\073\015\067\001" +
    "\001\000\002\001\001\000\004\020\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\143" +
    "\001\001\000\002\001\001\000\024\003\147\004\020\010" +
    "\023\012\010\016\006\017\012\020\042\021\040\022\011" +
    "\001\001\000\024\003\146\004\020\010\023\012\010\016" +
    "\006\017\012\020\042\021\040\022\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\152\007\154\020\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\156\020\153\001" +
    "\001\000\002\001\001\000\006\014\162\015\161\001\001" +
    "\000\006\010\171\013\114\001\001\000\026\002\167\003" +
    "\035\004\020\010\023\012\010\016\006\017\012\020\042" +
    "\021\040\022\011\001\001\000\026\002\164\003\035\004" +
    "\020\010\023\012\010\016\006\017\012\020\042\021\040" +
    "\022\011\001\001\000\022\004\051\010\166\012\010\016" +
    "\006\017\012\020\042\021\040\022\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\002\172\003\035\004\020" +
    "\010\023\012\010\016\006\017\012\020\042\021\040\022" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\177\015\175\001\001\000\002\001\001\000\006\010" +
    "\202\013\114\001\001\000\002\001\001\000\022\004\201" +
    "\010\023\012\010\016\006\017\012\020\042\021\040\022" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\204\010\023\012\010\016\006\017\012\020\042\021" +
    "\040\022\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\002\207\003\035\004\020\010\023\012\010\016" +
    "\006\017\012\020\042\021\040\022\011\001\001\000\002" +
    "\001\001\000\026\002\211\003\035\004\020\010\023\012" +
    "\010\016\006\017\012\020\042\021\040\022\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public sample.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (sample.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		sample.Absyn.Program start_val = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListExpr 
            {
              sample.Absyn.Program RESULT =null;
		sample.Absyn.ListExpr p_1 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ProgramExprs(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListExpr ::= 
            {
              sample.Absyn.ListExpr RESULT =null;
		 RESULT = new sample.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListExpr ::= Expr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListExpr ::= Expr _SYMB_0 ListExpr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.ListExpr p_3 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListExpr ::= 
            {
              sample.Absyn.ListExpr RESULT =null;
		 RESULT = new sample.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListExpr ::= Expr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListExpr ::= Expr _SYMB_1 ListExpr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.ListExpr p_3 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expr ::= _IDENT_ 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Var(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expr ::= _SYMB_28 
            {
              sample.Absyn.Expr RESULT =null;
		 RESULT = new sample.Absyn.ConstTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expr ::= _SYMB_14 
            {
              sample.Absyn.Expr RESULT =null;
		 RESULT = new sample.Absyn.ConstFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expr ::= _SYMB_17 Expr _SYMB_27 Program _SYMB_12 Program _SYMB_13 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		sample.Absyn.Program p_4 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Program p_6 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.If(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expr ::= _IDENT_ _SYMB_2 ComaExprs _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.ComaExprs p_3 = (sample.Absyn.ComaExprs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.FuncCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expr ::= _SYMB_15 _IDENT_ _SYMB_2 FArgs _SYMB_3 _SYMB_4 Type Program _SYMB_13 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		sample.Absyn.FArgs p_4 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		sample.Absyn.Type p_7 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Program p_8 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.Func(p_2,p_4,p_7,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expr ::= _SYMB_23 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Return(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expr ::= _SYMB_20 
            {
              sample.Absyn.Expr RESULT =null;
		 RESULT = new sample.Absyn.NilKeyword(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expr ::= _SYMB_6 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Not(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expr ::= Expr _SYMB_9 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.And(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expr ::= Expr _SYMB_21 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Or(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expr ::= _SYMB_7 
            {
              sample.Absyn.Expr RESULT =null;
		 RESULT = new sample.Absyn.ConstZero(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expr ::= _SYMB_25 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Succ(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expr ::= _SYMB_22 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Pred(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expr ::= _SYMB_19 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.IsZero(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expr ::= _SYMB_2 Expr _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expr ::= Expr1 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ComaExprs ::= ListExpr 
            {
              sample.Absyn.ComaExprs RESULT =null;
		sample.Absyn.ListExpr p_1 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Vars(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComaExprs",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FArgs ::= ListDec 
            {
              sample.Absyn.FArgs RESULT =null;
		sample.Absyn.ListDec p_1 = (sample.Absyn.ListDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.FuncArgs(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FArgs",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListDec ::= 
            {
              sample.Absyn.ListDec RESULT =null;
		 RESULT = new sample.Absyn.ListDec(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListDec ::= Dec 
            {
              sample.Absyn.ListDec RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ListDec(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListDec ::= Dec _SYMB_1 ListDec 
            {
              sample.Absyn.ListDec RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.ListDec p_3 = (sample.Absyn.ListDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Type ::= _SYMB_24 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.StringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Type ::= _SYMB_10 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.BoolType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Type ::= _SYMB_18 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Type ::= _SYMB_11 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.DoubleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Type ::= _SYMB_26 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.TableType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Type ::= _SYMB_31 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.VoidType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Type ::= _IDENT_ 
            {
              sample.Absyn.Type RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TypeAlIdent(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TypeKW ::= _SYMB_29 
            {
              sample.Absyn.TypeKW RESULT =null;
		 RESULT = new sample.Absyn.TypeKeyword(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeKW",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expr3 ::= Type _SYMB_4 TypeKW _SYMB_5 Type 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Type p_1 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		sample.Absyn.TypeKW p_3 = (sample.Absyn.TypeKW)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Type p_5 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TypeAliasing(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expr3 ::= _IDENT_ TAnnot _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.TAnnot p_2 = (sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_4 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.VarTypeAnnotation(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr3 ::= _SYMB_16 _IDENT_ TAnnot _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.TAnnot p_3 = (sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_5 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.GlVarTypeAnnotation(p_2,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr3 ::= _SYMB_15 _IDENT_ _SYMB_2 FArgs _SYMB_3 TAnnot Program _SYMB_13 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		sample.Absyn.FArgs p_4 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		sample.Absyn.TAnnot p_6 = (sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Program p_7 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.FuncTypeAnnotation(p_2,p_4,p_6,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr3 ::= Expr4 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VarKW ::= _SYMB_30 
            {
              sample.Absyn.VarKW RESULT =null;
		 RESULT = new sample.Absyn.VarKeyword(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarKW",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TAnnot ::= _SYMB_4 VarKW 
            {
              sample.Absyn.TAnnot RESULT =null;
		sample.Absyn.VarKW p_2 = (sample.Absyn.VarKW)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TypeAnnotation(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TAnnot",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TAscript ::= TAnnot _SYMB_2 Type _SYMB_3 
            {
              sample.Absyn.TAscript RESULT =null;
		sample.Absyn.TAnnot p_1 = (sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Type p_3 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.TypeAscription(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TAscript",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr4 ::= _IDENT_ TAscript _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.TAscript p_2 = (sample.Absyn.TAscript)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_4 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.VarTypeAscription(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr4 ::= _SYMB_16 _IDENT_ TAscript _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.TAscript p_3 = (sample.Absyn.TAscript)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_5 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.GlVarTypeAscription(p_2,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr4 ::= _SYMB_15 _IDENT_ _SYMB_2 FArgs _SYMB_3 TAscript Program _SYMB_13 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		sample.Absyn.FArgs p_4 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		sample.Absyn.TAscript p_6 = (sample.Absyn.TAscript)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Program p_7 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.FuncTypeAscription(p_2,p_4,p_6,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr1 ::= _INTEGER_ 
            {
              sample.Absyn.Expr RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.EInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr1 ::= _DOUBLE_ 
            {
              sample.Absyn.Expr RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.EDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr1 ::= _STRING_ 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.EStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr1 ::= Expr2 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Dec ::= _IDENT_ _SYMB_4 Type 
            {
              sample.Absyn.Dec RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Type p_3 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Declaration(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // GlDec ::= _SYMB_16 _IDENT_ _SYMB_4 Type 
            {
              sample.Absyn.GlDec RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Type p_4 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.GlDeclaration(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GlDec",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr2 ::= Dec 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.OnlyDecl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr2 ::= GlDec 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.GlDec p_1 = (sample.Absyn.GlDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.OnlyGlDecl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr2 ::= Dec _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.InitDecl(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr2 ::= GlDec _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.GlDec p_1 = (sample.Absyn.GlDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.InitGlDecl(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr2 ::= Dec _SYMB_5 _SYMB_2 _IDENT_ _SYMB_1 _IDENT_ _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String p_6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.TableDecl(p_1,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr2 ::= GlDec _SYMB_5 _SYMB_2 _IDENT_ _SYMB_1 _IDENT_ _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.GlDec p_1 = (sample.Absyn.GlDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String p_6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.GlTableDecl(p_1,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr2 ::= Dec _SYMB_5 _SYMB_2 Dec _SYMB_1 Dec _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		sample.Absyn.Dec p_4 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Dec p_6 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.InitTableDecl(p_1,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr2 ::= GlDec _SYMB_5 _SYMB_2 Dec _SYMB_1 Dec _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.GlDec p_1 = (sample.Absyn.GlDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		sample.Absyn.Dec p_4 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Dec p_6 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.InitGlTableDecl(p_1,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr2 ::= _IDENT_ _SYMB_8 _IDENT_ 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TableElementCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr2 ::= _IDENT_ _SYMB_8 _IDENT_ _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_5 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TableElementAssignment(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr2 ::= _IDENT_ _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Assignment(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr2 ::= Expr3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
