
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Sample;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\003\000\002\003\005\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\011\000" +
    "\002\004\004\000\002\004\005\000\002\004\005\000\002" +
    "\004\003\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\005\000\002\004\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\005\000\002\007\006\000\002\010" +
    "\003\000\002\010\005\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\064\000\040\002\uffff\005\022\006\021\011\020\020" +
    "\017\021\016\023\013\024\012\026\011\030\025\032\024" +
    "\034\005\035\004\036\015\037\006\001\002\000\022\002" +
    "\uffea\004\uffea\012\uffea\013\uffea\016\uffea\017\uffea\025\uffea" +
    "\031\uffea\001\002\000\022\002\uffe8\004\uffe8\012\uffe8\013" +
    "\uffe8\016\uffe8\017\uffe8\025\uffe8\031\uffe8\001\002\000\024" +
    "\002\ufffc\004\ufffc\007\065\012\ufffc\013\ufffc\016\ufffc\017" +
    "\ufffc\025\ufffc\031\ufffc\001\002\000\022\002\uffe3\004\uffe3" +
    "\012\uffe3\013\uffe3\016\uffe3\017\uffe3\025\uffe3\031\uffe3\001" +
    "\002\000\022\002\ufff0\004\ufff0\012\ufff0\013\ufff0\016\ufff0" +
    "\017\ufff0\025\ufff0\031\ufff0\001\002\000\036\005\022\006" +
    "\021\011\020\020\017\021\016\023\013\024\012\026\011" +
    "\030\025\032\024\034\005\035\004\036\015\037\006\001" +
    "\002\000\004\037\054\001\002\000\036\005\022\006\021" +
    "\011\020\020\017\021\016\023\013\024\012\026\011\030" +
    "\025\032\024\034\005\035\004\036\015\037\006\001\002" +
    "\000\012\002\ufffe\004\051\013\034\025\033\001\002\000" +
    "\022\002\uffe9\004\uffe9\012\uffe9\013\uffe9\016\uffe9\017\uffe9" +
    "\025\uffe9\031\uffe9\001\002\000\036\005\022\006\021\011" +
    "\020\020\017\021\016\023\013\024\012\026\011\030\025" +
    "\032\024\034\005\035\004\036\015\037\006\001\002\000" +
    "\022\002\ufffa\004\ufffa\012\ufffa\013\ufffa\016\ufffa\017\ufffa" +
    "\025\ufffa\031\ufffa\001\002\000\036\005\022\006\021\011" +
    "\020\020\017\021\016\023\013\024\012\026\011\030\025" +
    "\032\024\034\005\035\004\036\015\037\006\001\002\000" +
    "\022\002\ufff5\004\ufff5\012\ufff5\013\ufff5\016\ufff5\017\ufff5" +
    "\025\ufff5\031\ufff5\001\002\000\036\005\022\006\021\011" +
    "\020\020\017\021\016\023\013\024\012\026\011\030\025" +
    "\032\024\034\005\035\004\036\015\037\006\001\002\000" +
    "\004\002\000\001\002\000\022\002\ufffb\004\ufffb\012\ufffb" +
    "\013\ufffb\016\ufffb\017\ufffb\025\ufffb\031\ufffb\001\002\000" +
    "\036\005\022\006\021\011\020\020\017\021\016\023\013" +
    "\024\012\026\011\030\025\032\024\034\005\035\004\036" +
    "\015\037\006\001\002\000\024\002\uffe5\004\uffe5\010\031" +
    "\012\uffe5\013\uffe5\016\uffe5\017\uffe5\025\uffe5\031\uffe5\001" +
    "\002\000\004\002\030\001\002\000\004\002\001\001\002" +
    "\000\036\005\022\006\021\011\020\020\017\021\016\023" +
    "\013\024\012\026\011\030\025\032\024\034\005\035\004" +
    "\036\015\037\006\001\002\000\022\002\uffe4\004\uffe4\012" +
    "\uffe4\013\034\016\uffe4\017\uffe4\025\033\031\uffe4\001\002" +
    "\000\036\005\022\006\021\011\020\020\017\021\016\023" +
    "\013\024\012\026\011\030\025\032\024\034\005\035\004" +
    "\036\015\037\006\001\002\000\036\005\022\006\021\011" +
    "\020\020\017\021\016\023\013\024\012\026\011\030\025" +
    "\032\024\034\005\035\004\036\015\037\006\001\002\000" +
    "\022\002\ufff7\004\ufff7\012\ufff7\013\034\016\ufff7\017\ufff7" +
    "\025\033\031\ufff7\001\002\000\022\002\ufff6\004\ufff6\012" +
    "\ufff6\013\034\016\ufff6\017\ufff6\025\033\031\ufff6\001\002" +
    "\000\022\002\ufff4\004\ufff4\012\ufff4\013\034\016\ufff4\017" +
    "\ufff4\025\033\031\ufff4\001\002\000\022\002\ufff8\004\ufff8" +
    "\012\ufff8\013\034\016\ufff8\017\ufff8\025\033\031\ufff8\001" +
    "\002\000\010\012\042\013\034\025\033\001\002\000\022" +
    "\002\ufff1\004\ufff1\012\ufff1\013\ufff1\016\ufff1\017\ufff1\025" +
    "\ufff1\031\ufff1\001\002\000\010\013\034\025\033\031\044" +
    "\001\002\000\036\005\022\006\021\011\020\020\017\021" +
    "\016\023\013\024\012\026\011\030\025\032\024\034\005" +
    "\035\004\036\015\037\006\001\002\000\010\013\034\016" +
    "\046\025\033\001\002\000\036\005\022\006\021\011\020" +
    "\020\017\021\016\023\013\024\012\026\011\030\025\032" +
    "\024\034\005\035\004\036\015\037\006\001\002\000\010" +
    "\013\034\017\050\025\033\001\002\000\022\002\ufff9\004" +
    "\ufff9\012\ufff9\013\ufff9\016\ufff9\017\ufff9\025\ufff9\031\ufff9" +
    "\001\002\000\040\002\uffff\005\022\006\021\011\020\020" +
    "\017\021\016\023\013\024\012\026\011\030\025\032\024" +
    "\034\005\035\004\036\015\037\006\001\002\000\004\002" +
    "\ufffd\001\002\000\022\002\ufff2\004\ufff2\012\ufff2\013\034" +
    "\016\ufff2\017\ufff2\025\033\031\ufff2\001\002\000\004\007" +
    "\055\001\002\000\014\014\062\015\060\022\061\027\057" +
    "\033\063\001\002\000\024\002\uffe6\004\uffe6\010\uffe6\012" +
    "\uffe6\013\uffe6\016\uffe6\017\uffe6\025\uffe6\031\uffe6\001\002" +
    "\000\024\002\uffef\004\uffef\010\uffef\012\uffef\013\uffef\016" +
    "\uffef\017\uffef\025\uffef\031\uffef\001\002\000\024\002\uffeb" +
    "\004\uffeb\010\uffeb\012\uffeb\013\uffeb\016\uffeb\017\uffeb\025" +
    "\uffeb\031\uffeb\001\002\000\024\002\uffec\004\uffec\010\uffec" +
    "\012\uffec\013\uffec\016\uffec\017\uffec\025\uffec\031\uffec\001" +
    "\002\000\024\002\uffee\004\uffee\010\uffee\012\uffee\013\uffee" +
    "\016\uffee\017\uffee\025\uffee\031\uffee\001\002\000\024\002" +
    "\uffed\004\uffed\010\uffed\012\uffed\013\uffed\016\uffed\017\uffed" +
    "\025\uffed\031\uffed\001\002\000\022\002\ufff3\004\ufff3\012" +
    "\ufff3\013\034\016\ufff3\017\ufff3\025\033\031\ufff3\001\002" +
    "\000\014\014\062\015\060\022\061\027\057\033\063\001" +
    "\002\000\024\002\uffe7\004\uffe7\010\uffe7\012\uffe7\013\uffe7" +
    "\016\uffe7\017\uffe7\025\uffe7\031\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\064\000\016\002\026\003\022\004\013\006\006\007" +
    "\025\010\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\063\006\006\007\025\010\007\001\001\000\002" +
    "\001\001\000\012\004\052\006\006\007\025\010\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\042" +
    "\006\006\007\025\010\007\001\001\000\002\001\001\000" +
    "\012\004\040\006\006\007\025\010\007\001\001\000\002" +
    "\001\001\000\012\004\037\006\006\007\025\010\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\036" +
    "\006\006\007\025\010\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\031\006\006" +
    "\007\025\010\007\001\001\000\002\001\001\000\012\004" +
    "\035\006\006\007\025\010\007\001\001\000\012\004\034" +
    "\006\006\007\025\010\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\044\006\006\007\025\010\007\001\001\000\002\001\001" +
    "\000\012\004\046\006\006\007\025\010\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\051\004\013" +
    "\006\006\007\025\010\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\065\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public Sample.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (Sample.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		Sample.Absyn.Program start_val = (Sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListExpr 
            {
              Sample.Absyn.Program RESULT =null;
		Sample.Absyn.ListExpr p_1 = (Sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.ProgramExprs(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListExpr ::= 
            {
              Sample.Absyn.ListExpr RESULT =null;
		 RESULT = new Sample.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListExpr ::= Expr 
            {
              Sample.Absyn.ListExpr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListExpr ::= Expr _SYMB_0 ListExpr 
            {
              Sample.Absyn.ListExpr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.ListExpr p_3 = (Sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Expr ::= _IDENT_ 
            {
              Sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Var(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Expr ::= _SYMB_22 
            {
              Sample.Absyn.Expr RESULT =null;
		 RESULT = new Sample.Absyn.ConstTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Expr ::= _SYMB_12 
            {
              Sample.Absyn.Expr RESULT =null;
		 RESULT = new Sample.Absyn.ConstFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expr ::= _SYMB_13 Expr _SYMB_21 Expr _SYMB_10 Expr _SYMB_11 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Sample.Absyn.Expr p_4 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Sample.Absyn.Expr p_6 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Sample.Absyn.If(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expr ::= _SYMB_1 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Not(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expr ::= Expr _SYMB_7 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Expr p_3 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.And(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expr ::= Expr _SYMB_17 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Expr p_3 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Or(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expr ::= _SYMB_2 
            {
              Sample.Absyn.Expr RESULT =null;
		 RESULT = new Sample.Absyn.ConstZero(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expr ::= _SYMB_20 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Succ(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expr ::= _SYMB_18 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Pred(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expr ::= _SYMB_15 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.IsZero(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expr ::= _SYMB_5 Expr _SYMB_6 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expr ::= Expr1 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= _SYMB_19 
            {
              Sample.Absyn.Type RESULT =null;
		 RESULT = new Sample.Absyn.StringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= _SYMB_8 
            {
              Sample.Absyn.Type RESULT =null;
		 RESULT = new Sample.Absyn.BoolType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= _SYMB_23 
            {
              Sample.Absyn.Type RESULT =null;
		 RESULT = new Sample.Absyn.UnitType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Type ::= _SYMB_14 
            {
              Sample.Absyn.Type RESULT =null;
		 RESULT = new Sample.Absyn.IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Type ::= _SYMB_9 
            {
              Sample.Absyn.Type RESULT =null;
		 RESULT = new Sample.Absyn.DoubleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expr2 ::= _INTEGER_ 
            {
              Sample.Absyn.Expr RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.EInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expr2 ::= _DOUBLE_ 
            {
              Sample.Absyn.Expr RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.EDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expr2 ::= _STRING_ 
            {
              Sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.EStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Dec ::= _IDENT_ _SYMB_3 Type 
            {
              Sample.Absyn.Dec RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Type p_3 = (Sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Declaration(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Dec ::= _SYMB_16 _IDENT_ _SYMB_3 Type 
            {
              Sample.Absyn.Dec RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Type p_4 = (Sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.LocalVarDeclaration(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expr1 ::= Dec 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Dec p_1 = (Sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.OnlyDecl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expr1 ::= Dec _SYMB_4 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Dec p_1 = (Sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Expr p_3 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.InitDecl(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expr1 ::= Expr2 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",6, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
