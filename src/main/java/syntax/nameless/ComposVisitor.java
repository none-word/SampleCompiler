// File generated by the BNF Converter (bnfc 2.9.4).

package syntax.nameless;

import syntax.nameless.Absyn.*;
import syntax.nameless.Absyn.Expr.Visitor;

/** Composition Visitor
*/

public class ComposVisitor<A> implements
        Visitor<Expr,A>
{
    /* Expr */
    public Expr visit(ConstTrue p, A arg)
    {
      return new ConstTrue();
    }
    public Expr visit(ConstFalse p, A arg)
    {
      return new ConstFalse();
    }
    public Expr visit(If p, A arg)
    {
      Expr expr_1 = p.expr_1.accept(this, arg);
      Expr expr_2 = p.expr_2.accept(this, arg);
      Expr expr_3 = p.expr_3.accept(this, arg);
      return new If(expr_1, expr_2, expr_3);
    }
    public Expr visit(ConstZero p, A arg)
    {
      return new ConstZero();
    }
    public Expr visit(Succ p, A arg)
    {
      Expr expr_ = p.expr_.accept(this, arg);
      return new Succ(expr_);
    }
    public Expr visit(Pred p, A arg)
    {
      Expr expr_ = p.expr_.accept(this, arg);
      return new Pred(expr_);
    }
    public Expr visit(IsZero p, A arg)
    {
      Expr expr_ = p.expr_.accept(this, arg);
      return new IsZero(expr_);
    }
    public Expr visit(FreeVar p, A arg)
    {
      String ident_ = p.ident_;
      return new FreeVar(ident_);
    }
    public Expr visit(BoundVar p, A arg)
    {
      Integer integer_ = p.integer_;
      return new BoundVar(integer_);
    }
    public Expr visit(Abstraction p, A arg)
    {
      Expr expr_ = p.expr_.accept(this, arg);
      return new Abstraction(expr_);
    }
    public Expr visit(Application p, A arg)
    {
      Expr expr_1 = p.expr_1.accept(this, arg);
      Expr expr_2 = p.expr_2.accept(this, arg);
      return new Application(expr_1, expr_2);
    }
}
