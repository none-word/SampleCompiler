// File generated by the BNF Converter (bnfc 2.9.4).

package syntax.nameless;

import syntax.nameless.Absyn.*;

/** Fold Visitor */
public abstract class FoldVisitor<R,A> implements AllVisitor<R,A> {
    public abstract R leaf(A arg);
    public abstract R combine(R x, R y, A arg);

/* Expr */
    public R visit(ConstTrue p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(ConstFalse p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(If p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      r = combine(p.expr_3.accept(this, arg), r, arg);
      return r;
    }
    public R visit(ConstZero p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(Succ p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(Pred p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(IsZero p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(FreeVar p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(BoundVar p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(Abstraction p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(Application p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      return r;
    }


}
