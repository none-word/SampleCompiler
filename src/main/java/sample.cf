comment "--" ;
comment "[[" "]]" ;

ProgramExprs.  Program ::= [Expr] ;

separator Expr ";" ;

Var.        Expr  ::= Ident ;
ConstTrue.  Expr  ::= "true" ;
ConstFalse. Expr  ::= "false" ;
If.         Expr  ::= "if" Expr "then" Program "else" Program "end" ;
Vars.       ComaExprs  ::= [Expr] ;
separator Expr ",";

FuncCall.         Expr  ::= Ident "(" ComaExprs ")" ;
FuncArgs.         FArgs ::= [Dec] ;
separator Dec ",";
Func.             Expr ::= "function" Ident "(" FArgs ")" ":" Type Program "end";
Return.           Expr ::= "return" Expr;

StringType.       Type ::= "string" ;
BoolType.         Type ::= "boolean" ;
IntType.          Type ::= "integer" ;
DoubleType.       Type ::= "double" ;
TableType.        Type ::= "table" ;
NilType.          Type ::= "nil" ;
VoidType.         Type ::= "void" ;

TypeKeyword.      TypeKW ::= "type" ;
TypeAliasing.     Expr3 ::= Ident ":" TypeKW "=" Type;

VarKeyword.          VarKW ::= "var";
TypeAnnotation.      TAnnot ::= ":" VarKW;
VarTypeAnnotation.   Expr3 ::= Ident TAnnot "=" Expr;
FuncTypeAnnotation.  Expr3 ::= "function" Ident "(" FArgs ")" TAnnot Program "end";

TypeAscription.      TAscript ::= TAnnot "(" Type ")";
VarTypeAscription.   Expr4 ::= Ident TAscript "=" Expr;
FuncTypeAscription.  Expr4 ::= "function" Ident "(" FArgs ")" TAscript Program "end";

EInt.	          Expr1	::=	Integer	;
EDouble.	      Expr1	::=	Double	;
EStr.	          Expr1	::=	String	;

Not.                 Expr  ::= "!" Expr ;
And.                 Expr  ::= Expr "and" Expr ;
Or.                  Expr  ::= Expr "or" Expr ;

ConstZero.  Expr  ::= "0" ;
Succ.       Expr  ::= "succ" Expr ;
Pred.       Expr  ::= "pred" Expr ;
IsZero.     Expr  ::= "iszero" Expr ;

Declaration.         Dec ::= Ident ":" Type ;

OnlyDecl.           Expr2 ::= Dec ;
InitDecl.           Expr2 ::= Dec "=" Expr ;
InitTableDecl.      Expr2 ::= Dec "=" "(" Dec "," Dec ")" ;

_. Expr ::= "(" Expr ")" ;
_. Expr ::= Expr1 ;
_. Expr1 ::= Expr2 ;
_. Expr2 ::= Expr3 ;
_. Expr3 ::= Expr4 ;

