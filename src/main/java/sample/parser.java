
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sample;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\003\000\002\003\005\000\002\003\002" +
    "\000\002\003\003\000\002\003\005\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\011\000\002" +
    "\004\006\000\002\004\013\000\002\004\004\000\002\004" +
    "\004\000\002\004\005\000\002\004\005\000\002\004\003" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\005\000\002\004\003\000\002\005\003\000\002" +
    "\006\003\000\002\007\002\000\002\007\003\000\002\007" +
    "\005\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\011\003\000\002\012\007\000\002" +
    "\012\006\000\002\012\012\000\002\012\003\000\002\013" +
    "\003\000\002\014\004\000\002\015\006\000\002\016\006" +
    "\000\002\016\012\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\020\005\000\002" +
    "\021\003\000\002\021\005\000\002\021\011\000\002\021" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\042\002\uffff\006\023\012\022\013\021\021" +
    "\020\022\017\023\014\025\013\030\030\031\027\033\026" +
    "\036\024\042\005\043\004\044\016\045\007\001\002\000" +
    "\024\002\uffd3\004\uffd3\005\uffd3\007\uffd3\014\uffd3\017\uffd3" +
    "\020\uffd3\027\uffd3\035\uffd3\001\002\000\024\002\uffd1\004" +
    "\uffd1\005\uffd1\007\uffd1\014\uffd1\017\uffd1\020\uffd1\027\uffd1" +
    "\035\uffd1\001\002\000\024\002\uffd9\004\uffd9\005\uffd9\007" +
    "\uffd9\014\uffd9\017\uffd9\020\uffd9\027\uffd9\035\uffd9\001\002" +
    "\000\030\002\ufff9\004\ufff9\005\ufff9\006\133\007\ufff9\010" +
    "\132\014\ufff9\017\ufff9\020\ufff9\027\ufff9\035\ufff9\001\002" +
    "\000\024\002\uffcb\004\uffcb\005\uffcb\007\uffcb\014\uffcb\017" +
    "\uffcb\020\uffcb\027\uffcb\035\uffcb\001\002\000\024\002\uffd0" +
    "\004\uffd0\005\uffd0\007\uffd0\014\uffd0\017\uffd0\020\uffd0\027" +
    "\uffd0\035\uffd0\001\002\000\024\002\uffea\004\uffea\005\uffea" +
    "\007\uffea\014\uffea\017\uffea\020\uffea\027\uffea\035\uffea\001" +
    "\002\000\040\006\023\012\022\013\021\021\020\022\017" +
    "\023\014\025\013\030\030\031\027\033\026\036\024\042" +
    "\005\043\004\044\016\045\007\001\002\000\040\006\023" +
    "\012\022\013\021\021\020\022\017\023\014\025\013\030" +
    "\030\031\027\033\026\036\024\042\005\043\004\044\016" +
    "\045\007\001\002\000\022\002\ufffe\004\117\005\116\007" +
    "\ufffe\014\060\017\ufffe\020\ufffe\027\057\001\002\000\024" +
    "\002\uffd2\004\uffd2\005\uffd2\007\uffd2\014\uffd2\017\uffd2\020" +
    "\uffd2\027\uffd2\035\uffd2\001\002\000\004\045\067\001\002" +
    "\000\024\002\ufff7\004\ufff7\005\ufff7\007\ufff7\014\ufff7\017" +
    "\ufff7\020\ufff7\027\ufff7\035\ufff7\001\002\000\024\002\uffef" +
    "\004\uffef\005\uffef\007\uffef\014\uffef\017\uffef\020\uffef\027" +
    "\uffef\035\uffef\001\002\000\040\006\023\012\022\013\021" +
    "\021\020\022\017\023\014\025\013\030\030\031\027\033" +
    "\026\036\024\042\005\043\004\044\016\045\007\001\002" +
    "\000\040\006\023\012\022\013\021\021\020\022\017\023" +
    "\014\025\013\030\030\031\027\033\026\036\024\042\005" +
    "\043\004\044\016\045\007\001\002\000\024\002\ufff8\004" +
    "\ufff8\005\ufff8\007\ufff8\014\ufff8\017\ufff8\020\ufff8\027\ufff8" +
    "\035\ufff8\001\002\000\010\002\000\017\000\020\000\001" +
    "\002\000\040\006\023\012\022\013\021\021\020\022\017" +
    "\023\014\025\013\030\030\031\027\033\026\036\024\042" +
    "\005\043\004\044\016\045\007\001\002\000\040\006\023" +
    "\012\022\013\021\021\020\022\017\023\014\025\013\030" +
    "\030\031\027\033\026\036\024\042\005\043\004\044\016" +
    "\045\007\001\002\000\040\006\023\012\022\013\021\021" +
    "\020\022\017\023\014\025\013\030\030\031\027\033\026" +
    "\036\024\042\005\043\004\044\016\045\007\001\002\000" +
    "\026\002\uffce\004\uffce\005\uffce\007\uffce\011\034\014\uffce" +
    "\017\uffce\020\uffce\027\uffce\035\uffce\001\002\000\004\002" +
    "\033\001\002\000\004\002\001\001\002\000\040\006\036" +
    "\012\022\013\021\021\020\022\017\023\014\025\013\030" +
    "\030\031\027\033\026\036\024\042\005\043\004\044\016" +
    "\045\007\001\002\000\024\002\uffcd\004\uffcd\005\uffcd\007" +
    "\uffcd\014\060\017\uffcd\020\uffcd\027\057\035\uffcd\001\002" +
    "\000\040\006\023\012\022\013\021\021\020\022\017\023" +
    "\014\025\013\030\030\031\027\033\026\036\024\042\005" +
    "\043\004\044\016\045\007\001\002\000\010\007\056\014" +
    "\060\027\057\001\002\000\014\005\041\007\uffce\011\034" +
    "\014\uffce\027\uffce\001\002\000\004\045\042\001\002\000" +
    "\004\010\045\001\002\000\004\007\044\001\002\000\024" +
    "\002\uffcc\004\uffcc\005\uffcc\007\uffcc\014\uffcc\017\uffcc\020" +
    "\uffcc\027\uffcc\035\uffcc\001\002\000\020\015\054\016\047" +
    "\024\053\026\051\032\046\034\055\041\052\001\002\000" +
    "\064\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\011\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\017\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\025\uffe4\027\uffe4\030\uffe4\031\uffe4\033\uffe4" +
    "\035\uffe4\036\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\001" +
    "\002\000\064\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\014\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\023\uffe1\025\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\033\uffe1\035\uffe1\036\uffe1\042\uffe1\043\uffe1\044\uffe1\045" +
    "\uffe1\001\002\000\026\002\uffcf\004\uffcf\005\uffcf\007\uffcf" +
    "\011\uffcf\014\uffcf\017\uffcf\020\uffcf\027\uffcf\035\uffcf\001" +
    "\002\000\064\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\014\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\025\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\033\uffdf\035\uffdf\036\uffdf\042\uffdf\043\uffdf\044\uffdf\045" +
    "\uffdf\001\002\000\064\002\uffde\004\uffde\005\uffde\006\uffde" +
    "\007\uffde\011\uffde\012\uffde\013\uffde\014\uffde\017\uffde\020" +
    "\uffde\021\uffde\022\uffde\023\uffde\025\uffde\027\uffde\030\uffde" +
    "\031\uffde\033\uffde\035\uffde\036\uffde\042\uffde\043\uffde\044" +
    "\uffde\045\uffde\001\002\000\064\002\uffe2\004\uffe2\005\uffe2" +
    "\006\uffe2\007\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\025\uffe2\027\uffe2" +
    "\030\uffe2\031\uffe2\033\uffe2\035\uffe2\036\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\045\uffe2\001\002\000\064\002\uffe3\004\uffe3" +
    "\005\uffe3\006\uffe3\007\uffe3\011\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\025\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\033\uffe3\035\uffe3\036\uffe3\042" +
    "\uffe3\043\uffe3\044\uffe3\045\uffe3\001\002\000\064\002\uffe0" +
    "\004\uffe0\005\uffe0\006\uffe0\007\uffe0\011\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0" +
    "\025\uffe0\027\uffe0\030\uffe0\031\uffe0\033\uffe0\035\uffe0\036" +
    "\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\001\002\000\024" +
    "\002\uffeb\004\uffeb\005\uffeb\007\uffeb\014\uffeb\017\uffeb\020" +
    "\uffeb\027\uffeb\035\uffeb\001\002\000\040\006\023\012\022" +
    "\013\021\021\020\022\017\023\014\025\013\030\030\031" +
    "\027\033\026\036\024\042\005\043\004\044\016\045\007" +
    "\001\002\000\040\006\023\012\022\013\021\021\020\022" +
    "\017\023\014\025\013\030\030\031\027\033\026\036\024" +
    "\042\005\043\004\044\016\045\007\001\002\000\024\002" +
    "\ufff1\004\ufff1\005\ufff1\007\ufff1\014\060\017\ufff1\020\ufff1" +
    "\027\057\035\ufff1\001\002\000\024\002\ufff0\004\ufff0\005" +
    "\ufff0\007\ufff0\014\060\017\ufff0\020\ufff0\027\057\035\ufff0" +
    "\001\002\000\024\002\uffed\004\uffed\005\uffed\007\uffed\014" +
    "\060\017\uffed\020\uffed\027\057\035\uffed\001\002\000\024" +
    "\002\ufff3\004\ufff3\005\ufff3\007\ufff3\014\060\017\ufff3\020" +
    "\ufff3\027\057\035\ufff3\001\002\000\024\002\uffee\004\uffee" +
    "\005\uffee\007\uffee\014\060\017\uffee\020\uffee\027\057\035" +
    "\uffee\001\002\000\024\002\ufff2\004\ufff2\005\ufff2\007\ufff2" +
    "\014\060\017\ufff2\020\ufff2\027\057\035\ufff2\001\002\000" +
    "\004\006\070\001\002\000\006\007\uffe7\045\042\001\002" +
    "\000\004\007\076\001\002\000\006\005\074\007\uffe6\001" +
    "\002\000\004\007\uffe8\001\002\000\006\007\uffe7\045\042" +
    "\001\002\000\004\007\uffe5\001\002\000\004\010\077\001" +
    "\002\000\022\015\054\016\047\024\053\026\051\032\046" +
    "\034\055\040\113\041\052\001\002\000\042\006\023\012" +
    "\022\013\021\020\uffff\021\020\022\017\023\014\025\013" +
    "\030\030\031\027\033\026\036\024\042\005\043\004\044" +
    "\016\045\007\001\002\000\042\006\102\012\022\013\021" +
    "\020\uffff\021\020\022\017\023\014\025\013\030\030\031" +
    "\027\033\026\036\024\042\005\043\004\044\016\045\007" +
    "\001\002\000\056\006\023\012\022\013\021\015\054\016" +
    "\047\021\020\022\017\023\014\024\053\025\013\026\051" +
    "\030\030\031\027\032\046\033\026\034\055\036\024\041" +
    "\052\042\005\043\004\044\016\045\007\001\002\000\004" +
    "\020\104\001\002\000\024\002\uffda\004\uffda\005\uffda\007" +
    "\uffda\014\uffda\017\uffda\020\uffda\027\uffda\035\uffda\001\002" +
    "\000\004\007\106\001\002\000\044\006\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\025\uffd6" +
    "\030\uffd6\031\uffd6\033\uffd6\036\uffd6\042\uffd6\043\uffd6\044" +
    "\uffd6\045\uffd6\001\002\000\004\020\110\001\002\000\024" +
    "\002\uffd4\004\uffd4\005\uffd4\007\uffd4\014\uffd4\017\uffd4\020" +
    "\uffd4\027\uffd4\035\uffd4\001\002\000\042\006\023\012\022" +
    "\013\021\020\uffff\021\020\022\017\023\014\025\013\030" +
    "\030\031\027\033\026\036\024\042\005\043\004\044\016" +
    "\045\007\001\002\000\044\006\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\025\uffd7\030\uffd7" +
    "\031\uffd7\033\uffd7\036\uffd7\042\uffd7\043\uffd7\044\uffd7\045" +
    "\uffd7\001\002\000\044\006\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\023\uffd8\025\uffd8\030\uffd8\031" +
    "\uffd8\033\uffd8\036\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8" +
    "\001\002\000\004\020\115\001\002\000\024\002\ufff4\004" +
    "\ufff4\005\ufff4\007\ufff4\014\ufff4\017\ufff4\020\ufff4\027\ufff4" +
    "\035\ufff4\001\002\000\050\002\uffff\006\023\007\uffff\012" +
    "\022\013\021\017\uffff\020\uffff\021\020\022\017\023\014" +
    "\025\013\030\030\031\027\033\026\036\024\042\005\043" +
    "\004\044\016\045\007\001\002\000\050\002\uffff\006\023" +
    "\007\uffff\012\022\013\021\017\uffff\020\uffff\021\020\022" +
    "\017\023\014\025\013\030\030\031\027\033\026\036\024" +
    "\042\005\043\004\044\016\045\007\001\002\000\012\002" +
    "\ufffd\007\ufffd\017\ufffd\020\ufffd\001\002\000\012\002\ufffa" +
    "\007\ufffa\017\ufffa\020\ufffa\001\002\000\010\014\060\027" +
    "\057\035\123\001\002\000\042\006\023\012\022\013\021" +
    "\017\uffff\021\020\022\017\023\014\025\013\030\030\031" +
    "\027\033\026\036\024\042\005\043\004\044\016\045\007" +
    "\001\002\000\004\017\125\001\002\000\042\006\023\012" +
    "\022\013\021\020\uffff\021\020\022\017\023\014\025\013" +
    "\030\030\031\027\033\026\036\024\042\005\043\004\044" +
    "\016\045\007\001\002\000\004\020\127\001\002\000\024" +
    "\002\ufff6\004\ufff6\005\ufff6\007\ufff6\014\ufff6\017\ufff6\020" +
    "\ufff6\027\ufff6\035\ufff6\001\002\000\024\002\uffec\004\uffec" +
    "\005\uffec\007\uffec\014\060\017\uffec\020\uffec\027\057\035" +
    "\uffec\001\002\000\004\011\147\001\002\000\024\015\054" +
    "\016\047\024\053\026\051\032\046\034\055\037\144\040" +
    "\113\041\052\001\002\000\042\006\023\007\uffff\012\022" +
    "\013\021\021\020\022\017\023\014\025\013\030\030\031" +
    "\027\033\026\036\024\042\005\043\004\044\016\045\007" +
    "\001\002\000\006\006\135\011\136\001\002\000\020\015" +
    "\054\016\047\024\053\026\051\032\046\034\055\041\052" +
    "\001\002\000\040\006\023\012\022\013\021\021\020\022" +
    "\017\023\014\025\013\030\030\031\027\033\026\036\024" +
    "\042\005\043\004\044\016\045\007\001\002\000\024\002" +
    "\uffdb\004\uffdb\005\uffdb\007\uffdb\014\060\017\uffdb\020\uffdb" +
    "\027\057\035\uffdb\001\002\000\004\007\142\001\002\000" +
    "\004\007\uffe9\001\002\000\024\002\ufff5\004\ufff5\005\ufff5" +
    "\007\ufff5\014\ufff5\017\ufff5\020\ufff5\027\ufff5\035\ufff5\001" +
    "\002\000\004\011\145\001\002\000\004\011\uffdd\001\002" +
    "\000\020\015\054\016\047\024\053\026\051\032\046\034" +
    "\055\041\052\001\002\000\024\002\uffdc\004\uffdc\005\uffdc" +
    "\007\uffdc\014\uffdc\017\uffdc\020\uffdc\027\uffdc\035\uffdc\001" +
    "\002\000\040\006\023\012\022\013\021\021\020\022\017" +
    "\023\014\025\013\030\030\031\027\033\026\036\024\042" +
    "\005\043\004\044\016\045\007\001\002\000\024\002\uffd5" +
    "\004\uffd5\005\uffd5\007\uffd5\014\060\017\uffd5\020\uffd5\027" +
    "\057\035\uffd5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\022\002\031\003\024\004\014\012\007\016" +
    "\005\017\011\020\030\021\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\133\015" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\127\012\007\016\005\017\011\020" +
    "\030\021\010\001\001\000\016\004\121\012\007\016\005" +
    "\017\011\020\030\021\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\065\012\007\016\005\017\011\020" +
    "\030\021\010\001\001\000\016\004\036\012\007\016\005" +
    "\017\011\020\030\021\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\064\012\007\016\005\017\011" +
    "\020\030\021\010\001\001\000\016\004\063\012\007\016" +
    "\005\017\011\020\030\021\010\001\001\000\016\004\062" +
    "\012\007\016\005\017\011\020\030\021\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\034\012\007\016\005\017\011\020\030\021\010\001" +
    "\001\000\002\001\001\000\016\004\036\012\007\016\005" +
    "\017\011\020\037\021\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\061\012\007\016\005\017\011\020\030\021\010\001" +
    "\001\000\016\004\060\012\007\016\005\017\011\020\030" +
    "\021\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\070\007\072\020" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\074\020\071\001\001\000\002\001" +
    "\001\000\006\014\100\015\077\001\001\000\006\010\110" +
    "\013\111\001\001\000\022\002\106\003\024\004\014\012" +
    "\007\016\005\017\011\020\030\021\010\001\001\000\022" +
    "\002\102\003\024\004\014\012\007\016\005\017\011\020" +
    "\030\021\010\001\001\000\020\004\036\010\104\012\007" +
    "\016\005\017\011\020\030\021\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\002\113\003" +
    "\024\004\014\012\007\016\005\017\011\020\030\021\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\120\004\014\012\007" +
    "\016\005\017\011\020\030\021\010\001\001\000\020\003" +
    "\117\004\014\012\007\016\005\017\011\020\030\021\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\002\123\003\024\004\014\012\007\016\005" +
    "\017\011\020\030\021\010\001\001\000\002\001\001\000" +
    "\022\002\125\003\024\004\014\012\007\016\005\017\011" +
    "\020\030\021\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\047" +
    "\011\142\013\111\001\001\000\022\003\140\004\014\005" +
    "\137\012\007\016\005\017\011\020\030\021\010\001\001" +
    "\000\002\001\001\000\004\010\104\001\001\000\016\004" +
    "\136\012\007\016\005\017\011\020\030\021\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\145\001\001\000\002\001\001\000\016\004\147\012" +
    "\007\016\005\017\011\020\030\021\010\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public sample.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (sample.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		sample.Absyn.Program start_val = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListExpr 
            {
              sample.Absyn.Program RESULT =null;
		sample.Absyn.ListExpr p_1 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ProgramExprs(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListExpr ::= 
            {
              sample.Absyn.ListExpr RESULT =null;
		 RESULT = new sample.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListExpr ::= Expr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListExpr ::= Expr _SYMB_0 ListExpr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.ListExpr p_3 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListExpr ::= 
            {
              sample.Absyn.ListExpr RESULT =null;
		 RESULT = new sample.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListExpr ::= Expr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListExpr ::= Expr _SYMB_1 ListExpr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.ListExpr p_3 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expr ::= _IDENT_ 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Var(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expr ::= _SYMB_26 
            {
              sample.Absyn.Expr RESULT =null;
		 RESULT = new sample.Absyn.ConstTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expr ::= _SYMB_13 
            {
              sample.Absyn.Expr RESULT =null;
		 RESULT = new sample.Absyn.ConstFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expr ::= _SYMB_15 Expr _SYMB_25 Program _SYMB_11 Program _SYMB_12 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		sample.Absyn.Program p_4 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Program p_6 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.If(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expr ::= _IDENT_ _SYMB_2 ComaExprs _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.ComaExprs p_3 = (sample.Absyn.ComaExprs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.FuncCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expr ::= _SYMB_14 _IDENT_ _SYMB_2 FArgs _SYMB_3 _SYMB_4 Type Program _SYMB_12 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		sample.Absyn.FArgs p_4 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		sample.Absyn.Type p_7 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Program p_8 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.Func(p_2,p_4,p_7,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expr ::= _SYMB_21 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Return(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expr ::= _SYMB_6 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Not(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expr ::= Expr _SYMB_8 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.And(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expr ::= Expr _SYMB_19 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Or(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expr ::= _SYMB_7 
            {
              sample.Absyn.Expr RESULT =null;
		 RESULT = new sample.Absyn.ConstZero(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expr ::= _SYMB_23 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Succ(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expr ::= _SYMB_20 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Pred(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expr ::= _SYMB_17 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.IsZero(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expr ::= _SYMB_2 Expr _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expr ::= Expr1 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ComaExprs ::= ListExpr 
            {
              sample.Absyn.ComaExprs RESULT =null;
		sample.Absyn.ListExpr p_1 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Vars(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComaExprs",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FArgs ::= ListDec 
            {
              sample.Absyn.FArgs RESULT =null;
		sample.Absyn.ListDec p_1 = (sample.Absyn.ListDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.FuncArgs(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FArgs",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ListDec ::= 
            {
              sample.Absyn.ListDec RESULT =null;
		 RESULT = new sample.Absyn.ListDec(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListDec ::= Dec 
            {
              sample.Absyn.ListDec RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ListDec(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListDec ::= Dec _SYMB_1 ListDec 
            {
              sample.Absyn.ListDec RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.ListDec p_3 = (sample.Absyn.ListDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Type ::= _SYMB_22 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.StringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Type ::= _SYMB_9 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.BoolType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Type ::= _SYMB_16 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Type ::= _SYMB_10 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.DoubleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Type ::= _SYMB_24 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.TableType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Type ::= _SYMB_18 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.NilType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Type ::= _SYMB_29 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.VoidType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TypeKW ::= _SYMB_27 
            {
              sample.Absyn.TypeKW RESULT =null;
		 RESULT = new sample.Absyn.TypeKeyword(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeKW",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expr3 ::= _IDENT_ _SYMB_4 TypeKW _SYMB_5 Type 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		sample.Absyn.TypeKW p_3 = (sample.Absyn.TypeKW)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Type p_5 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TypeAliasing(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expr3 ::= _IDENT_ TAnnot _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.TAnnot p_2 = (sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_4 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.VarTypeAnnotation(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expr3 ::= _SYMB_14 _IDENT_ _SYMB_2 FArgs _SYMB_3 TAnnot Program _SYMB_12 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		sample.Absyn.FArgs p_4 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		sample.Absyn.TAnnot p_6 = (sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Program p_7 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.FuncTypeAnnotation(p_2,p_4,p_6,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr3 ::= Expr4 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VarKW ::= _SYMB_28 
            {
              sample.Absyn.VarKW RESULT =null;
		 RESULT = new sample.Absyn.VarKeyword(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarKW",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TAnnot ::= _SYMB_4 VarKW 
            {
              sample.Absyn.TAnnot RESULT =null;
		sample.Absyn.VarKW p_2 = (sample.Absyn.VarKW)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TypeAnnotation(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TAnnot",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TAscript ::= TAnnot _SYMB_2 Type _SYMB_3 
            {
              sample.Absyn.TAscript RESULT =null;
		sample.Absyn.TAnnot p_1 = (sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Type p_3 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.TypeAscription(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TAscript",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expr4 ::= _IDENT_ TAscript _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.TAscript p_2 = (sample.Absyn.TAscript)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_4 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.VarTypeAscription(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expr4 ::= _SYMB_14 _IDENT_ _SYMB_2 FArgs _SYMB_3 TAscript Program _SYMB_12 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		sample.Absyn.FArgs p_4 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		sample.Absyn.TAscript p_6 = (sample.Absyn.TAscript)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Program p_7 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.FuncTypeAscription(p_2,p_4,p_6,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr1 ::= _INTEGER_ 
            {
              sample.Absyn.Expr RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.EInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr1 ::= _DOUBLE_ 
            {
              sample.Absyn.Expr RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.EDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr1 ::= _STRING_ 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.EStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr1 ::= Expr2 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Dec ::= _IDENT_ _SYMB_4 Type 
            {
              sample.Absyn.Dec RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Type p_3 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Declaration(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr2 ::= Dec 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.OnlyDecl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr2 ::= Dec _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.InitDecl(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr2 ::= Dec _SYMB_5 _SYMB_2 Dec _SYMB_1 Dec _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		sample.Absyn.Dec p_4 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Dec p_6 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.InitTableDecl(p_1,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr2 ::= Expr3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",15, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
