
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Sample;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\003\000\002\003\005\000\002\003\002" +
    "\000\002\003\003\000\002\003\005\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\011\000\002" +
    "\004\006\000\002\004\013\000\002\004\004\000\002\004" +
    "\004\000\002\004\005\000\002\004\005\000\002\004\003" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\005\000\002\004\003\000\002\005\003\000\002" +
    "\006\003\000\002\007\002\000\002\007\003\000\002\007" +
    "\005\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\011\003\000\002" +
    "\012\007\000\002\012\010\000\002\012\006\000\002\012" +
    "\007\000\002\012\012\000\002\012\003\000\002\013\003" +
    "\000\002\014\004\000\002\015\006\000\002\016\006\000" +
    "\002\016\007\000\002\016\012\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\020" +
    "\005\000\002\020\006\000\002\021\003\000\002\021\005" +
    "\000\002\021\011\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\044\002\uffff\006\024\012\023\013\022\021" +
    "\021\022\020\023\015\025\014\026\013\031\031\032\030" +
    "\034\026\037\025\043\005\044\004\045\017\046\007\001" +
    "\002\000\024\002\uffcf\004\uffcf\005\uffcf\007\uffcf\014\uffcf" +
    "\017\uffcf\020\uffcf\030\uffcf\036\uffcf\001\002\000\024\002" +
    "\uffcd\004\uffcd\005\uffcd\007\uffcd\014\uffcd\017\uffcd\020\uffcd" +
    "\030\uffcd\036\uffcd\001\002\000\024\002\uffd6\004\uffd6\005" +
    "\uffd6\007\uffd6\014\uffd6\017\uffd6\020\uffd6\030\uffd6\036\uffd6" +
    "\001\002\000\030\002\ufff9\004\ufff9\005\ufff9\006\155\007" +
    "\ufff9\010\154\014\ufff9\017\ufff9\020\ufff9\030\ufff9\036\ufff9" +
    "\001\002\000\024\002\uffc6\004\uffc6\005\uffc6\007\uffc6\014" +
    "\uffc6\017\uffc6\020\uffc6\030\uffc6\036\uffc6\001\002\000\024" +
    "\002\uffcc\004\uffcc\005\uffcc\007\uffcc\014\uffcc\017\uffcc\020" +
    "\uffcc\030\uffcc\036\uffcc\001\002\000\024\002\uffea\004\uffea" +
    "\005\uffea\007\uffea\014\uffea\017\uffea\020\uffea\030\uffea\036" +
    "\uffea\001\002\000\004\046\136\001\002\000\042\006\024" +
    "\012\023\013\022\021\021\022\020\023\015\025\014\026" +
    "\013\031\031\032\030\034\026\037\025\043\005\044\004" +
    "\045\017\046\007\001\002\000\042\006\024\012\023\013" +
    "\022\021\021\022\020\023\015\025\014\026\013\031\031" +
    "\032\030\034\026\037\025\043\005\044\004\045\017\046" +
    "\007\001\002\000\022\002\ufffe\004\124\005\123\007\ufffe" +
    "\014\065\017\ufffe\020\ufffe\030\064\001\002\000\024\002" +
    "\uffce\004\uffce\005\uffce\007\uffce\014\uffce\017\uffce\020\uffce" +
    "\030\uffce\036\uffce\001\002\000\004\046\074\001\002\000" +
    "\024\002\ufff7\004\ufff7\005\ufff7\007\ufff7\014\ufff7\017\ufff7" +
    "\020\ufff7\030\ufff7\036\ufff7\001\002\000\024\002\uffef\004" +
    "\uffef\005\uffef\007\uffef\014\uffef\017\uffef\020\uffef\030\uffef" +
    "\036\uffef\001\002\000\042\006\024\012\023\013\022\021" +
    "\021\022\020\023\015\025\014\026\013\031\031\032\030" +
    "\034\026\037\025\043\005\044\004\045\017\046\007\001" +
    "\002\000\042\006\024\012\023\013\022\021\021\022\020" +
    "\023\015\025\014\026\013\031\031\032\030\034\026\037" +
    "\025\043\005\044\004\045\017\046\007\001\002\000\024" +
    "\002\ufff8\004\ufff8\005\ufff8\007\ufff8\014\ufff8\017\ufff8\020" +
    "\ufff8\030\ufff8\036\ufff8\001\002\000\042\006\024\012\023" +
    "\013\022\021\021\022\020\023\015\025\014\026\013\031" +
    "\031\032\030\034\026\037\025\043\005\044\004\045\017" +
    "\046\007\001\002\000\010\002\000\017\000\020\000\001" +
    "\002\000\042\006\024\012\023\013\022\021\021\022\020" +
    "\023\015\025\014\026\013\031\031\032\030\034\026\037" +
    "\025\043\005\044\004\045\017\046\007\001\002\000\042" +
    "\006\024\012\023\013\022\021\021\022\020\023\015\025" +
    "\014\026\013\031\031\032\030\034\026\037\025\043\005" +
    "\044\004\045\017\046\007\001\002\000\026\002\uffc9\004" +
    "\uffc9\005\uffc9\007\uffc9\011\035\014\uffc9\017\uffc9\020\uffc9" +
    "\030\uffc9\036\uffc9\001\002\000\004\002\034\001\002\000" +
    "\004\002\001\001\002\000\042\006\037\012\023\013\022" +
    "\021\021\022\020\023\015\025\014\026\013\031\031\032" +
    "\030\034\026\037\025\043\005\044\004\045\017\046\007" +
    "\001\002\000\024\002\uffc8\004\uffc8\005\uffc8\007\uffc8\014" +
    "\065\017\uffc8\020\uffc8\030\064\036\uffc8\001\002\000\042" +
    "\006\024\012\023\013\022\021\021\022\020\023\015\025" +
    "\014\026\013\031\031\032\030\034\026\037\025\043\005" +
    "\044\004\045\017\046\007\001\002\000\010\007\063\014" +
    "\065\030\064\001\002\000\014\005\042\007\uffc9\011\035" +
    "\014\uffc9\030\uffc9\001\002\000\006\026\043\046\044\001" +
    "\002\000\004\046\060\001\002\000\004\010\047\001\002" +
    "\000\004\007\046\001\002\000\024\002\uffc7\004\uffc7\005" +
    "\uffc7\007\uffc7\014\uffc7\017\uffc7\020\uffc7\030\uffc7\036\uffc7" +
    "\001\002\000\020\015\055\016\050\024\054\027\051\033" +
    "\057\035\056\042\053\001\002\000\066\002\uffe0\004\uffe0" +
    "\005\uffe0\006\uffe0\007\uffe0\011\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\025\uffe0" +
    "\026\uffe0\030\uffe0\031\uffe0\032\uffe0\034\uffe0\036\uffe0\037" +
    "\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\001\002\000\066" +
    "\002\uffde\004\uffde\005\uffde\006\uffde\007\uffde\011\uffde\012" +
    "\uffde\013\uffde\014\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\025\uffde\026\uffde\030\uffde\031\uffde\032\uffde\034" +
    "\uffde\036\uffde\037\uffde\043\uffde\044\uffde\045\uffde\046\uffde" +
    "\001\002\000\026\002\uffcb\004\uffcb\005\uffcb\007\uffcb\011" +
    "\uffcb\014\uffcb\017\uffcb\020\uffcb\030\uffcb\036\uffcb\001\002" +
    "\000\066\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\025\uffe2\026\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\034\uffe2\036\uffe2\037\uffe2\043\uffe2\044\uffe2\045\uffe2" +
    "\046\uffe2\001\002\000\066\002\uffe1\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\023\uffe1\025\uffe1\026\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\034\uffe1\036\uffe1\037\uffe1\043\uffe1" +
    "\044\uffe1\045\uffe1\046\uffe1\001\002\000\066\002\uffe3\004" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\011\uffe3\012\uffe3\013\uffe3" +
    "\014\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\025" +
    "\uffe3\026\uffe3\030\uffe3\031\uffe3\032\uffe3\034\uffe3\036\uffe3" +
    "\037\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\001\002\000" +
    "\066\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\011\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\017\uffdf\020\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\025\uffdf\026\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\034\uffdf\036\uffdf\037\uffdf\043\uffdf\044\uffdf\045\uffdf\046" +
    "\uffdf\001\002\000\066\002\uffe4\004\uffe4\005\uffe4\006\uffe4" +
    "\007\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\025\uffe4\026\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\034\uffe4\036\uffe4\037\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\001\002\000\004\010\061\001\002" +
    "\000\020\015\055\016\050\024\054\027\051\033\057\035" +
    "\056\042\053\001\002\000\026\002\uffca\004\uffca\005\uffca" +
    "\007\uffca\011\uffca\014\uffca\017\uffca\020\uffca\030\uffca\036" +
    "\uffca\001\002\000\024\002\uffeb\004\uffeb\005\uffeb\007\uffeb" +
    "\014\uffeb\017\uffeb\020\uffeb\030\uffeb\036\uffeb\001\002\000" +
    "\042\006\024\012\023\013\022\021\021\022\020\023\015" +
    "\025\014\026\013\031\031\032\030\034\026\037\025\043" +
    "\005\044\004\045\017\046\007\001\002\000\042\006\024" +
    "\012\023\013\022\021\021\022\020\023\015\025\014\026" +
    "\013\031\031\032\030\034\026\037\025\043\005\044\004" +
    "\045\017\046\007\001\002\000\024\002\ufff1\004\ufff1\005" +
    "\ufff1\007\ufff1\014\065\017\ufff1\020\ufff1\030\064\036\ufff1" +
    "\001\002\000\024\002\ufff0\004\ufff0\005\ufff0\007\ufff0\014" +
    "\065\017\ufff0\020\ufff0\030\064\036\ufff0\001\002\000\024" +
    "\002\uffed\004\uffed\005\uffed\007\uffed\014\065\017\uffed\020" +
    "\uffed\030\064\036\uffed\001\002\000\024\002\ufff3\004\ufff3" +
    "\005\ufff3\007\ufff3\014\065\017\ufff3\020\ufff3\030\064\036" +
    "\ufff3\001\002\000\024\002\uffee\004\uffee\005\uffee\007\uffee" +
    "\014\065\017\uffee\020\uffee\030\064\036\uffee\001\002\000" +
    "\024\002\ufff2\004\ufff2\005\ufff2\007\ufff2\014\065\017\ufff2" +
    "\020\ufff2\030\064\036\ufff2\001\002\000\004\006\075\001" +
    "\002\000\010\007\uffe7\026\043\046\044\001\002\000\004" +
    "\007\103\001\002\000\006\005\101\007\uffe6\001\002\000" +
    "\004\007\uffe8\001\002\000\010\007\uffe7\026\043\046\044" +
    "\001\002\000\004\007\uffe5\001\002\000\004\010\105\001" +
    "\002\000\044\006\024\012\023\013\022\020\uffff\021\021" +
    "\022\020\023\015\025\014\026\013\031\031\032\030\034" +
    "\026\037\025\043\005\044\004\045\017\046\007\001\002" +
    "\000\022\015\055\016\050\024\054\027\051\033\057\035" +
    "\056\041\115\042\053\001\002\000\044\006\107\012\023" +
    "\013\022\020\uffff\021\021\022\020\023\015\025\014\026" +
    "\013\031\031\032\030\034\026\037\025\043\005\044\004" +
    "\045\017\046\007\001\002\000\060\006\024\012\023\013" +
    "\022\015\055\016\050\021\021\022\020\023\015\024\054" +
    "\025\014\026\013\027\051\031\031\032\030\033\057\034" +
    "\026\035\056\037\025\042\053\043\005\044\004\045\017" +
    "\046\007\001\002\000\004\020\111\001\002\000\024\002" +
    "\uffd7\004\uffd7\005\uffd7\007\uffd7\014\uffd7\017\uffd7\020\uffd7" +
    "\030\uffd7\036\uffd7\001\002\000\004\007\113\001\002\000" +
    "\046\006\uffd3\011\uffd3\012\uffd3\013\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\025\uffd3\026\uffd3\031\uffd3\032\uffd3\034" +
    "\uffd3\037\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\001\002" +
    "\000\044\006\024\012\023\013\022\020\uffff\021\021\022" +
    "\020\023\015\025\014\026\013\031\031\032\030\034\026" +
    "\037\025\043\005\044\004\045\017\046\007\001\002\000" +
    "\046\006\uffd5\011\uffd5\012\uffd5\013\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\023\uffd5\025\uffd5\026\uffd5\031\uffd5\032\uffd5\034" +
    "\uffd5\037\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\001\002" +
    "\000\046\006\uffd4\011\uffd4\012\uffd4\013\uffd4\020\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\025\uffd4\026\uffd4\031\uffd4\032\uffd4" +
    "\034\uffd4\037\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\001" +
    "\002\000\004\020\120\001\002\000\024\002\ufff4\004\ufff4" +
    "\005\ufff4\007\ufff4\014\ufff4\017\ufff4\020\ufff4\030\ufff4\036" +
    "\ufff4\001\002\000\004\020\122\001\002\000\024\002\uffd0" +
    "\004\uffd0\005\uffd0\007\uffd0\014\uffd0\017\uffd0\020\uffd0\030" +
    "\uffd0\036\uffd0\001\002\000\052\002\uffff\006\024\007\uffff" +
    "\012\023\013\022\017\uffff\020\uffff\021\021\022\020\023" +
    "\015\025\014\026\013\031\031\032\030\034\026\037\025" +
    "\043\005\044\004\045\017\046\007\001\002\000\052\002" +
    "\uffff\006\024\007\uffff\012\023\013\022\017\uffff\020\uffff" +
    "\021\021\022\020\023\015\025\014\026\013\031\031\032" +
    "\030\034\026\037\025\043\005\044\004\045\017\046\007" +
    "\001\002\000\012\002\ufffd\007\ufffd\017\ufffd\020\ufffd\001" +
    "\002\000\012\002\ufffa\007\ufffa\017\ufffa\020\ufffa\001\002" +
    "\000\010\014\065\030\064\036\130\001\002\000\044\006" +
    "\024\012\023\013\022\017\uffff\021\021\022\020\023\015" +
    "\025\014\026\013\031\031\032\030\034\026\037\025\043" +
    "\005\044\004\045\017\046\007\001\002\000\004\017\132" +
    "\001\002\000\044\006\024\012\023\013\022\020\uffff\021" +
    "\021\022\020\023\015\025\014\026\013\031\031\032\030" +
    "\034\026\037\025\043\005\044\004\045\017\046\007\001" +
    "\002\000\004\020\134\001\002\000\024\002\ufff6\004\ufff6" +
    "\005\ufff6\007\ufff6\014\ufff6\017\ufff6\020\ufff6\030\ufff6\036" +
    "\ufff6\001\002\000\024\002\uffec\004\uffec\005\uffec\007\uffec" +
    "\014\065\017\uffec\020\uffec\030\064\036\uffec\001\002\000" +
    "\004\010\137\001\002\000\024\015\055\016\050\024\054" +
    "\027\051\033\057\035\056\040\147\041\115\042\053\001" +
    "\002\000\004\011\145\001\002\000\006\006\142\011\143" +
    "\001\002\000\020\015\055\016\050\024\054\027\051\033" +
    "\057\035\056\042\053\001\002\000\042\006\024\012\023" +
    "\013\022\021\021\022\020\023\015\025\014\026\013\031" +
    "\031\032\030\034\026\037\025\043\005\044\004\045\017" +
    "\046\007\001\002\000\024\002\uffd8\004\uffd8\005\uffd8\007" +
    "\uffd8\014\065\017\uffd8\020\uffd8\030\064\036\uffd8\001\002" +
    "\000\042\006\024\012\023\013\022\021\021\022\020\023" +
    "\015\025\014\026\013\031\031\032\030\034\026\037\025" +
    "\043\005\044\004\045\017\046\007\001\002\000\024\002" +
    "\uffd1\004\uffd1\005\uffd1\007\uffd1\014\065\017\uffd1\020\uffd1" +
    "\030\064\036\uffd1\001\002\000\004\011\uffdc\001\002\000" +
    "\004\011\151\001\002\000\020\015\055\016\050\024\054" +
    "\027\051\033\057\035\056\042\053\001\002\000\024\002" +
    "\uffda\004\uffda\005\uffda\007\uffda\014\uffda\017\uffda\020\uffda" +
    "\030\uffda\036\uffda\001\002\000\004\011\167\001\002\000" +
    "\024\015\055\016\050\024\054\027\051\033\057\035\056" +
    "\040\147\041\115\042\053\001\002\000\044\006\024\007" +
    "\uffff\012\023\013\022\021\021\022\020\023\015\025\014" +
    "\026\013\031\031\032\030\034\026\037\025\043\005\044" +
    "\004\045\017\046\007\001\002\000\006\006\142\011\157" +
    "\001\002\000\042\006\024\012\023\013\022\021\021\022" +
    "\020\023\015\025\014\026\013\031\031\032\030\034\026" +
    "\037\025\043\005\044\004\045\017\046\007\001\002\000" +
    "\024\002\uffd9\004\uffd9\005\uffd9\007\uffd9\014\065\017\uffd9" +
    "\020\uffd9\030\064\036\uffd9\001\002\000\004\007\163\001" +
    "\002\000\004\007\uffe9\001\002\000\024\002\ufff5\004\ufff5" +
    "\005\ufff5\007\ufff5\014\ufff5\017\ufff5\020\ufff5\030\ufff5\036" +
    "\ufff5\001\002\000\004\011\165\001\002\000\020\015\055" +
    "\016\050\024\054\027\051\033\057\035\056\042\053\001" +
    "\002\000\024\002\uffdb\004\uffdb\005\uffdb\007\uffdb\014\uffdb" +
    "\017\uffdb\020\uffdb\030\uffdb\036\uffdb\001\002\000\042\006" +
    "\024\012\023\013\022\021\021\022\020\023\015\025\014" +
    "\026\013\031\031\032\030\034\026\037\025\043\005\044" +
    "\004\045\017\046\007\001\002\000\024\002\uffd2\004\uffd2" +
    "\005\uffd2\007\uffd2\014\065\017\uffd2\020\uffd2\030\064\036" +
    "\uffd2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\022\002\032\003\026\004\015\012\007\016" +
    "\005\017\011\020\031\021\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\155\015" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\134\012\007\016" +
    "\005\017\011\020\031\021\010\001\001\000\016\004\126" +
    "\012\007\016\005\017\011\020\031\021\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\072\012\007\016" +
    "\005\017\011\020\031\021\010\001\001\000\016\004\037" +
    "\012\007\016\005\017\011\020\031\021\010\001\001\000" +
    "\002\001\001\000\016\004\071\012\007\016\005\017\011" +
    "\020\031\021\010\001\001\000\002\001\001\000\016\004" +
    "\070\012\007\016\005\017\011\020\031\021\010\001\001" +
    "\000\016\004\067\012\007\016\005\017\011\020\031\021" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\035\012\007\016\005\017\011\020" +
    "\031\021\010\001\001\000\002\001\001\000\016\004\037" +
    "\012\007\016\005\017\011\020\040\021\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\066\012\007" +
    "\016\005\017\011\020\031\021\010\001\001\000\016\004" +
    "\065\012\007\016\005\017\011\020\031\021\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\075\007\077\020\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\101\020\076\001\001\000\002\001\001\000\006\014" +
    "\105\015\103\001\001\000\022\002\120\003\026\004\015" +
    "\012\007\016\005\017\011\020\031\021\010\001\001\000" +
    "\006\010\113\013\115\001\001\000\022\002\107\003\026" +
    "\004\015\012\007\016\005\017\011\020\031\021\010\001" +
    "\001\000\020\004\037\010\111\012\007\016\005\017\011" +
    "\020\031\021\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\002\116" +
    "\003\026\004\015\012\007\016\005\017\011\020\031\021" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\125\004\015\012\007\016\005\017\011" +
    "\020\031\021\010\001\001\000\020\003\124\004\015\012" +
    "\007\016\005\017\011\020\031\021\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\002" +
    "\130\003\026\004\015\012\007\016\005\017\011\020\031" +
    "\021\010\001\001\000\002\001\001\000\022\002\132\003" +
    "\026\004\015\012\007\016\005\017\011\020\031\021\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\140\015\137\001\001\000\010\010\061" +
    "\011\147\013\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\111\001\001\000\016\004\143\012\007" +
    "\016\005\017\011\020\031\021\010\001\001\000\002\001" +
    "\001\000\016\004\145\012\007\016\005\017\011\020\031" +
    "\021\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\051\011\163\013\115\001" +
    "\001\000\022\003\161\004\015\005\160\012\007\016\005" +
    "\017\011\020\031\021\010\001\001\000\002\001\001\000" +
    "\016\004\157\012\007\016\005\017\011\020\031\021\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\165" +
    "\001\001\000\002\001\001\000\016\004\167\012\007\016" +
    "\005\017\011\020\031\021\010\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public Sample.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (Sample.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		Sample.Absyn.Program start_val = (Sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListExpr 
            {
              Sample.Absyn.Program RESULT =null;
		Sample.Absyn.ListExpr p_1 = (Sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.ProgramExprs(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListExpr ::= 
            {
              Sample.Absyn.ListExpr RESULT =null;
		 RESULT = new Sample.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListExpr ::= Expr 
            {
              Sample.Absyn.ListExpr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListExpr ::= Expr _SYMB_0 ListExpr 
            {
              Sample.Absyn.ListExpr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.ListExpr p_3 = (Sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListExpr ::= 
            {
              Sample.Absyn.ListExpr RESULT =null;
		 RESULT = new Sample.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListExpr ::= Expr 
            {
              Sample.Absyn.ListExpr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListExpr ::= Expr _SYMB_1 ListExpr 
            {
              Sample.Absyn.ListExpr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.ListExpr p_3 = (Sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expr ::= _IDENT_ 
            {
              Sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Var(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expr ::= _SYMB_27 
            {
              Sample.Absyn.Expr RESULT =null;
		 RESULT = new Sample.Absyn.ConstTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expr ::= _SYMB_13 
            {
              Sample.Absyn.Expr RESULT =null;
		 RESULT = new Sample.Absyn.ConstFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expr ::= _SYMB_15 Expr _SYMB_26 Program _SYMB_11 Program _SYMB_12 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Sample.Absyn.Program p_4 = (Sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Sample.Absyn.Program p_6 = (Sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Sample.Absyn.If(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expr ::= _IDENT_ _SYMB_2 ComaExprs _SYMB_3 
            {
              Sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Sample.Absyn.ComaExprs p_3 = (Sample.Absyn.ComaExprs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Sample.Absyn.FuncCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expr ::= _SYMB_14 _IDENT_ _SYMB_2 FArgs _SYMB_3 _SYMB_4 Type Program _SYMB_12 
            {
              Sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		Sample.Absyn.FArgs p_4 = (Sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Sample.Absyn.Type p_7 = (Sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Program p_8 = (Sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Sample.Absyn.Func(p_2,p_4,p_7,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expr ::= _SYMB_22 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Return(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expr ::= _SYMB_6 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Not(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expr ::= Expr _SYMB_8 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Expr p_3 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.And(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expr ::= Expr _SYMB_20 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Expr p_3 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Or(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expr ::= _SYMB_7 
            {
              Sample.Absyn.Expr RESULT =null;
		 RESULT = new Sample.Absyn.ConstZero(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expr ::= _SYMB_24 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Succ(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expr ::= _SYMB_21 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Pred(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expr ::= _SYMB_17 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.IsZero(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expr ::= _SYMB_2 Expr _SYMB_3 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expr ::= Expr1 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ComaExprs ::= ListExpr 
            {
              Sample.Absyn.ComaExprs RESULT =null;
		Sample.Absyn.ListExpr p_1 = (Sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Vars(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComaExprs",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FArgs ::= ListDec 
            {
              Sample.Absyn.FArgs RESULT =null;
		Sample.Absyn.ListDec p_1 = (Sample.Absyn.ListDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.FuncArgs(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FArgs",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ListDec ::= 
            {
              Sample.Absyn.ListDec RESULT =null;
		 RESULT = new Sample.Absyn.ListDec(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListDec ::= Dec 
            {
              Sample.Absyn.ListDec RESULT =null;
		Sample.Absyn.Dec p_1 = (Sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.ListDec(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListDec ::= Dec _SYMB_1 ListDec 
            {
              Sample.Absyn.ListDec RESULT =null;
		Sample.Absyn.Dec p_1 = (Sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.ListDec p_3 = (Sample.Absyn.ListDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Type ::= _SYMB_23 
            {
              Sample.Absyn.Type RESULT =null;
		 RESULT = new Sample.Absyn.StringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Type ::= _SYMB_9 
            {
              Sample.Absyn.Type RESULT =null;
		 RESULT = new Sample.Absyn.BoolType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Type ::= _SYMB_30 
            {
              Sample.Absyn.Type RESULT =null;
		 RESULT = new Sample.Absyn.UnitType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Type ::= _SYMB_16 
            {
              Sample.Absyn.Type RESULT =null;
		 RESULT = new Sample.Absyn.IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Type ::= _SYMB_10 
            {
              Sample.Absyn.Type RESULT =null;
		 RESULT = new Sample.Absyn.DoubleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Type ::= _SYMB_25 
            {
              Sample.Absyn.Type RESULT =null;
		 RESULT = new Sample.Absyn.TableType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Type ::= _SYMB_19 
            {
              Sample.Absyn.Type RESULT =null;
		 RESULT = new Sample.Absyn.NilType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Type ::= _SYMB_30 
            {
              Sample.Absyn.Type RESULT =null;
		 RESULT = new Sample.Absyn.VoidType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TypeKW ::= _SYMB_28 
            {
              Sample.Absyn.TypeKW RESULT =null;
		 RESULT = new Sample.Absyn.TypeKeyword(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeKW",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expr3 ::= _IDENT_ _SYMB_4 TypeKW _SYMB_5 Type 
            {
              Sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Sample.Absyn.TypeKW p_3 = (Sample.Absyn.TypeKW)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Type p_5 = (Sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.TypeAliasing(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expr3 ::= _SYMB_18 _IDENT_ _SYMB_4 TypeKW _SYMB_5 Type 
            {
              Sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Sample.Absyn.TypeKW p_4 = (Sample.Absyn.TypeKW)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Type p_6 = (Sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.LcTypeAliasing(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr3 ::= _IDENT_ TAnnot _SYMB_5 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Sample.Absyn.TAnnot p_2 = (Sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Expr p_4 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.VarTypeAnnotation(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr3 ::= _SYMB_18 _IDENT_ TAnnot _SYMB_5 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Sample.Absyn.TAnnot p_3 = (Sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Expr p_5 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.LcVarTypeAnnotation(p_2,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr3 ::= _SYMB_14 _IDENT_ _SYMB_2 FArgs _SYMB_3 TAnnot Program _SYMB_12 
            {
              Sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Sample.Absyn.FArgs p_4 = (Sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Sample.Absyn.TAnnot p_6 = (Sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Program p_7 = (Sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Sample.Absyn.FuncTypeAnnotation(p_2,p_4,p_6,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expr3 ::= Expr4 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VarKW ::= _SYMB_29 
            {
              Sample.Absyn.VarKW RESULT =null;
		 RESULT = new Sample.Absyn.VarKeyword(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarKW",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TAnnot ::= _SYMB_4 VarKW 
            {
              Sample.Absyn.TAnnot RESULT =null;
		Sample.Absyn.VarKW p_2 = (Sample.Absyn.VarKW)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.TypeAnnotation(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TAnnot",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TAscript ::= TAnnot _SYMB_2 Type _SYMB_3 
            {
              Sample.Absyn.TAscript RESULT =null;
		Sample.Absyn.TAnnot p_1 = (Sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Sample.Absyn.Type p_3 = (Sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Sample.Absyn.TypeAscription(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TAscript",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr4 ::= _IDENT_ TAscript _SYMB_5 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Sample.Absyn.TAscript p_2 = (Sample.Absyn.TAscript)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Expr p_4 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.VarTypeAscription(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr4 ::= _SYMB_18 _IDENT_ TAscript _SYMB_5 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Sample.Absyn.TAscript p_3 = (Sample.Absyn.TAscript)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Expr p_5 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.LcVarTypeAscription(p_2,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr4 ::= _SYMB_14 _IDENT_ _SYMB_2 FArgs _SYMB_3 TAscript Program _SYMB_12 
            {
              Sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Sample.Absyn.FArgs p_4 = (Sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Sample.Absyn.TAscript p_6 = (Sample.Absyn.TAscript)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Program p_7 = (Sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Sample.Absyn.FuncTypeAscription(p_2,p_4,p_6,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr1 ::= _INTEGER_ 
            {
              Sample.Absyn.Expr RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.EInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr1 ::= _DOUBLE_ 
            {
              Sample.Absyn.Expr RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.EDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr1 ::= _STRING_ 
            {
              Sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.EStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr1 ::= Expr2 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Dec ::= _IDENT_ _SYMB_4 Type 
            {
              Sample.Absyn.Dec RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Type p_3 = (Sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Declaration(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Dec ::= _SYMB_18 _IDENT_ _SYMB_4 Type 
            {
              Sample.Absyn.Dec RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Type p_4 = (Sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.LcVarDeclaration(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr2 ::= Dec 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Dec p_1 = (Sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.OnlyDecl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr2 ::= Dec _SYMB_5 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Dec p_1 = (Sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Expr p_3 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.InitDecl(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr2 ::= Dec _SYMB_5 _SYMB_2 Dec _SYMB_1 Dec _SYMB_3 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Dec p_1 = (Sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Sample.Absyn.Dec p_4 = (Sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Sample.Absyn.Dec p_6 = (Sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Sample.Absyn.InitTableDecl(p_1,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr2 ::= Expr3 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",15, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
