
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sample;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\003\000\002\003\005\000\002\003\002" +
    "\000\002\003\003\000\002\003\005\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\011\000\002" +
    "\004\006\000\002\004\013\000\002\004\004\000\002\004" +
    "\003\000\002\004\004\000\002\004\005\000\002\004\005" +
    "\000\002\004\003\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\005\000\002\004\003\000\002" +
    "\005\003\000\002\006\003\000\002\007\002\000\002\007" +
    "\003\000\002\007\005\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\011\003\000\002\012\007\000\002" +
    "\012\006\000\002\012\012\000\002\012\003\000\002\013" +
    "\003\000\002\014\004\000\002\015\006\000\002\016\006" +
    "\000\002\016\012\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\020\005\000\002" +
    "\021\006\000\002\022\003\000\002\022\003\000\002\022" +
    "\005\000\002\022\005\000\002\022\011\000\002\022\011" +
    "\000\002\022\005\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\046\002\uffff\006\025\012\024\013\023\021" +
    "\022\022\020\023\016\024\015\026\014\027\013\031\032" +
    "\032\031\034\027\037\026\043\005\044\004\045\021\046" +
    "\007\001\002\000\024\002\uffd3\004\uffd3\005\uffd3\007\uffd3" +
    "\014\uffd3\017\uffd3\020\uffd3\030\uffd3\036\uffd3\001\002\000" +
    "\024\002\uffd1\004\uffd1\005\uffd1\007\uffd1\014\uffd1\017\uffd1" +
    "\020\uffd1\030\uffd1\036\uffd1\001\002\000\024\002\uffd9\004" +
    "\uffd9\005\uffd9\007\uffd9\014\uffd9\017\uffd9\020\uffd9\030\uffd9" +
    "\036\uffd9\001\002\000\032\002\ufff9\004\ufff9\005\ufff9\006" +
    "\147\007\ufff9\010\146\011\151\014\ufff9\017\ufff9\020\ufff9" +
    "\030\ufff9\036\ufff9\001\002\000\024\002\uffc6\004\uffc6\005" +
    "\uffc6\007\uffc6\014\uffc6\017\uffc6\020\uffc6\030\uffc6\036\uffc6" +
    "\001\002\000\024\002\uffd0\004\uffd0\005\uffd0\007\uffd0\014" +
    "\uffd0\017\uffd0\020\uffd0\030\uffd0\036\uffd0\001\002\000\024" +
    "\002\uffe9\004\uffe9\005\uffe9\007\uffe9\014\uffe9\017\uffe9\020" +
    "\uffe9\030\uffe9\036\uffe9\001\002\000\024\002\ufff2\004\ufff2" +
    "\005\ufff2\007\ufff2\014\ufff2\017\ufff2\020\ufff2\030\ufff2\036" +
    "\ufff2\001\002\000\044\006\025\012\024\013\023\021\022" +
    "\022\020\023\016\024\015\026\014\027\013\031\032\032" +
    "\031\034\027\037\026\043\005\044\004\045\021\046\007" +
    "\001\002\000\044\006\025\012\024\013\023\021\022\022" +
    "\020\023\016\024\015\026\014\027\013\031\032\032\031" +
    "\034\027\037\026\043\005\044\004\045\021\046\007\001" +
    "\002\000\004\046\133\001\002\000\022\002\ufffe\004\130" +
    "\005\127\007\ufffe\014\062\017\ufffe\020\ufffe\030\061\001" +
    "\002\000\004\046\100\001\002\000\024\002\uffd2\004\uffd2" +
    "\005\uffd2\007\uffd2\014\uffd2\017\uffd2\020\uffd2\030\uffd2\036" +
    "\uffd2\001\002\000\024\002\ufff7\004\ufff7\005\ufff7\007\ufff7" +
    "\014\ufff7\017\ufff7\020\ufff7\030\ufff7\036\ufff7\001\002\000" +
    "\024\002\uffee\004\uffee\005\uffee\007\uffee\014\uffee\017\uffee" +
    "\020\uffee\030\uffee\036\uffee\001\002\000\044\006\025\012" +
    "\024\013\023\021\022\022\020\023\016\024\015\026\014" +
    "\027\013\031\032\032\031\034\027\037\026\043\005\044" +
    "\004\045\021\046\007\001\002\000\044\006\025\012\024" +
    "\013\023\021\022\022\020\023\016\024\015\026\014\027" +
    "\013\031\032\032\031\034\027\037\026\043\005\044\004" +
    "\045\021\046\007\001\002\000\024\002\ufff8\004\ufff8\005" +
    "\ufff8\007\ufff8\014\ufff8\017\ufff8\020\ufff8\030\ufff8\036\ufff8" +
    "\001\002\000\044\006\025\012\024\013\023\021\022\022" +
    "\020\023\016\024\015\026\014\027\013\031\032\032\031" +
    "\034\027\037\026\043\005\044\004\045\021\046\007\001" +
    "\002\000\010\002\000\017\000\020\000\001\002\000\044" +
    "\006\025\012\024\013\023\021\022\022\020\023\016\024" +
    "\015\026\014\027\013\031\032\032\031\034\027\037\026" +
    "\043\005\044\004\045\021\046\007\001\002\000\044\006" +
    "\025\012\024\013\023\021\022\022\020\023\016\024\015" +
    "\026\014\027\013\031\032\032\031\034\027\037\026\043" +
    "\005\044\004\045\021\046\007\001\002\000\026\002\uffcc" +
    "\004\uffcc\005\uffcc\007\uffcc\011\065\014\uffcc\017\uffcc\020" +
    "\uffcc\030\uffcc\036\uffcc\001\002\000\026\002\uffcd\004\uffcd" +
    "\005\uffcd\007\uffcd\011\037\014\uffcd\017\uffcd\020\uffcd\030" +
    "\uffcd\036\uffcd\001\002\000\004\002\036\001\002\000\004" +
    "\002\001\001\002\000\044\006\041\012\024\013\023\021" +
    "\022\022\020\023\016\024\015\026\014\027\013\031\032" +
    "\032\031\034\027\037\026\043\005\044\004\045\021\046" +
    "\007\001\002\000\024\002\uffcb\004\uffcb\005\uffcb\007\uffcb" +
    "\014\062\017\uffcb\020\uffcb\030\061\036\uffcb\001\002\000" +
    "\044\006\025\012\024\013\023\021\022\022\020\023\016" +
    "\024\015\026\014\027\013\031\032\032\031\034\027\037" +
    "\026\043\005\044\004\045\021\046\007\001\002\000\010" +
    "\007\060\014\062\030\061\001\002\000\014\005\044\007" +
    "\uffcd\011\037\014\uffcd\030\uffcd\001\002\000\004\046\045" +
    "\001\002\000\004\010\050\001\002\000\004\007\047\001" +
    "\002\000\024\002\uffc9\004\uffc9\005\uffc9\007\uffc9\014\uffc9" +
    "\017\uffc9\020\uffc9\030\uffc9\036\uffc9\001\002\000\016\015" +
    "\055\016\051\025\053\033\057\035\056\042\054\001\002" +
    "\000\070\002\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\011" +
    "\uffe0\012\uffe0\013\uffe0\014\uffe0\017\uffe0\020\uffe0\021\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\026\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\034\uffe0\036\uffe0\037\uffe0\043\uffe0\044\uffe0" +
    "\045\uffe0\046\uffe0\001\002\000\026\002\uffcf\004\uffcf\005" +
    "\uffcf\007\uffcf\011\uffcf\014\uffcf\017\uffcf\020\uffcf\030\uffcf" +
    "\036\uffcf\001\002\000\070\002\uffe1\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\034\uffe1\036\uffe1\037\uffe1" +
    "\043\uffe1\044\uffe1\045\uffe1\046\uffe1\001\002\000\070\002" +
    "\uffde\004\uffde\005\uffde\006\uffde\007\uffde\011\uffde\012\uffde" +
    "\013\uffde\014\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde" +
    "\034\uffde\036\uffde\037\uffde\043\uffde\044\uffde\045\uffde\046" +
    "\uffde\001\002\000\070\002\uffe2\004\uffe2\005\uffe2\006\uffe2" +
    "\007\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\031\uffe2\032\uffe2\034\uffe2\036\uffe2\037\uffe2\043" +
    "\uffe2\044\uffe2\045\uffe2\046\uffe2\001\002\000\070\002\uffdf" +
    "\004\uffdf\005\uffdf\006\uffdf\007\uffdf\011\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\034" +
    "\uffdf\036\uffdf\037\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf" +
    "\001\002\000\070\002\uffe3\004\uffe3\005\uffe3\006\uffe3\007" +
    "\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\022\uffe3\023\uffe3\024\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\034\uffe3\036\uffe3\037\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\046\uffe3\001\002\000\024\002\uffea\004" +
    "\uffea\005\uffea\007\uffea\014\uffea\017\uffea\020\uffea\030\uffea" +
    "\036\uffea\001\002\000\044\006\025\012\024\013\023\021" +
    "\022\022\020\023\016\024\015\026\014\027\013\031\032" +
    "\032\031\034\027\037\026\043\005\044\004\045\021\046" +
    "\007\001\002\000\044\006\025\012\024\013\023\021\022" +
    "\022\020\023\016\024\015\026\014\027\013\031\032\032" +
    "\031\034\027\037\026\043\005\044\004\045\021\046\007" +
    "\001\002\000\024\002\ufff0\004\ufff0\005\ufff0\007\ufff0\014" +
    "\062\017\ufff0\020\ufff0\030\061\036\ufff0\001\002\000\024" +
    "\002\uffef\004\uffef\005\uffef\007\uffef\014\062\017\uffef\020" +
    "\uffef\030\061\036\uffef\001\002\000\044\006\067\012\024" +
    "\013\023\021\022\022\020\023\016\024\015\026\014\027" +
    "\013\031\032\032\031\034\027\037\026\043\005\044\004" +
    "\045\021\046\007\001\002\000\024\002\uffca\004\uffca\005" +
    "\uffca\007\uffca\014\062\017\uffca\020\uffca\030\061\036\uffca" +
    "\001\002\000\044\006\025\012\024\013\023\021\022\022" +
    "\020\023\016\024\015\026\014\027\013\031\032\032\031" +
    "\034\027\037\026\043\005\044\004\045\021\046\007\001" +
    "\002\000\014\005\071\007\uffcd\011\037\014\uffcd\030\uffcd" +
    "\001\002\000\004\046\045\001\002\000\004\007\073\001" +
    "\002\000\024\002\uffc8\004\uffc8\005\uffc8\007\uffc8\014\uffc8" +
    "\017\uffc8\020\uffc8\030\uffc8\036\uffc8\001\002\000\024\002" +
    "\uffec\004\uffec\005\uffec\007\uffec\014\062\017\uffec\020\uffec" +
    "\030\061\036\uffec\001\002\000\024\002\ufff3\004\ufff3\005" +
    "\ufff3\007\ufff3\014\062\017\ufff3\020\ufff3\030\061\036\ufff3" +
    "\001\002\000\024\002\uffed\004\uffed\005\uffed\007\uffed\014" +
    "\062\017\uffed\020\uffed\030\061\036\uffed\001\002\000\024" +
    "\002\ufff1\004\ufff1\005\ufff1\007\ufff1\014\062\017\ufff1\020" +
    "\ufff1\030\061\036\ufff1\001\002\000\004\006\101\001\002" +
    "\000\006\007\uffe6\046\045\001\002\000\004\007\107\001" +
    "\002\000\006\005\105\007\uffe5\001\002\000\004\007\uffe7" +
    "\001\002\000\006\007\uffe6\046\045\001\002\000\004\007" +
    "\uffe4\001\002\000\004\010\110\001\002\000\020\015\055" +
    "\016\051\025\053\033\057\035\056\041\123\042\054\001" +
    "\002\000\046\006\025\012\024\013\023\020\uffff\021\022" +
    "\022\020\023\016\024\015\026\014\027\013\031\032\032" +
    "\031\034\027\037\026\043\005\044\004\045\021\046\007" +
    "\001\002\000\046\006\113\012\024\013\023\020\uffff\021" +
    "\022\022\020\023\016\024\015\026\014\027\013\031\032" +
    "\032\031\034\027\037\026\043\005\044\004\045\021\046" +
    "\007\001\002\000\060\006\025\012\024\013\023\015\055" +
    "\016\051\021\022\022\020\023\016\024\015\025\053\026" +
    "\014\027\013\031\032\032\031\033\057\034\027\035\056" +
    "\037\026\042\054\043\005\044\004\045\021\046\007\001" +
    "\002\000\004\020\115\001\002\000\024\002\uffda\004\uffda" +
    "\005\uffda\007\uffda\014\uffda\017\uffda\020\uffda\030\uffda\036" +
    "\uffda\001\002\000\004\007\117\001\002\000\050\006\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\020\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\026\uffd6\027\uffd6\031\uffd6\032\uffd6\034\uffd6" +
    "\037\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\001\002\000" +
    "\004\020\121\001\002\000\024\002\uffd4\004\uffd4\005\uffd4" +
    "\007\uffd4\014\uffd4\017\uffd4\020\uffd4\030\uffd4\036\uffd4\001" +
    "\002\000\046\006\025\012\024\013\023\020\uffff\021\022" +
    "\022\020\023\016\024\015\026\014\027\013\031\032\032" +
    "\031\034\027\037\026\043\005\044\004\045\021\046\007" +
    "\001\002\000\050\006\uffd8\011\uffd8\012\uffd8\013\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\026\uffd8\027\uffd8" +
    "\031\uffd8\032\uffd8\034\uffd8\037\uffd8\043\uffd8\044\uffd8\045" +
    "\uffd8\046\uffd8\001\002\000\050\006\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\026" +
    "\uffd7\027\uffd7\031\uffd7\032\uffd7\034\uffd7\037\uffd7\043\uffd7" +
    "\044\uffd7\045\uffd7\046\uffd7\001\002\000\004\020\126\001" +
    "\002\000\024\002\ufff4\004\ufff4\005\ufff4\007\ufff4\014\ufff4" +
    "\017\ufff4\020\ufff4\030\ufff4\036\ufff4\001\002\000\054\002" +
    "\uffff\006\025\007\uffff\012\024\013\023\017\uffff\020\uffff" +
    "\021\022\022\020\023\016\024\015\026\014\027\013\031" +
    "\032\032\031\034\027\037\026\043\005\044\004\045\021" +
    "\046\007\001\002\000\054\002\uffff\006\025\007\uffff\012" +
    "\024\013\023\017\uffff\020\uffff\021\022\022\020\023\016" +
    "\024\015\026\014\027\013\031\032\032\031\034\027\037" +
    "\026\043\005\044\004\045\021\046\007\001\002\000\012" +
    "\002\ufffd\007\ufffd\017\ufffd\020\ufffd\001\002\000\012\002" +
    "\ufffa\007\ufffa\017\ufffa\020\ufffa\001\002\000\004\010\134" +
    "\001\002\000\016\015\055\016\051\025\053\033\057\035" +
    "\056\042\054\001\002\000\026\002\uffce\004\uffce\005\uffce" +
    "\007\uffce\011\uffce\014\uffce\017\uffce\020\uffce\030\uffce\036" +
    "\uffce\001\002\000\010\014\062\030\061\036\137\001\002" +
    "\000\046\006\025\012\024\013\023\017\uffff\021\022\022" +
    "\020\023\016\024\015\026\014\027\013\031\032\032\031" +
    "\034\027\037\026\043\005\044\004\045\021\046\007\001" +
    "\002\000\004\017\141\001\002\000\046\006\025\012\024" +
    "\013\023\020\uffff\021\022\022\020\023\016\024\015\026" +
    "\014\027\013\031\032\032\031\034\027\037\026\043\005" +
    "\044\004\045\021\046\007\001\002\000\004\020\143\001" +
    "\002\000\024\002\ufff6\004\ufff6\005\ufff6\007\ufff6\014\ufff6" +
    "\017\ufff6\020\ufff6\030\ufff6\036\ufff6\001\002\000\024\002" +
    "\uffeb\004\uffeb\005\uffeb\007\uffeb\014\062\017\uffeb\020\uffeb" +
    "\030\061\036\uffeb\001\002\000\004\011\165\001\002\000" +
    "\022\015\055\016\051\025\053\033\057\035\056\040\161" +
    "\041\123\042\054\001\002\000\046\006\025\007\uffff\012" +
    "\024\013\023\021\022\022\020\023\016\024\015\026\014" +
    "\027\013\031\032\032\031\034\027\037\026\043\005\044" +
    "\004\045\021\046\007\001\002\000\006\006\153\011\154" +
    "\001\002\000\044\006\025\012\024\013\023\021\022\022" +
    "\020\023\016\024\015\026\014\027\013\031\032\032\031" +
    "\034\027\037\026\043\005\044\004\045\021\046\007\001" +
    "\002\000\024\002\uffc7\004\uffc7\005\uffc7\007\uffc7\014\062" +
    "\017\uffc7\020\uffc7\030\061\036\uffc7\001\002\000\016\015" +
    "\055\016\051\025\053\033\057\035\056\042\054\001\002" +
    "\000\044\006\025\012\024\013\023\021\022\022\020\023" +
    "\016\024\015\026\014\027\013\031\032\032\031\034\027" +
    "\037\026\043\005\044\004\045\021\046\007\001\002\000" +
    "\024\002\uffdb\004\uffdb\005\uffdb\007\uffdb\014\062\017\uffdb" +
    "\020\uffdb\030\061\036\uffdb\001\002\000\004\007\160\001" +
    "\002\000\004\007\uffe8\001\002\000\024\002\ufff5\004\ufff5" +
    "\005\ufff5\007\ufff5\014\ufff5\017\ufff5\020\ufff5\030\ufff5\036" +
    "\ufff5\001\002\000\004\011\uffdd\001\002\000\004\011\163" +
    "\001\002\000\016\015\055\016\051\025\053\033\057\035" +
    "\056\042\054\001\002\000\024\002\uffdc\004\uffdc\005\uffdc" +
    "\007\uffdc\014\uffdc\017\uffdc\020\uffdc\030\uffdc\036\uffdc\001" +
    "\002\000\044\006\025\012\024\013\023\021\022\022\020" +
    "\023\016\024\015\026\014\027\013\031\032\032\031\034" +
    "\027\037\026\043\005\044\004\045\021\046\007\001\002" +
    "\000\024\002\uffd5\004\uffd5\005\uffd5\007\uffd5\014\062\017" +
    "\uffd5\020\uffd5\030\061\036\uffd5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\024\002\034\003\027\004\016\012\007\016" +
    "\005\017\011\020\033\021\032\022\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\147\015\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\143\012" +
    "\007\016\005\017\011\020\033\021\032\022\010\001\001" +
    "\000\020\004\135\012\007\016\005\017\011\020\033\021" +
    "\032\022\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\076\012\007\016\005\017\011" +
    "\020\033\021\032\022\010\001\001\000\020\004\041\012" +
    "\007\016\005\017\011\020\033\021\032\022\010\001\001" +
    "\000\002\001\001\000\020\004\075\012\007\016\005\017" +
    "\011\020\033\021\032\022\010\001\001\000\002\001\001" +
    "\000\020\004\074\012\007\016\005\017\011\020\033\021" +
    "\032\022\010\001\001\000\020\004\073\012\007\016\005" +
    "\017\011\020\033\021\032\022\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\037\012\007\016\005\017\011\020\033\021" +
    "\032\022\010\001\001\000\002\001\001\000\020\004\041" +
    "\012\007\016\005\017\011\020\042\021\032\022\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\063\012\007\016\005\017\011\020\033\021" +
    "\032\022\010\001\001\000\020\004\062\012\007\016\005" +
    "\017\011\020\033\021\032\022\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\065\012\007\016\005" +
    "\017\011\020\033\021\032\022\010\001\001\000\002\001" +
    "\001\000\020\004\041\012\007\016\005\017\011\020\067" +
    "\021\032\022\010\001\001\000\002\001\001\000\004\020" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\101\007\103\020\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\105\020\102\001\001\000\002\001\001" +
    "\000\006\014\111\015\110\001\001\000\006\010\121\013" +
    "\123\001\001\000\024\002\117\003\027\004\016\012\007" +
    "\016\005\017\011\020\033\021\032\022\010\001\001\000" +
    "\024\002\113\003\027\004\016\012\007\016\005\017\011" +
    "\020\033\021\032\022\010\001\001\000\022\004\041\010" +
    "\115\012\007\016\005\017\011\020\033\021\032\022\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\002\124\003\027\004\016\012\007\016\005\017" +
    "\011\020\033\021\032\022\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\131\004\016\012\007\016\005\017\011\020\033" +
    "\021\032\022\010\001\001\000\022\003\130\004\016\012" +
    "\007\016\005\017\011\020\033\021\032\022\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\002\137\003\027\004\016\012\007\016\005\017" +
    "\011\020\033\021\032\022\010\001\001\000\002\001\001" +
    "\000\024\002\141\003\027\004\016\012\007\016\005\017" +
    "\011\020\033\021\032\022\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\051\011\161\013\123\001\001\000\024\003\156" +
    "\004\016\005\155\012\007\016\005\017\011\020\033\021" +
    "\032\022\010\001\001\000\002\001\001\000\020\004\151" +
    "\012\007\016\005\017\011\020\033\021\032\022\010\001" +
    "\001\000\002\001\001\000\004\010\115\001\001\000\020" +
    "\004\154\012\007\016\005\017\011\020\033\021\032\022" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\163\001\001\000\002\001\001\000\020" +
    "\004\165\012\007\016\005\017\011\020\033\021\032\022" +
    "\010\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public sample.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (sample.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		sample.Absyn.Program start_val = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListExpr 
            {
              sample.Absyn.Program RESULT =null;
		sample.Absyn.ListExpr p_1 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ProgramExprs(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListExpr ::= 
            {
              sample.Absyn.ListExpr RESULT =null;
		 RESULT = new sample.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListExpr ::= Expr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListExpr ::= Expr _SYMB_0 ListExpr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.ListExpr p_3 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListExpr ::= 
            {
              sample.Absyn.ListExpr RESULT =null;
		 RESULT = new sample.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListExpr ::= Expr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListExpr ::= Expr _SYMB_1 ListExpr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.ListExpr p_3 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expr ::= _IDENT_ 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Var(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expr ::= _SYMB_27 
            {
              sample.Absyn.Expr RESULT =null;
		 RESULT = new sample.Absyn.ConstTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expr ::= _SYMB_13 
            {
              sample.Absyn.Expr RESULT =null;
		 RESULT = new sample.Absyn.ConstFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expr ::= _SYMB_16 Expr _SYMB_26 Program _SYMB_11 Program _SYMB_12 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		sample.Absyn.Program p_4 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Program p_6 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.If(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expr ::= _IDENT_ _SYMB_2 ComaExprs _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.ComaExprs p_3 = (sample.Absyn.ComaExprs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.FuncCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expr ::= _SYMB_14 _IDENT_ _SYMB_2 FArgs _SYMB_3 _SYMB_4 Type Program _SYMB_12 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		sample.Absyn.FArgs p_4 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		sample.Absyn.Type p_7 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Program p_8 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.Func(p_2,p_4,p_7,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expr ::= _SYMB_22 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Return(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expr ::= _SYMB_19 
            {
              sample.Absyn.Expr RESULT =null;
		 RESULT = new sample.Absyn.NilKeyword(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expr ::= _SYMB_6 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Not(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expr ::= Expr _SYMB_8 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.And(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expr ::= Expr _SYMB_20 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Or(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expr ::= _SYMB_7 
            {
              sample.Absyn.Expr RESULT =null;
		 RESULT = new sample.Absyn.ConstZero(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expr ::= _SYMB_24 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Succ(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expr ::= _SYMB_21 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Pred(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expr ::= _SYMB_18 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.IsZero(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expr ::= _SYMB_2 Expr _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expr ::= Expr1 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ComaExprs ::= ListExpr 
            {
              sample.Absyn.ComaExprs RESULT =null;
		sample.Absyn.ListExpr p_1 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Vars(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComaExprs",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FArgs ::= ListDec 
            {
              sample.Absyn.FArgs RESULT =null;
		sample.Absyn.ListDec p_1 = (sample.Absyn.ListDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.FuncArgs(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FArgs",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListDec ::= 
            {
              sample.Absyn.ListDec RESULT =null;
		 RESULT = new sample.Absyn.ListDec(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListDec ::= Dec 
            {
              sample.Absyn.ListDec RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ListDec(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListDec ::= Dec _SYMB_1 ListDec 
            {
              sample.Absyn.ListDec RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.ListDec p_3 = (sample.Absyn.ListDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Type ::= _SYMB_23 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.StringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Type ::= _SYMB_9 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.BoolType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Type ::= _SYMB_17 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Type ::= _SYMB_10 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.DoubleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Type ::= _SYMB_25 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.TableType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Type ::= _SYMB_30 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.VoidType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TypeKW ::= _SYMB_28 
            {
              sample.Absyn.TypeKW RESULT =null;
		 RESULT = new sample.Absyn.TypeKeyword(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeKW",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expr3 ::= _IDENT_ _SYMB_4 TypeKW _SYMB_5 Type 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		sample.Absyn.TypeKW p_3 = (sample.Absyn.TypeKW)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Type p_5 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TypeAliasing(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expr3 ::= _IDENT_ TAnnot _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.TAnnot p_2 = (sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_4 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.VarTypeAnnotation(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expr3 ::= _SYMB_14 _IDENT_ _SYMB_2 FArgs _SYMB_3 TAnnot Program _SYMB_12 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		sample.Absyn.FArgs p_4 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		sample.Absyn.TAnnot p_6 = (sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Program p_7 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.FuncTypeAnnotation(p_2,p_4,p_6,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr3 ::= Expr4 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VarKW ::= _SYMB_29 
            {
              sample.Absyn.VarKW RESULT =null;
		 RESULT = new sample.Absyn.VarKeyword(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarKW",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TAnnot ::= _SYMB_4 VarKW 
            {
              sample.Absyn.TAnnot RESULT =null;
		sample.Absyn.VarKW p_2 = (sample.Absyn.VarKW)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TypeAnnotation(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TAnnot",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TAscript ::= TAnnot _SYMB_2 Type _SYMB_3 
            {
              sample.Absyn.TAscript RESULT =null;
		sample.Absyn.TAnnot p_1 = (sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Type p_3 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.TypeAscription(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TAscript",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expr4 ::= _IDENT_ TAscript _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.TAscript p_2 = (sample.Absyn.TAscript)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_4 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.VarTypeAscription(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expr4 ::= _SYMB_14 _IDENT_ _SYMB_2 FArgs _SYMB_3 TAscript Program _SYMB_12 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		sample.Absyn.FArgs p_4 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		sample.Absyn.TAscript p_6 = (sample.Absyn.TAscript)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Program p_7 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.FuncTypeAscription(p_2,p_4,p_6,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr1 ::= _INTEGER_ 
            {
              sample.Absyn.Expr RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.EInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr1 ::= _DOUBLE_ 
            {
              sample.Absyn.Expr RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.EDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr1 ::= _STRING_ 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.EStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr1 ::= Expr2 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Dec ::= _IDENT_ _SYMB_4 Type 
            {
              sample.Absyn.Dec RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Type p_3 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Declaration(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // GlDec ::= _SYMB_15 _IDENT_ _SYMB_4 Type 
            {
              sample.Absyn.GlDec RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Type p_4 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.GlDeclaration(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GlDec",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr2 ::= Dec 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.OnlyDecl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr2 ::= GlDec 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.GlDec p_1 = (sample.Absyn.GlDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.OnlyGlDecl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr2 ::= Dec _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.InitDecl(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr2 ::= GlDec _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.GlDec p_1 = (sample.Absyn.GlDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.InitGlDecl(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr2 ::= Dec _SYMB_5 _SYMB_2 Dec _SYMB_1 Dec _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		sample.Absyn.Dec p_4 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Dec p_6 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.InitTableDecl(p_1,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr2 ::= GlDec _SYMB_5 _SYMB_2 Dec _SYMB_1 Dec _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.GlDec p_1 = (sample.Absyn.GlDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		sample.Absyn.Dec p_4 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Dec p_6 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.InitGlTableDecl(p_1,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr2 ::= _IDENT_ _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Assignment(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr2 ::= Expr3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
