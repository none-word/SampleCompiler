
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Sample;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\011\000\002\002\007" +
    "\000\002\002\004\000\002\002\005\000\002\002\005\000" +
    "\002\002\003\000\002\002\004\000\002\002\004\000\002" +
    "\002\004\000\002\002\003\000\002\002\004\000\002\002" +
    "\005\000\002\003\003\000\002\004\005\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\026\006\007\007\006\010\005\017\016\020" +
    "\015\022\013\024\012\026\010\030\011\032\014\001\002" +
    "\000\034\002\051\006\007\007\006\010\005\012\020\017" +
    "\016\020\015\022\013\023\023\024\012\026\010\030\011" +
    "\032\014\001\002\000\026\006\007\007\006\010\005\017" +
    "\016\020\015\022\013\024\012\026\010\030\011\032\014" +
    "\001\002\000\044\002\ufff8\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\022\ufff8" +
    "\023\ufff8\024\ufff8\026\ufff8\027\ufff8\030\ufff8\032\ufff8\001" +
    "\002\000\026\006\007\007\006\010\005\017\016\020\015" +
    "\022\013\024\012\026\010\030\011\032\014\001\002\000" +
    "\026\006\007\007\006\010\005\017\016\020\015\022\013" +
    "\024\012\026\010\030\011\032\014\001\002\000\044\002" +
    "\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\015\uffff" +
    "\016\uffff\017\uffff\020\uffff\022\uffff\023\uffff\024\uffff\026" +
    "\uffff\027\uffff\030\uffff\032\uffff\001\002\000\026\006\007" +
    "\007\006\010\005\017\016\020\015\022\013\024\012\026" +
    "\010\030\011\032\014\001\002\000\026\006\007\007\006" +
    "\010\005\017\016\020\015\022\013\024\012\026\010\030" +
    "\011\032\014\001\002\000\046\002\000\004\032\006\000" +
    "\007\000\010\000\011\000\012\000\015\000\016\000\017" +
    "\000\020\000\022\000\023\000\024\000\026\000\027\000" +
    "\030\000\032\000\001\002\000\026\006\007\007\006\010" +
    "\005\017\016\020\015\022\013\024\012\026\010\030\011" +
    "\032\014\001\002\000\044\002\ufffe\006\ufffe\007\ufffe\010" +
    "\ufffe\011\ufffe\012\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe" +
    "\022\ufffe\023\ufffe\024\ufffe\026\ufffe\027\ufffe\030\ufffe\032" +
    "\ufffe\001\002\000\034\006\007\007\006\010\005\012\020" +
    "\017\016\020\015\022\013\023\023\024\012\026\010\027" +
    "\022\030\011\032\014\001\002\000\026\006\007\007\006" +
    "\010\005\017\016\020\015\022\013\024\012\026\010\030" +
    "\011\032\014\001\002\000\044\002\ufff3\006\007\007\006" +
    "\010\005\011\ufff3\012\020\015\ufff3\016\ufff3\017\016\020" +
    "\015\022\013\023\023\024\012\026\010\027\ufff3\030\011" +
    "\032\014\001\002\000\026\006\007\007\006\010\005\017" +
    "\016\020\015\022\013\024\012\026\010\030\011\032\014" +
    "\001\002\000\026\006\007\007\006\010\005\017\016\020" +
    "\015\022\013\024\012\026\010\030\011\032\014\001\002" +
    "\000\044\002\ufff9\006\007\007\006\010\005\011\ufff9\012" +
    "\020\015\ufff9\016\ufff9\017\016\020\015\022\013\023\023" +
    "\024\012\026\010\027\ufff9\030\011\032\014\001\002\000" +
    "\034\006\007\007\006\010\005\012\020\015\026\017\016" +
    "\020\015\022\013\023\023\024\012\026\010\030\011\032" +
    "\014\001\002\000\026\006\007\007\006\010\005\017\016" +
    "\020\015\022\013\024\012\026\010\030\011\032\014\001" +
    "\002\000\034\006\007\007\006\010\005\012\020\016\030" +
    "\017\016\020\015\022\013\023\023\024\012\026\010\030" +
    "\011\032\014\001\002\000\044\002\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\012\ufffd\015\ufffd\016\ufffd\017\ufffd\020" +
    "\ufffd\022\ufffd\023\ufffd\024\ufffd\026\ufffd\027\ufffd\030\ufffd" +
    "\032\ufffd\001\002\000\044\002\ufffa\006\007\007\006\010" +
    "\005\011\ufffa\012\020\015\ufffa\016\ufffa\017\016\020\015" +
    "\022\013\023\023\024\012\026\010\027\ufffa\030\011\032" +
    "\014\001\002\000\014\013\040\014\036\021\037\025\035" +
    "\031\033\001\002\000\004\005\uffed\001\002\000\004\005" +
    "\041\001\002\000\004\005\uffef\001\002\000\004\005\uffeb" +
    "\001\002\000\004\005\uffec\001\002\000\004\005\uffee\001" +
    "\002\000\026\006\007\007\006\010\005\017\016\020\015" +
    "\022\013\024\012\026\010\030\011\032\014\001\002\000" +
    "\044\002\ufffc\006\007\007\006\010\005\011\ufffc\012\020" +
    "\015\ufffc\016\ufffc\017\016\020\015\022\013\023\023\024" +
    "\012\026\010\027\ufffc\030\011\032\014\001\002\000\044" +
    "\002\ufff5\006\007\007\006\010\005\011\ufff5\012\020\015" +
    "\ufff5\016\ufff5\017\016\020\015\022\013\023\023\024\012" +
    "\026\010\027\ufff5\030\011\032\014\001\002\000\044\002" +
    "\ufff6\006\007\007\006\010\005\011\ufff6\012\020\015\ufff6" +
    "\016\ufff6\017\016\020\015\022\013\023\023\024\012\026" +
    "\010\027\ufff6\030\011\032\014\001\002\000\044\002\ufff7" +
    "\006\007\007\006\010\005\011\ufff7\012\020\015\ufff7\016" +
    "\ufff7\017\016\020\015\022\013\023\023\024\012\026\010" +
    "\027\ufff7\030\011\032\014\001\002\000\044\002\ufffb\006" +
    "\007\007\006\010\005\011\ufffb\012\020\015\ufffb\016\ufffb" +
    "\017\016\020\015\022\013\023\023\024\012\026\010\027" +
    "\ufffb\030\011\032\014\001\002\000\034\006\007\007\006" +
    "\010\005\011\050\012\020\017\016\020\015\022\013\023" +
    "\023\024\012\026\010\030\011\032\014\001\002\000\044" +
    "\002\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\015" +
    "\ufff2\016\ufff2\017\ufff2\020\ufff2\022\ufff2\023\ufff2\024\ufff2" +
    "\026\ufff2\027\ufff2\030\ufff2\032\ufff2\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\004\002\003\001\001\000\004\002\020\001" +
    "\001\000\004\002\046\001\001\000\002\001\001\000\004" +
    "\002\045\001\001\000\004\002\044\001\001\000\002\001" +
    "\001\000\004\002\043\001\001\000\004\002\042\001\001" +
    "\000\002\001\001\000\004\002\016\001\001\000\002\001" +
    "\001\000\004\002\020\001\001\000\004\002\030\001\001" +
    "\000\004\002\020\001\001\000\004\002\024\001\001\000" +
    "\004\002\023\001\001\000\004\002\020\001\001\000\004" +
    "\002\020\001\001\000\004\002\026\001\001\000\004\002" +
    "\020\001\001\000\002\001\001\000\004\002\020\001\001" +
    "\000\004\005\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\041\001\001\000\004\002" +
    "\020\001\001\000\004\002\020\001\001\000\004\002\020" +
    "\001\001\000\004\002\020\001\001\000\004\002\020\001" +
    "\001\000\004\002\020\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public Sample.Absyn.Expr pExpr() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (Sample.Absyn.Expr) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Expr EOF 
            {
              Object RESULT =null;
		Sample.Absyn.Expr start_val = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Expr ::= _IDENT_ 
            {
              Sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Vary(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Expr ::= _SYMB_20 
            {
              Sample.Absyn.Expr RESULT =null;
		 RESULT = new Sample.Absyn.ConstTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Expr ::= _SYMB_11 
            {
              Sample.Absyn.Expr RESULT =null;
		 RESULT = new Sample.Absyn.ConstFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Expr ::= _SYMB_12 Expr _SYMB_19 Expr _SYMB_9 Expr _SYMB_10 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Sample.Absyn.Expr p_4 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Sample.Absyn.Expr p_6 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Sample.Absyn.If(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Expr ::= _IDENT_ _SYMB_0 Type _SYMB_1 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Sample.Absyn.Type p_3 = (Sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Expr p_5 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Binding(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Expr ::= _SYMB_2 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Not(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Expr ::= Expr _SYMB_6 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Expr p_3 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.And(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expr ::= Expr _SYMB_15 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Expr p_3 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Or(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expr ::= _SYMB_3 
            {
              Sample.Absyn.Expr RESULT =null;
		 RESULT = new Sample.Absyn.ConstZero(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expr ::= _SYMB_18 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Succ(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expr ::= _SYMB_16 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Pred(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expr ::= _SYMB_14 Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.IsZero(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expr ::= _IDENT_ 
            {
              Sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Var(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expr ::= Expr Expr 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_1 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Application(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expr ::= _SYMB_4 Expr _SYMB_5 
            {
              Sample.Absyn.Expr RESULT =null;
		Sample.Absyn.Expr p_2 = (Sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Assignment_op ::= _SYMB_1 
            {
              Sample.Absyn.Assignment_op RESULT =null;
		 RESULT = new Sample.Absyn.Assign(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assignment_op",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Dec ::= _IDENT_ _SYMB_0 Type 
            {
              Sample.Absyn.Dec RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Type p_3 = (Sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.Declarators(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= _SYMB_17 
            {
              Sample.Absyn.Type RESULT =null;
		 RESULT = new Sample.Absyn.StringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= _SYMB_7 
            {
              Sample.Absyn.Type RESULT =null;
		 RESULT = new Sample.Absyn.BoolType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= _SYMB_21 
            {
              Sample.Absyn.Type RESULT =null;
		 RESULT = new Sample.Absyn.UnitType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Type ::= _SYMB_13 
            {
              Sample.Absyn.Type RESULT =null;
		 RESULT = new Sample.Absyn.IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Type ::= _SYMB_8 
            {
              Sample.Absyn.Type RESULT =null;
		 RESULT = new Sample.Absyn.DoubleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FieldTypeExpr ::= _IDENT_ _SYMB_0 Type 
            {
              Sample.Absyn.FieldTypeExpr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Sample.Absyn.Type p_3 = (Sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sample.Absyn.FieldType(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldTypeExpr",4, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
