// -*- Java -*- This Cup file was machine-generated by BNFC
package Sample;

parser code {:
  public Sample.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (Sample.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal Sample.Absyn.Program Program;
nonterminal Sample.Absyn.ListExpr ListExpr;
nonterminal Sample.Absyn.Expr Expr;
nonterminal Sample.Absyn.Type Type;
nonterminal Sample.Absyn.Expr Expr2;
nonterminal Sample.Absyn.Dec Dec;
nonterminal Sample.Absyn.Expr Expr1;

terminal _SYMB_0;    //   ;
terminal _SYMB_1;    //   !
terminal _SYMB_2;    //   0
terminal _SYMB_3;    //   :
terminal _SYMB_4;    //   =
terminal _SYMB_5;    //   (
terminal _SYMB_6;    //   )
terminal _SYMB_7;    //   and
terminal _SYMB_8;    //   boolean
terminal _SYMB_9;    //   double
terminal _SYMB_10;    //   else
terminal _SYMB_11;    //   end
terminal _SYMB_12;    //   false
terminal _SYMB_13;    //   if
terminal _SYMB_14;    //   integer
terminal _SYMB_15;    //   iszero
terminal _SYMB_16;    //   local
terminal _SYMB_17;    //   or
terminal _SYMB_18;    //   pred
terminal _SYMB_19;    //   string
terminal _SYMB_20;    //   succ
terminal _SYMB_21;    //   then
terminal _SYMB_22;    //   true
terminal _SYMB_23;    //   void

terminal String _STRING_;

terminal Integer _INTEGER_;
terminal Double _DOUBLE_;
terminal String _IDENT_;



start with Program;


Program ::= ListExpr:p_1  {: RESULT = new Sample.Absyn.ProgramExprs(p_1); :} 
;
ListExpr ::=  /* empty */  {: RESULT = new Sample.Absyn.ListExpr(); :} 
  | Expr:p_1  {: RESULT = new Sample.Absyn.ListExpr(); RESULT.addLast(p_1); :}
  | Expr:p_1 _SYMB_0 ListExpr:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Expr ::= _IDENT_:p_1  {: RESULT = new Sample.Absyn.Var(p_1); :} 
  | _SYMB_22  {: RESULT = new Sample.Absyn.ConstTrue(); :}
  | _SYMB_12  {: RESULT = new Sample.Absyn.ConstFalse(); :}
  | _SYMB_13 Expr:p_2 _SYMB_21 Expr:p_4 _SYMB_10 Expr:p_6 _SYMB_11  {: RESULT = new Sample.Absyn.If(p_2,p_4,p_6); :}
  | _SYMB_1 Expr:p_2  {: RESULT = new Sample.Absyn.Not(p_2); :}
  | Expr:p_1 _SYMB_7 Expr:p_3  {: RESULT = new Sample.Absyn.And(p_1,p_3); :}
  | Expr:p_1 _SYMB_17 Expr:p_3  {: RESULT = new Sample.Absyn.Or(p_1,p_3); :}
  | _SYMB_2  {: RESULT = new Sample.Absyn.ConstZero(); :}
  | _SYMB_20 Expr:p_2  {: RESULT = new Sample.Absyn.Succ(p_2); :}
  | _SYMB_18 Expr:p_2  {: RESULT = new Sample.Absyn.Pred(p_2); :}
  | _SYMB_15 Expr:p_2  {: RESULT = new Sample.Absyn.IsZero(p_2); :}
  | _SYMB_5 Expr:p_2 _SYMB_6  {: RESULT = p_2; :}
  | Expr1:p_1  {: RESULT = p_1; :}
;
Type ::= _SYMB_19  {: RESULT = new Sample.Absyn.StringType(); :} 
  | _SYMB_8  {: RESULT = new Sample.Absyn.BoolType(); :}
  | _SYMB_23  {: RESULT = new Sample.Absyn.UnitType(); :}
  | _SYMB_14  {: RESULT = new Sample.Absyn.IntType(); :}
  | _SYMB_9  {: RESULT = new Sample.Absyn.DoubleType(); :}
;
Expr2 ::= _INTEGER_:p_1  {: RESULT = new Sample.Absyn.EInt(p_1); :} 
  | _DOUBLE_:p_1  {: RESULT = new Sample.Absyn.EDouble(p_1); :}
  | _STRING_:p_1  {: RESULT = new Sample.Absyn.EStr(p_1); :}
;
Dec ::= _IDENT_:p_1 _SYMB_3 Type:p_3  {: RESULT = new Sample.Absyn.Declaration(p_1,p_3); :} 
  | _SYMB_16 _IDENT_:p_2 _SYMB_3 Type:p_4  {: RESULT = new Sample.Absyn.LocalVarDeclaration(p_2,p_4); :}
;
Expr1 ::= Dec:p_1  {: RESULT = new Sample.Absyn.OnlyDecl(p_1); :} 
  | Dec:p_1 _SYMB_4 Expr:p_3  {: RESULT = new Sample.Absyn.InitDecl(p_1,p_3); :}
  | Expr2:p_1  {: RESULT = p_1; :}
;

