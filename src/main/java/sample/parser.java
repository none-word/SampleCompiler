
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sample;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\003\000\002\003\005\000\002\003\002" +
    "\000\002\003\003\000\002\003\005\000\002\004\004\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\011\000\002\004\006\000\002\004\013\000\002\004" +
    "\013\000\002\004\013\000\002\004\013\000\002\004\004" +
    "\000\002\004\003\000\002\004\005\000\002\004\004\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\003\000\002\005\003\000\002\006\003\000\002\007" +
    "\002\000\002\007\003\000\002\007\005\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\011\005\000\002" +
    "\012\003\000\002\013\004\000\002\014\006\000\002\014" +
    "\007\000\002\014\012\000\002\014\003\000\002\015\006" +
    "\000\002\016\006\000\002\016\007\000\002\016\012\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\020\005\000\002\020\005\000\002\021" +
    "\006\000\002\021\006\000\002\022\003\000\002\022\003" +
    "\000\002\022\005\000\002\022\005\000\002\022\011\000" +
    "\002\022\011\000\002\022\011\000\002\022\011\000\002" +
    "\022\005\000\002\022\007\000\002\022\005\000\002\022" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\040\002\uffff\006\023\015\022\024\017\025" +
    "\016\026\015\027\014\030\031\032\027\034\025\040\024" +
    "\044\005\045\004\046\021\047\006\001\002\000\026\002" +
    "\uffd1\004\uffd1\005\uffd1\007\uffd1\013\uffd1\017\uffd1\022\uffd1" +
    "\023\uffd1\033\uffd1\037\uffd1\001\002\000\026\002\uffcf\004" +
    "\uffcf\005\uffcf\007\uffcf\013\uffcf\017\uffcf\022\uffcf\023\uffcf" +
    "\033\uffcf\037\uffcf\001\002\000\036\002\ufff8\004\ufff8\005" +
    "\ufff8\006\105\007\ufff8\010\104\013\ufff8\014\110\016\102" +
    "\017\ufff8\022\ufff8\023\ufff8\033\ufff8\037\ufff8\001\002\000" +
    "\026\002\uffd6\004\uffd6\005\uffd6\007\uffd6\013\uffd6\017\uffd6" +
    "\022\uffd6\023\uffd6\033\uffd6\037\uffd6\001\002\000\026\002" +
    "\uffbe\004\uffbe\005\uffbe\007\uffbe\013\uffbe\017\uffbe\022\uffbe" +
    "\023\uffbe\033\uffbe\037\uffbe\001\002\000\026\002\uffce\004" +
    "\uffce\005\uffce\007\uffce\013\uffce\017\uffce\022\uffce\023\uffce" +
    "\033\uffce\037\uffce\001\002\000\026\002\uffe8\004\uffe8\005" +
    "\uffe8\007\uffe8\013\uffe8\017\uffe8\022\uffe8\023\uffe8\033\uffe8" +
    "\037\uffe8\001\002\000\004\014\221\001\002\000\036\006" +
    "\023\015\022\024\017\025\016\026\015\027\014\030\031" +
    "\032\027\034\025\040\024\044\005\045\004\046\021\047" +
    "\006\001\002\000\004\047\201\001\002\000\004\047\157" +
    "\001\002\000\026\002\ufff6\004\ufff6\005\ufff6\007\ufff6\013" +
    "\ufff6\017\ufff6\022\ufff6\023\ufff6\033\ufff6\037\ufff6\001\002" +
    "\000\024\002\ufffe\004\154\005\153\007\ufffe\013\ufffe\017" +
    "\076\022\ufffe\023\ufffe\033\077\001\002\000\026\002\uffd0" +
    "\004\uffd0\005\uffd0\007\uffd0\013\uffd0\017\uffd0\022\uffd0\023" +
    "\uffd0\033\uffd0\037\uffd0\001\002\000\036\006\023\015\022" +
    "\024\017\025\016\026\015\027\014\030\031\032\027\034" +
    "\025\040\024\044\005\045\004\046\021\047\006\001\002" +
    "\000\040\006\023\007\uffe5\015\022\024\017\025\016\026" +
    "\015\027\014\030\031\032\027\034\025\040\024\044\005" +
    "\045\004\046\021\047\006\001\002\000\026\002\ufff7\004" +
    "\ufff7\005\ufff7\007\ufff7\013\ufff7\017\ufff7\022\ufff7\023\ufff7" +
    "\033\ufff7\037\ufff7\001\002\000\036\006\023\015\022\024" +
    "\017\025\016\026\015\027\014\030\031\032\027\034\025" +
    "\040\024\044\005\045\004\046\021\047\006\001\002\000" +
    "\012\002\000\013\000\022\000\023\000\001\002\000\026" +
    "\002\uffee\004\uffee\005\uffee\007\uffee\013\uffee\017\uffee\022" +
    "\uffee\023\uffee\033\uffee\037\uffee\001\002\000\030\002\uffc8" +
    "\004\uffc8\005\uffc8\007\uffc8\013\uffc8\014\135\017\uffc8\022" +
    "\uffc8\023\uffc8\033\uffc8\037\uffc8\001\002\000\004\047\134" +
    "\001\002\000\030\002\uffc9\004\uffc9\005\uffc9\007\uffc9\013" +
    "\uffc9\014\035\017\uffc9\022\uffc9\023\uffc9\033\uffc9\037\uffc9" +
    "\001\002\000\004\002\034\001\002\000\004\002\001\001" +
    "\002\000\036\006\037\015\022\024\017\025\016\026\015" +
    "\027\014\030\031\032\027\034\025\040\024\044\005\045" +
    "\004\046\021\047\006\001\002\000\026\002\uffc7\004\uffc7" +
    "\005\uffc7\007\uffc7\013\uffc7\017\076\022\uffc7\023\uffc7\033" +
    "\077\037\uffc7\001\002\000\040\006\023\007\uffe5\015\022" +
    "\024\017\025\016\026\015\027\014\030\031\032\027\034" +
    "\025\040\024\044\005\045\004\046\021\047\040\001\002" +
    "\000\022\005\106\006\105\007\ufff8\010\104\014\110\016" +
    "\102\017\ufff8\033\ufff8\001\002\000\010\007\075\017\076" +
    "\033\077\001\002\000\004\007\065\001\002\000\004\007" +
    "\uffe6\001\002\000\014\005\045\007\uffe4\014\035\017\uffc9" +
    "\033\uffc9\001\002\000\006\007\uffe5\047\046\001\002\000" +
    "\004\010\054\001\002\000\006\005\052\007\051\001\002" +
    "\000\004\007\uffe3\001\002\000\026\002\uffc3\004\uffc3\005" +
    "\uffc3\007\uffc3\013\uffc3\017\uffc3\022\uffc3\023\uffc3\033\uffc3" +
    "\037\uffc3\001\002\000\006\007\uffe5\047\046\001\002\000" +
    "\006\005\052\007\uffe4\001\002\000\020\020\064\021\063" +
    "\031\055\035\062\036\061\043\057\047\060\001\002\000" +
    "\064\002\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\013\uffe0" +
    "\014\uffe0\015\uffe0\017\uffe0\022\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\037\uffe0\040\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\001" +
    "\002\000\030\002\uffcd\004\uffcd\005\uffcd\007\uffcd\013\uffcd" +
    "\014\uffcd\017\uffcd\022\uffcd\023\uffcd\033\uffcd\037\uffcd\001" +
    "\002\000\064\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\017\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\037\uffdd\040\uffdd\044\uffdd\045\uffdd\046\uffdd\047" +
    "\uffdd\001\002\000\030\002\uffcc\004\uffcc\005\uffcc\007\uffcc" +
    "\013\uffcc\014\uffcc\017\uffcc\022\uffcc\023\uffcc\033\uffcc\037" +
    "\uffcc\001\002\000\064\002\uffde\004\uffde\005\uffde\006\uffde" +
    "\007\uffde\013\uffde\014\uffde\015\uffde\017\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\032\uffde" +
    "\033\uffde\034\uffde\037\uffde\040\uffde\044\uffde\045\uffde\046" +
    "\uffde\047\uffde\001\002\000\064\002\uffe2\004\uffe2\005\uffe2" +
    "\006\uffe2\007\uffe2\013\uffe2\014\uffe2\015\uffe2\017\uffe2\022" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\037\uffe2\040\uffe2\044\uffe2\045" +
    "\uffe2\046\uffe2\047\uffe2\001\002\000\064\002\uffdf\004\uffdf" +
    "\005\uffdf\006\uffdf\007\uffdf\013\uffdf\014\uffdf\015\uffdf\017" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\030\uffdf\032\uffdf\033\uffdf\034\uffdf\037\uffdf\040\uffdf\044" +
    "\uffdf\045\uffdf\046\uffdf\047\uffdf\001\002\000\064\002\uffe1" +
    "\004\uffe1\005\uffe1\006\uffe1\007\uffe1\013\uffe1\014\uffe1\015" +
    "\uffe1\017\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1" +
    "\027\uffe1\030\uffe1\032\uffe1\033\uffe1\034\uffe1\037\uffe1\040" +
    "\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\001\002\000\004" +
    "\011\066\001\002\000\004\012\067\001\002\000\040\006" +
    "\023\013\uffff\015\022\024\017\025\016\026\015\027\014" +
    "\030\031\032\027\034\025\040\024\044\005\045\004\046" +
    "\021\047\006\001\002\000\004\013\071\001\002\000\004" +
    "\010\072\001\002\000\020\020\064\021\063\031\055\035" +
    "\062\036\061\043\057\047\074\001\002\000\026\002\ufff1" +
    "\004\ufff1\005\ufff1\007\ufff1\013\ufff1\017\ufff1\022\ufff1\023" +
    "\ufff1\033\ufff1\037\ufff1\001\002\000\026\002\ufff0\004\ufff0" +
    "\005\ufff0\007\ufff0\013\ufff0\017\ufff0\022\ufff0\023\ufff0\033" +
    "\ufff0\037\ufff0\001\002\000\026\002\uffe9\004\uffe9\005\uffe9" +
    "\007\uffe9\013\uffe9\017\uffe9\022\uffe9\023\uffe9\033\uffe9\037" +
    "\uffe9\001\002\000\036\006\023\015\022\024\017\025\016" +
    "\026\015\027\014\030\031\032\027\034\025\040\024\044" +
    "\005\045\004\046\021\047\006\001\002\000\036\006\023" +
    "\015\022\024\017\025\016\026\015\027\014\030\031\032" +
    "\027\034\025\040\024\044\005\045\004\046\021\047\006" +
    "\001\002\000\026\002\uffea\004\uffea\005\uffea\007\uffea\013" +
    "\uffea\017\076\022\uffea\023\uffea\033\077\037\uffea\001\002" +
    "\000\026\002\uffeb\004\uffeb\005\uffeb\007\uffeb\013\uffeb\017" +
    "\076\022\uffeb\023\uffeb\033\077\037\uffeb\001\002\000\004" +
    "\047\131\001\002\000\004\014\127\001\002\000\024\020" +
    "\064\021\063\031\055\035\062\036\061\041\124\042\126" +
    "\043\057\047\060\001\002\000\040\006\023\007\uffff\015" +
    "\022\024\017\025\016\026\015\027\014\030\031\032\027" +
    "\034\025\040\024\044\005\045\004\046\021\047\006\001" +
    "\002\000\004\047\117\001\002\000\006\006\112\014\113" +
    "\001\002\000\036\006\023\015\022\024\017\025\016\026" +
    "\015\027\014\030\031\032\027\034\025\040\024\044\005" +
    "\045\004\046\021\047\006\001\002\000\026\002\uffbf\004" +
    "\uffbf\005\uffbf\007\uffbf\013\uffbf\017\076\022\uffbf\023\uffbf" +
    "\033\077\037\uffbf\001\002\000\016\020\064\021\063\031" +
    "\055\035\062\036\061\043\057\001\002\000\036\006\023" +
    "\015\022\024\017\025\016\026\015\027\014\030\031\032" +
    "\027\034\025\040\024\044\005\045\004\046\021\047\006" +
    "\001\002\000\026\002\uffd9\004\uffd9\005\uffd9\007\uffd9\013" +
    "\uffd9\017\076\022\uffd9\023\uffd9\033\077\037\uffd9\001\002" +
    "\000\004\007\116\001\002\000\042\006\uffd5\014\uffd5\015" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\032\uffd5\034\uffd5\040\uffd5\044\uffd5\045\uffd5\046\uffd5\047" +
    "\uffd5\001\002\000\004\007\120\001\002\000\026\002\uffc5" +
    "\004\uffc5\005\uffc5\007\uffc5\013\uffc5\017\uffc5\022\uffc5\023" +
    "\uffc5\033\uffc5\037\uffc5\001\002\000\004\007\123\001\002" +
    "\000\004\007\uffe7\001\002\000\026\002\ufff4\004\ufff4\005" +
    "\ufff4\007\ufff4\013\ufff4\017\ufff4\022\ufff4\023\ufff4\033\ufff4" +
    "\037\ufff4\001\002\000\004\014\uffdc\001\002\000\042\006" +
    "\uffda\014\uffda\015\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\032\uffda\034\uffda\040\uffda\044\uffda\045" +
    "\uffda\046\uffda\047\uffda\001\002\000\042\006\uffdb\014\uffdb" +
    "\015\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\032\uffdb\034\uffdb\040\uffdb\044\uffdb\045\uffdb\046\uffdb" +
    "\047\uffdb\001\002\000\036\006\023\015\022\024\017\025" +
    "\016\026\015\027\014\030\031\032\027\034\025\040\024" +
    "\044\005\045\004\046\021\047\006\001\002\000\026\002" +
    "\uffd4\004\uffd4\005\uffd4\007\uffd4\013\uffd4\017\076\022\uffd4" +
    "\023\uffd4\033\077\037\uffd4\001\002\000\030\002\uffc1\004" +
    "\uffc1\005\uffc1\007\uffc1\013\uffc1\014\132\017\uffc1\022\uffc1" +
    "\023\uffc1\033\uffc1\037\uffc1\001\002\000\036\006\023\015" +
    "\022\024\017\025\016\026\015\027\014\030\031\032\027" +
    "\034\025\040\024\044\005\045\004\046\021\047\006\001" +
    "\002\000\026\002\uffc0\004\uffc0\005\uffc0\007\uffc0\013\uffc0" +
    "\017\076\022\uffc0\023\uffc0\033\077\037\uffc0\001\002\000" +
    "\026\002\ufff9\004\ufff9\005\ufff9\007\ufff9\013\ufff9\017\ufff9" +
    "\022\ufff9\023\ufff9\033\ufff9\037\ufff9\001\002\000\036\006" +
    "\137\015\022\024\017\025\016\026\015\027\014\030\031" +
    "\032\027\034\025\040\024\044\005\045\004\046\021\047" +
    "\006\001\002\000\026\002\uffc6\004\uffc6\005\uffc6\007\uffc6" +
    "\013\uffc6\017\076\022\uffc6\023\uffc6\033\077\037\uffc6\001" +
    "\002\000\040\006\023\007\uffe5\015\022\024\017\025\016" +
    "\026\015\027\014\030\031\032\027\034\025\040\024\044" +
    "\005\045\004\046\021\047\140\001\002\000\022\005\145" +
    "\006\105\007\ufff8\010\104\014\110\016\102\017\ufff8\033" +
    "\ufff8\001\002\000\014\005\142\007\uffe4\014\035\017\uffc9" +
    "\033\uffc9\001\002\000\006\007\uffe5\047\046\001\002\000" +
    "\006\005\052\007\144\001\002\000\026\002\uffc2\004\uffc2" +
    "\005\uffc2\007\uffc2\013\uffc2\017\uffc2\022\uffc2\023\uffc2\033" +
    "\uffc2\037\uffc2\001\002\000\004\047\146\001\002\000\004" +
    "\007\147\001\002\000\026\002\uffc4\004\uffc4\005\uffc4\007" +
    "\uffc4\013\uffc4\017\uffc4\022\uffc4\023\uffc4\033\uffc4\037\uffc4" +
    "\001\002\000\026\002\uffef\004\uffef\005\uffef\007\uffef\013" +
    "\uffef\017\076\022\uffef\023\uffef\033\077\037\uffef\001\002" +
    "\000\014\005\052\007\uffe4\014\035\017\uffc9\033\uffc9\001" +
    "\002\000\026\002\uffec\004\uffec\005\uffec\007\uffec\013\uffec" +
    "\017\076\022\uffec\023\uffec\033\077\037\uffec\001\002\000" +
    "\050\002\uffff\006\023\007\uffff\013\uffff\015\022\022\uffff" +
    "\023\uffff\024\017\025\016\026\015\027\014\030\031\032" +
    "\027\034\025\040\024\044\005\045\004\046\021\047\006" +
    "\001\002\000\050\002\uffff\006\023\007\uffff\013\uffff\015" +
    "\022\022\uffff\023\uffff\024\017\025\016\026\015\027\014" +
    "\030\031\032\027\034\025\040\024\044\005\045\004\046" +
    "\021\047\006\001\002\000\014\002\ufffd\007\ufffd\013\ufffd" +
    "\022\ufffd\023\ufffd\001\002\000\014\002\ufffa\007\ufffa\013" +
    "\ufffa\022\ufffa\023\ufffa\001\002\000\004\006\160\001\002" +
    "\000\006\007\uffe5\047\046\001\002\000\004\007\162\001" +
    "\002\000\004\010\164\001\002\000\040\006\023\015\022" +
    "\023\uffff\024\017\025\016\026\015\027\014\030\031\032" +
    "\027\034\025\040\024\044\005\045\004\046\021\047\006" +
    "\001\002\000\022\020\064\021\063\031\055\035\062\036" +
    "\061\042\126\043\057\047\172\001\002\000\040\006\166" +
    "\015\022\023\uffff\024\017\025\016\026\015\027\014\030" +
    "\031\032\027\034\025\040\024\044\005\045\004\046\021" +
    "\047\006\001\002\000\054\006\023\007\uffe5\015\022\020" +
    "\064\021\063\024\017\025\016\026\015\027\014\030\031" +
    "\031\055\032\027\034\025\035\062\036\061\040\024\043" +
    "\057\044\005\045\004\046\021\047\006\001\002\000\004" +
    "\023\170\001\002\000\026\002\uffd7\004\uffd7\005\uffd7\007" +
    "\uffd7\013\uffd7\017\uffd7\022\uffd7\023\uffd7\033\uffd7\037\uffd7" +
    "\001\002\000\040\006\023\015\022\023\uffff\024\017\025" +
    "\016\026\015\027\014\030\031\032\027\034\025\040\024" +
    "\044\005\045\004\046\021\047\006\001\002\000\040\006" +
    "\023\015\022\023\uffff\024\017\025\016\026\015\027\014" +
    "\030\031\032\027\034\025\040\024\044\005\045\004\046" +
    "\021\047\006\001\002\000\004\023\174\001\002\000\026" +
    "\002\ufff2\004\ufff2\005\ufff2\007\ufff2\013\ufff2\017\ufff2\022" +
    "\ufff2\023\ufff2\033\ufff2\037\ufff2\001\002\000\004\023\176" +
    "\001\002\000\026\002\ufff3\004\ufff3\005\ufff3\007\ufff3\013" +
    "\ufff3\017\ufff3\022\ufff3\023\ufff3\033\ufff3\037\ufff3\001\002" +
    "\000\004\023\200\001\002\000\026\002\uffd2\004\uffd2\005" +
    "\uffd2\007\uffd2\013\uffd2\017\uffd2\022\uffd2\023\uffd2\033\uffd2" +
    "\037\uffd2\001\002\000\004\010\202\001\002\000\022\020" +
    "\064\021\063\031\055\035\062\036\061\042\126\043\057" +
    "\047\212\001\002\000\004\014\207\001\002\000\006\006" +
    "\112\014\205\001\002\000\036\006\023\015\022\024\017" +
    "\025\016\026\015\027\014\030\031\032\027\034\025\040" +
    "\024\044\005\045\004\046\021\047\006\001\002\000\026" +
    "\002\uffd8\004\uffd8\005\uffd8\007\uffd8\013\uffd8\017\076\022" +
    "\uffd8\023\uffd8\033\077\037\uffd8\001\002\000\036\006\023" +
    "\015\022\024\017\025\016\026\015\027\014\030\031\032" +
    "\027\034\025\040\024\044\005\045\004\046\021\047\006" +
    "\001\002\000\026\002\uffd3\004\uffd3\005\uffd3\007\uffd3\013" +
    "\uffd3\017\076\022\uffd3\023\uffd3\033\077\037\uffd3\001\002" +
    "\000\030\002\uffcb\004\uffcb\005\uffcb\007\uffcb\013\uffcb\014" +
    "\uffcb\017\uffcb\022\uffcb\023\uffcb\033\uffcb\037\uffcb\001\002" +
    "\000\030\002\uffca\004\uffca\005\uffca\007\uffca\013\uffca\014" +
    "\uffca\017\uffca\022\uffca\023\uffca\033\uffca\037\uffca\001\002" +
    "\000\010\017\076\033\077\037\214\001\002\000\040\006" +
    "\023\015\022\022\uffff\024\017\025\016\026\015\027\014" +
    "\030\031\032\027\034\025\040\024\044\005\045\004\046" +
    "\021\047\006\001\002\000\004\022\216\001\002\000\040" +
    "\006\023\015\022\023\uffff\024\017\025\016\026\015\027" +
    "\014\030\031\032\027\034\025\040\024\044\005\045\004" +
    "\046\021\047\006\001\002\000\004\023\220\001\002\000" +
    "\026\002\ufff5\004\ufff5\005\ufff5\007\ufff5\013\ufff5\017\ufff5" +
    "\022\ufff5\023\ufff5\033\ufff5\037\ufff5\001\002\000\016\020" +
    "\064\021\063\031\055\035\062\036\061\043\057\001\002" +
    "\000\026\002\uffed\004\uffed\005\uffed\007\uffed\013\uffed\017" +
    "\uffed\022\uffed\023\uffed\033\uffed\037\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\026\002\032\003\025\004\017\011\012\014" +
    "\007\016\006\017\011\020\031\021\027\022\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\106\015" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\212\011\012\014\007\016\006\017\011\020\031\021\027" +
    "\022\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\151\011\012\014\007\016\006\017\011\020\031\021" +
    "\027\022\010\001\001\000\026\004\040\006\041\007\042" +
    "\011\012\014\007\016\006\017\011\020\150\021\027\022" +
    "\010\001\001\000\002\001\001\000\022\004\147\011\012" +
    "\014\007\016\006\017\011\020\031\021\027\022\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\035\011\012\014\007\016\006" +
    "\017\011\020\031\021\027\022\010\001\001\000\002\001" +
    "\001\000\026\004\040\006\041\007\042\011\012\014\007" +
    "\016\006\017\011\020\043\021\027\022\010\001\001\000" +
    "\006\013\106\015\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\047\020\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\047\020" +
    "\052\001\001\000\002\001\001\000\004\010\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\002\067\003\025\004\017\011\012\014\007" +
    "\016\006\017\011\020\031\021\027\022\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\100\011\012\014\007\016\006\017\011\020\031" +
    "\021\027\022\010\001\001\000\022\004\077\011\012\014" +
    "\007\016\006\017\011\020\031\021\027\022\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\055\012\124\001\001\000\026" +
    "\003\121\004\017\005\120\011\012\014\007\016\006\017" +
    "\011\020\031\021\027\022\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\110\011\012\014\007\016" +
    "\006\017\011\020\031\021\027\022\010\001\001\000\002" +
    "\001\001\000\004\010\114\001\001\000\022\004\113\011" +
    "\012\014\007\016\006\017\011\020\031\021\027\022\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\127\011\012" +
    "\014\007\016\006\017\011\020\031\021\027\022\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\132" +
    "\011\012\014\007\016\006\017\011\020\031\021\027\022" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\135\011\012\014\007\016\006\017\011\020\031\021" +
    "\027\022\010\001\001\000\002\001\001\000\026\004\040" +
    "\006\041\007\042\011\012\014\007\016\006\017\011\020" +
    "\140\021\027\022\010\001\001\000\006\013\106\015\102" +
    "\001\001\000\002\001\001\000\006\007\047\020\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\155\004\017" +
    "\011\012\014\007\016\006\017\011\020\031\021\027\022" +
    "\010\001\001\000\024\003\154\004\017\011\012\014\007" +
    "\016\006\017\011\020\031\021\027\022\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\160\007\042\020\052\001\001\000\002\001\001\000" +
    "\006\013\164\015\162\001\001\000\026\002\176\003\025" +
    "\004\017\011\012\014\007\016\006\017\011\020\031\021" +
    "\027\022\010\001\001\000\006\010\170\012\124\001\001" +
    "\000\026\002\166\003\025\004\017\011\012\014\007\016" +
    "\006\017\011\020\031\021\027\022\010\001\001\000\030" +
    "\004\040\006\041\007\042\010\114\011\012\014\007\016" +
    "\006\017\011\020\150\021\027\022\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\002\174\003\025\004" +
    "\017\011\012\014\007\016\006\017\011\020\031\021\027" +
    "\022\010\001\001\000\026\002\172\003\025\004\017\011" +
    "\012\014\007\016\006\017\011\020\031\021\027\022\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\203\015\202\001\001\000\006\010\210\012" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\205\011\012\014\007\016\006\017\011\020\031\021" +
    "\027\022\010\001\001\000\002\001\001\000\022\004\207" +
    "\011\012\014\007\016\006\017\011\020\031\021\027\022" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\002\214\003\025\004" +
    "\017\011\012\014\007\016\006\017\011\020\031\021\027" +
    "\022\010\001\001\000\002\001\001\000\026\002\216\003" +
    "\025\004\017\011\012\014\007\016\006\017\011\020\031" +
    "\021\027\022\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\221\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public sample.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (sample.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		sample.Absyn.Program start_val = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListExpr 
            {
              sample.Absyn.Program RESULT =null;
		sample.Absyn.ListExpr p_1 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ProgramExprs(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListExpr ::= 
            {
              sample.Absyn.ListExpr RESULT =null;
		 RESULT = new sample.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListExpr ::= Expr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListExpr ::= Expr _SYMB_0 ListExpr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.ListExpr p_3 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListExpr ::= 
            {
              sample.Absyn.ListExpr RESULT =null;
		 RESULT = new sample.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListExpr ::= Expr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListExpr ::= Expr _SYMB_1 ListExpr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.ListExpr p_3 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expr ::= _SYMB_20 _IDENT_ 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Import(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expr ::= _IDENT_ 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Var(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expr ::= _SYMB_28 
            {
              sample.Absyn.Expr RESULT =null;
		 RESULT = new sample.Absyn.ConstTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expr ::= _SYMB_16 
            {
              sample.Absyn.Expr RESULT =null;
		 RESULT = new sample.Absyn.ConstFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expr ::= _SYMB_19 Expr _SYMB_27 Program _SYMB_14 Program _SYMB_15 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		sample.Absyn.Program p_4 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Program p_6 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.If(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expr ::= _IDENT_ _SYMB_2 ComaExprs _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.ComaExprs p_3 = (sample.Absyn.ComaExprs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.FuncCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expr ::= _SYMB_17 _IDENT_ _SYMB_2 FArgs _SYMB_3 _SYMB_4 Type Program _SYMB_15 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		sample.Absyn.FArgs p_4 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		sample.Absyn.Type p_7 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Program p_8 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.Func(p_2,p_4,p_7,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expr ::= _SYMB_17 _IDENT_ _SYMB_2 FArgs _SYMB_3 _SYMB_4 _IDENT_ Program _SYMB_15 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		sample.Absyn.FArgs p_4 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Program p_8 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.TypeAlFunc(p_2,p_4,p_7,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expr ::= _SYMB_2 FArgs _SYMB_3 _SYMB_5 _SYMB_6 Program _SYMB_7 _SYMB_4 Type 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.FArgs p_2 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		sample.Absyn.Program p_6 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Type p_9 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.AnonymFunc(p_2,p_6,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expr ::= _SYMB_2 FArgs _SYMB_3 _SYMB_5 _SYMB_6 Program _SYMB_7 _SYMB_4 _IDENT_ 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.FArgs p_2 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		sample.Absyn.Program p_6 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String p_9 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TypeAlAnonymFunc(p_2,p_6,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expr ::= _SYMB_24 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Return(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expr ::= _SYMB_22 
            {
              sample.Absyn.Expr RESULT =null;
		 RESULT = new sample.Absyn.NilKeyword(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expr ::= TypeAl _SYMB_8 Type 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.TypeAl p_1 = (sample.Absyn.TypeAl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Type p_3 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TypeAliasing(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expr ::= _SYMB_9 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Not(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expr ::= Expr _SYMB_11 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.And(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expr ::= Expr _SYMB_23 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Or(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expr ::= _SYMB_2 Expr _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expr ::= Expr1 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ComaExprs ::= ListExpr 
            {
              sample.Absyn.ComaExprs RESULT =null;
		sample.Absyn.ListExpr p_1 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Vars(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComaExprs",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FArgs ::= ListDec 
            {
              sample.Absyn.FArgs RESULT =null;
		sample.Absyn.ListDec p_1 = (sample.Absyn.ListDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.FuncArgs(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FArgs",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListDec ::= 
            {
              sample.Absyn.ListDec RESULT =null;
		 RESULT = new sample.Absyn.ListDec(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListDec ::= Dec 
            {
              sample.Absyn.ListDec RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ListDec(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ListDec ::= Dec _SYMB_1 ListDec 
            {
              sample.Absyn.ListDec RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.ListDec p_3 = (sample.Absyn.ListDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Type ::= _SYMB_25 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.StringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Type ::= _SYMB_12 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.BoolType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Type ::= _SYMB_21 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Type ::= _SYMB_13 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.DoubleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Type ::= _SYMB_26 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.TableType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Type ::= _SYMB_31 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.VoidType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TypeAl ::= _IDENT_ _SYMB_4 _SYMB_29 
            {
              sample.Absyn.TypeAl RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new sample.Absyn.TypeAlIdent(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeAl",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VarKW ::= _SYMB_30 
            {
              sample.Absyn.VarKW RESULT =null;
		 RESULT = new sample.Absyn.VarKeyword(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarKW",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TAnnot ::= _SYMB_4 VarKW 
            {
              sample.Absyn.TAnnot RESULT =null;
		sample.Absyn.VarKW p_2 = (sample.Absyn.VarKW)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TypeAnnotation(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TAnnot",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr3 ::= _IDENT_ TAnnot _SYMB_8 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.TAnnot p_2 = (sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_4 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.VarTypeAnnotation(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr3 ::= _SYMB_18 _IDENT_ TAnnot _SYMB_8 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.TAnnot p_3 = (sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_5 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.GlVarTypeAnnotation(p_2,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr3 ::= _SYMB_17 _IDENT_ _SYMB_2 FArgs _SYMB_3 TAnnot Program _SYMB_15 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		sample.Absyn.FArgs p_4 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		sample.Absyn.TAnnot p_6 = (sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Program p_7 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.FuncTypeAnnotation(p_2,p_4,p_6,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expr3 ::= Expr4 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TAscript ::= TAnnot _SYMB_2 Type _SYMB_3 
            {
              sample.Absyn.TAscript RESULT =null;
		sample.Absyn.TAnnot p_1 = (sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Type p_3 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.TypeAscription(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TAscript",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expr4 ::= _IDENT_ TAscript _SYMB_8 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.TAscript p_2 = (sample.Absyn.TAscript)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_4 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.VarTypeAscription(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr4 ::= _SYMB_18 _IDENT_ TAscript _SYMB_8 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.TAscript p_3 = (sample.Absyn.TAscript)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_5 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.GlVarTypeAscription(p_2,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr4 ::= _SYMB_17 _IDENT_ _SYMB_2 FArgs _SYMB_3 TAscript Program _SYMB_15 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		sample.Absyn.FArgs p_4 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		sample.Absyn.TAscript p_6 = (sample.Absyn.TAscript)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Program p_7 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.FuncTypeAscription(p_2,p_4,p_6,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr1 ::= _INTEGER_ 
            {
              sample.Absyn.Expr RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.EInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr1 ::= _DOUBLE_ 
            {
              sample.Absyn.Expr RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.EDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr1 ::= _STRING_ 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.EStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr1 ::= Expr2 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Dec ::= _IDENT_ _SYMB_4 Type 
            {
              sample.Absyn.Dec RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Type p_3 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Declaration(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Dec ::= _IDENT_ _SYMB_4 _IDENT_ 
            {
              sample.Absyn.Dec RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TypeAlDecl(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // GlDec ::= _SYMB_18 _IDENT_ _SYMB_4 Type 
            {
              sample.Absyn.GlDec RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Type p_4 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.GlDeclaration(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GlDec",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // GlDec ::= _SYMB_18 _IDENT_ _SYMB_4 _IDENT_ 
            {
              sample.Absyn.GlDec RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TypeAlGlDec(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GlDec",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr2 ::= Dec 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.OnlyDecl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr2 ::= GlDec 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.GlDec p_1 = (sample.Absyn.GlDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.OnlyGlDecl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr2 ::= Dec _SYMB_8 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.InitDecl(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr2 ::= GlDec _SYMB_8 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.GlDec p_1 = (sample.Absyn.GlDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.InitGlDecl(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr2 ::= Dec _SYMB_8 _SYMB_2 _IDENT_ _SYMB_1 _IDENT_ _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String p_6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.TableDecl(p_1,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr2 ::= GlDec _SYMB_8 _SYMB_2 _IDENT_ _SYMB_1 _IDENT_ _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.GlDec p_1 = (sample.Absyn.GlDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String p_6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.GlTableDecl(p_1,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr2 ::= Dec _SYMB_8 _SYMB_2 Dec _SYMB_1 Dec _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		sample.Absyn.Dec p_4 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Dec p_6 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.InitTableDecl(p_1,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr2 ::= GlDec _SYMB_8 _SYMB_2 Dec _SYMB_1 Dec _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.GlDec p_1 = (sample.Absyn.GlDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		sample.Absyn.Dec p_4 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Dec p_6 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.InitGlTableDecl(p_1,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr2 ::= _IDENT_ _SYMB_10 _IDENT_ 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TableElementCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr2 ::= _IDENT_ _SYMB_10 _IDENT_ _SYMB_8 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_5 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TableElementAssignment(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr2 ::= _IDENT_ _SYMB_8 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Assignment(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr2 ::= Expr3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
