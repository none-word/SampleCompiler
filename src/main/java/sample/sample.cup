// -*- Java -*- This Cup file was machine-generated by BNFC
package sample;

parser code {:
  public sample.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (sample.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal sample.Absyn.Program Program;
nonterminal sample.Absyn.ListExpr ListExpr;
nonterminal sample.Absyn.Expr Expr;
nonterminal sample.Absyn.ComaExprs ComaExprs;
nonterminal sample.Absyn.FArgs FArgs;
nonterminal sample.Absyn.ListDec ListDec;
nonterminal sample.Absyn.Type Type;
nonterminal sample.Absyn.TypeKW TypeKW;
nonterminal sample.Absyn.Expr Expr3;
nonterminal sample.Absyn.VarKW VarKW;
nonterminal sample.Absyn.TAnnot TAnnot;
nonterminal sample.Absyn.TAscript TAscript;
nonterminal sample.Absyn.Expr Expr4;
nonterminal sample.Absyn.Expr Expr1;
nonterminal sample.Absyn.Dec Dec;
nonterminal sample.Absyn.GlDec GlDec;
nonterminal sample.Absyn.Expr Expr2;

terminal _SYMB_0;    //   ;
terminal _SYMB_1;    //   ,
terminal _SYMB_2;    //   (
terminal _SYMB_3;    //   )
terminal _SYMB_4;    //   :
terminal _SYMB_5;    //   =
terminal _SYMB_6;    //   !
terminal _SYMB_7;    //   0
terminal _SYMB_8;    //   .
terminal _SYMB_9;    //   and
terminal _SYMB_10;    //   boolean
terminal _SYMB_11;    //   double
terminal _SYMB_12;    //   else
terminal _SYMB_13;    //   end
terminal _SYMB_14;    //   false
terminal _SYMB_15;    //   function
terminal _SYMB_16;    //   global
terminal _SYMB_17;    //   if
terminal _SYMB_18;    //   integer
terminal _SYMB_19;    //   iszero
terminal _SYMB_20;    //   nil
terminal _SYMB_21;    //   or
terminal _SYMB_22;    //   pred
terminal _SYMB_23;    //   return
terminal _SYMB_24;    //   string
terminal _SYMB_25;    //   succ
terminal _SYMB_26;    //   table
terminal _SYMB_27;    //   then
terminal _SYMB_28;    //   true
terminal _SYMB_29;    //   type
terminal _SYMB_30;    //   var
terminal _SYMB_31;    //   void

terminal String _STRING_;

terminal Integer _INTEGER_;
terminal Double _DOUBLE_;
terminal String _IDENT_;



start with Program;


Program ::= ListExpr:p_1  {: RESULT = new sample.Absyn.ProgramExprs(p_1); :} 
;
ListExpr ::=  /* empty */  {: RESULT = new sample.Absyn.ListExpr(); :} 
  | Expr:p_1  {: RESULT = new sample.Absyn.ListExpr(); RESULT.addLast(p_1); :}
  | Expr:p_1 _SYMB_0 ListExpr:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
  |  /* empty */  {: RESULT = new sample.Absyn.ListExpr(); :}
  | Expr:p_1  {: RESULT = new sample.Absyn.ListExpr(); RESULT.addLast(p_1); :}
  | Expr:p_1 _SYMB_1 ListExpr:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Expr ::= _IDENT_:p_1  {: RESULT = new sample.Absyn.Var(p_1); :} 
  | _SYMB_28  {: RESULT = new sample.Absyn.ConstTrue(); :}
  | _SYMB_14  {: RESULT = new sample.Absyn.ConstFalse(); :}
  | _SYMB_17 Expr:p_2 _SYMB_27 Program:p_4 _SYMB_12 Program:p_6 _SYMB_13  {: RESULT = new sample.Absyn.If(p_2,p_4,p_6); :}
  | _IDENT_:p_1 _SYMB_2 ComaExprs:p_3 _SYMB_3  {: RESULT = new sample.Absyn.FuncCall(p_1,p_3); :}
  | _SYMB_15 _IDENT_:p_2 _SYMB_2 FArgs:p_4 _SYMB_3 _SYMB_4 Type:p_7 Program:p_8 _SYMB_13  {: RESULT = new sample.Absyn.Func(p_2,p_4,p_7,p_8); :}
  | _SYMB_23 Expr:p_2  {: RESULT = new sample.Absyn.Return(p_2); :}
  | _SYMB_20  {: RESULT = new sample.Absyn.NilKeyword(); :}
  | _SYMB_6 Expr:p_2  {: RESULT = new sample.Absyn.Not(p_2); :}
  | Expr:p_1 _SYMB_9 Expr:p_3  {: RESULT = new sample.Absyn.And(p_1,p_3); :}
  | Expr:p_1 _SYMB_21 Expr:p_3  {: RESULT = new sample.Absyn.Or(p_1,p_3); :}
  | _SYMB_7  {: RESULT = new sample.Absyn.ConstZero(); :}
  | _SYMB_25 Expr:p_2  {: RESULT = new sample.Absyn.Succ(p_2); :}
  | _SYMB_22 Expr:p_2  {: RESULT = new sample.Absyn.Pred(p_2); :}
  | _SYMB_19 Expr:p_2  {: RESULT = new sample.Absyn.IsZero(p_2); :}
  | _SYMB_2 Expr:p_2 _SYMB_3  {: RESULT = p_2; :}
  | Expr1:p_1  {: RESULT = p_1; :}
;
ComaExprs ::= ListExpr:p_1  {: RESULT = new sample.Absyn.Vars(p_1); :} 
;
FArgs ::= ListDec:p_1  {: RESULT = new sample.Absyn.FuncArgs(p_1); :} 
;
ListDec ::=  /* empty */  {: RESULT = new sample.Absyn.ListDec(); :} 
  | Dec:p_1  {: RESULT = new sample.Absyn.ListDec(); RESULT.addLast(p_1); :}
  | Dec:p_1 _SYMB_1 ListDec:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Type ::= _SYMB_24  {: RESULT = new sample.Absyn.StringType(); :} 
  | _SYMB_10  {: RESULT = new sample.Absyn.BoolType(); :}
  | _SYMB_18  {: RESULT = new sample.Absyn.IntType(); :}
  | _SYMB_11  {: RESULT = new sample.Absyn.DoubleType(); :}
  | _SYMB_26  {: RESULT = new sample.Absyn.TableType(); :}
  | _SYMB_31  {: RESULT = new sample.Absyn.VoidType(); :}
  | _IDENT_:p_1  {: RESULT = new sample.Absyn.TypeAlIdent(p_1); :}
;
TypeKW ::= _SYMB_29  {: RESULT = new sample.Absyn.TypeKeyword(); :} 
;
Expr3 ::= Type:p_1 _SYMB_4 TypeKW:p_3 _SYMB_5 Type:p_5  {: RESULT = new sample.Absyn.TypeAliasing(p_1,p_3,p_5); :} 
  | _IDENT_:p_1 TAnnot:p_2 _SYMB_5 Expr:p_4  {: RESULT = new sample.Absyn.VarTypeAnnotation(p_1,p_2,p_4); :}
  | _SYMB_16 _IDENT_:p_2 TAnnot:p_3 _SYMB_5 Expr:p_5  {: RESULT = new sample.Absyn.GlVarTypeAnnotation(p_2,p_3,p_5); :}
  | _SYMB_15 _IDENT_:p_2 _SYMB_2 FArgs:p_4 _SYMB_3 TAnnot:p_6 Program:p_7 _SYMB_13  {: RESULT = new sample.Absyn.FuncTypeAnnotation(p_2,p_4,p_6,p_7); :}
  | Expr4:p_1  {: RESULT = p_1; :}
;
VarKW ::= _SYMB_30  {: RESULT = new sample.Absyn.VarKeyword(); :} 
;
TAnnot ::= _SYMB_4 VarKW:p_2  {: RESULT = new sample.Absyn.TypeAnnotation(p_2); :} 
;
TAscript ::= TAnnot:p_1 _SYMB_2 Type:p_3 _SYMB_3  {: RESULT = new sample.Absyn.TypeAscription(p_1,p_3); :} 
;
Expr4 ::= _IDENT_:p_1 TAscript:p_2 _SYMB_5 Expr:p_4  {: RESULT = new sample.Absyn.VarTypeAscription(p_1,p_2,p_4); :} 
  | _SYMB_16 _IDENT_:p_2 TAscript:p_3 _SYMB_5 Expr:p_5  {: RESULT = new sample.Absyn.GlVarTypeAscription(p_2,p_3,p_5); :}
  | _SYMB_15 _IDENT_:p_2 _SYMB_2 FArgs:p_4 _SYMB_3 TAscript:p_6 Program:p_7 _SYMB_13  {: RESULT = new sample.Absyn.FuncTypeAscription(p_2,p_4,p_6,p_7); :}
;
Expr1 ::= _INTEGER_:p_1  {: RESULT = new sample.Absyn.EInt(p_1); :} 
  | _DOUBLE_:p_1  {: RESULT = new sample.Absyn.EDouble(p_1); :}
  | _STRING_:p_1  {: RESULT = new sample.Absyn.EStr(p_1); :}
  | Expr2:p_1  {: RESULT = p_1; :}
;
Dec ::= _IDENT_:p_1 _SYMB_4 Type:p_3  {: RESULT = new sample.Absyn.Declaration(p_1,p_3); :} 
;
GlDec ::= _SYMB_16 _IDENT_:p_2 _SYMB_4 Type:p_4  {: RESULT = new sample.Absyn.GlDeclaration(p_2,p_4); :} 
;
Expr2 ::= Dec:p_1  {: RESULT = new sample.Absyn.OnlyDecl(p_1); :} 
  | GlDec:p_1  {: RESULT = new sample.Absyn.OnlyGlDecl(p_1); :}
  | Dec:p_1 _SYMB_5 Expr:p_3  {: RESULT = new sample.Absyn.InitDecl(p_1,p_3); :}
  | GlDec:p_1 _SYMB_5 Expr:p_3  {: RESULT = new sample.Absyn.InitGlDecl(p_1,p_3); :}
  | Dec:p_1 _SYMB_5 _SYMB_2 _IDENT_:p_4 _SYMB_1 _IDENT_:p_6 _SYMB_3  {: RESULT = new sample.Absyn.TableDecl(p_1,p_4,p_6); :}
  | GlDec:p_1 _SYMB_5 _SYMB_2 _IDENT_:p_4 _SYMB_1 _IDENT_:p_6 _SYMB_3  {: RESULT = new sample.Absyn.GlTableDecl(p_1,p_4,p_6); :}
  | Dec:p_1 _SYMB_5 _SYMB_2 Dec:p_4 _SYMB_1 Dec:p_6 _SYMB_3  {: RESULT = new sample.Absyn.InitTableDecl(p_1,p_4,p_6); :}
  | GlDec:p_1 _SYMB_5 _SYMB_2 Dec:p_4 _SYMB_1 Dec:p_6 _SYMB_3  {: RESULT = new sample.Absyn.InitGlTableDecl(p_1,p_4,p_6); :}
  | _IDENT_:p_1 _SYMB_8 _IDENT_:p_3  {: RESULT = new sample.Absyn.TableElementCall(p_1,p_3); :}
  | _IDENT_:p_1 _SYMB_8 _IDENT_:p_3 _SYMB_5 Expr:p_5  {: RESULT = new sample.Absyn.TableElementAssignment(p_1,p_3,p_5); :}
  | _IDENT_:p_1 _SYMB_5 Expr:p_3  {: RESULT = new sample.Absyn.Assignment(p_1,p_3); :}
  | Expr3:p_1  {: RESULT = p_1; :}
;

