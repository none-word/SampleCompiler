
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sample;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\003\000\002\003\005\000\002\003\002" +
    "\000\002\003\003\000\002\003\005\000\002\004\003\000" +
    "\002\005\002\000\002\005\003\000\002\005\005\000\002" +
    "\006\004\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\011\000\002\006\006\000\002\006\013" +
    "\000\002\006\013\000\002\006\017\000\002\006\017\000" +
    "\002\006\004\000\002\006\003\000\002\006\005\000\002" +
    "\006\004\000\002\006\005\000\002\006\005\000\002\006" +
    "\006\000\002\006\005\000\002\006\003\000\002\007\003" +
    "\000\002\010\003\000\002\011\002\000\002\011\003\000" +
    "\002\011\005\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\010\000\002\013\005\000\002\014\003" +
    "\000\002\015\004\000\002\016\006\000\002\016\007\000" +
    "\002\016\012\000\002\016\003\000\002\017\007\000\002" +
    "\017\007\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\021\005\000\002\021\005" +
    "\000\002\022\006\000\002\022\006\000\002\023\003\000" +
    "\002\023\003\000\002\023\005\000\002\023\005\000\002" +
    "\023\011\000\002\023\011\000\002\023\011\000\002\023" +
    "\011\000\002\023\005\000\002\023\007\000\002\023\005" +
    "\000\002\023\003\000\002\024\007\000\002\024\005\000" +
    "\002\025\003\000\002\026\002\000\002\026\003\000\002" +
    "\026\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\060\002\uffff\006\030\015\027\020\025\021" +
    "\024\024\021\025\020\026\017\027\016\030\042\031\040" +
    "\033\036\034\035\035\034\037\033\040\032\041\031\043" +
    "\012\046\006\047\005\050\004\051\023\052\010\001\002" +
    "\000\030\002\uffcd\004\uffcd\005\uffcd\007\uffcd\014\uffcd\017" +
    "\uffcd\022\uffcd\023\uffcd\032\uffcd\036\uffcd\042\uffcd\001\002" +
    "\000\030\002\uffcb\004\uffcb\005\uffcb\007\uffcb\014\uffcb\017" +
    "\uffcb\022\uffcb\023\uffcb\032\uffcb\036\uffcb\042\uffcb\001\002" +
    "\000\112\002\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010" +
    "\uffd8\011\uffd8\012\uffd8\014\uffd8\015\uffd8\017\uffd8\020\uffd8" +
    "\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\046" +
    "\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\001\002\000\030" +
    "\002\uffd0\004\uffd0\005\uffd0\007\uffd0\014\uffd0\017\uffd0\022" +
    "\uffd0\023\uffd0\032\uffd0\036\uffd0\042\uffd0\001\002\000\040" +
    "\002\ufff4\004\ufff4\005\ufff4\006\072\007\ufff4\010\071\011" +
    "\075\014\ufff4\016\070\017\ufff4\022\ufff4\023\ufff4\032\ufff4" +
    "\036\ufff4\042\ufff4\001\002\000\030\002\uffba\004\uffba\005" +
    "\uffba\007\uffba\014\uffba\017\uffba\022\uffba\023\uffba\032\uffba" +
    "\036\uffba\042\uffba\001\002\000\030\002\ufff3\004\ufff3\005" +
    "\ufff3\007\ufff3\014\ufff3\017\ufff3\022\ufff3\023\ufff3\032\ufff3" +
    "\036\ufff3\042\ufff3\001\002\000\030\002\uffca\004\uffca\005" +
    "\uffca\007\uffca\014\uffca\017\uffca\022\uffca\023\uffca\032\uffca" +
    "\036\uffca\042\uffca\001\002\000\030\002\uffe3\004\uffe3\005" +
    "\uffe3\007\uffe3\014\uffe3\017\uffe3\022\uffe3\023\uffe3\032\uffe3" +
    "\036\uffe3\042\uffe3\001\002\000\004\011\250\001\002\000" +
    "\004\052\241\001\002\000\004\052\223\001\002\000\004" +
    "\006\113\001\002\000\030\002\ufff2\004\ufff2\005\ufff2\007" +
    "\ufff2\014\ufff2\017\ufff2\022\ufff2\023\ufff2\032\ufff2\036\ufff2" +
    "\042\ufff2\001\002\000\024\002\ufffe\004\220\005\217\007" +
    "\ufffe\014\ufffe\017\065\022\ufffe\023\ufffe\036\064\001\002" +
    "\000\030\002\uffcc\004\uffcc\005\uffcc\007\uffcc\014\uffcc\017" +
    "\uffcc\022\uffcc\023\uffcc\032\uffcc\036\uffcc\042\uffcc\001\002" +
    "\000\112\002\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010" +
    "\uffda\011\uffda\012\uffda\014\uffda\015\uffda\017\uffda\020\uffda" +
    "\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027" +
    "\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda" +
    "\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\046" +
    "\uffda\047\uffda\050\uffda\051\uffda\052\uffda\001\002\000\112" +
    "\002\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011" +
    "\uffdc\012\uffdc\014\uffdc\015\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\046\uffdc\047" +
    "\uffdc\050\uffdc\051\uffdc\052\uffdc\001\002\000\004\010\213" +
    "\001\002\000\056\006\030\015\027\020\025\021\024\024" +
    "\021\025\020\026\017\027\016\030\042\031\040\033\036" +
    "\034\035\035\034\037\033\040\032\041\031\043\012\046" +
    "\006\047\005\050\004\051\023\052\010\001\002\000\056" +
    "\006\030\015\027\020\025\021\024\024\021\025\020\026" +
    "\017\027\016\030\042\031\040\033\036\034\035\035\034" +
    "\037\033\040\032\041\031\043\012\046\006\047\005\050" +
    "\004\051\023\052\010\001\002\000\112\002\uffd9\004\uffd9" +
    "\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\014" +
    "\uffd9\015\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9" +
    "\041\uffd9\042\uffd9\043\uffd9\046\uffd9\047\uffd9\050\uffd9\051" +
    "\uffd9\052\uffd9\001\002\000\112\002\uffdd\004\uffdd\005\uffdd" +
    "\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\014\uffdd\015" +
    "\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\043\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052" +
    "\uffdd\001\002\000\056\006\030\015\027\020\025\021\024" +
    "\024\021\025\020\026\017\027\016\030\042\031\040\033" +
    "\036\034\035\035\034\037\033\040\032\041\031\043\012" +
    "\046\006\047\005\050\004\051\023\052\010\001\002\000" +
    "\030\002\uffea\004\uffea\005\uffea\007\uffea\014\uffea\017\uffea" +
    "\022\uffea\023\uffea\032\uffea\036\uffea\042\uffea\001\002\000" +
    "\006\032\uffb6\052\174\001\002\000\112\002\uffdb\004\uffdb" +
    "\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\014" +
    "\uffdb\015\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb" +
    "\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\042\uffdb\043\uffdb\046\uffdb\047\uffdb\050\uffdb\051" +
    "\uffdb\052\uffdb\001\002\000\012\002\000\014\000\022\000" +
    "\023\000\001\002\000\032\002\ufff8\004\ufff8\005\ufff8\007" +
    "\ufff8\014\ufff8\017\ufff8\022\ufff8\023\ufff8\032\ufff8\036\ufff8" +
    "\042\ufff8\052\167\001\002\000\032\002\uffc4\004\uffc4\005" +
    "\uffc4\007\uffc4\011\152\014\uffc4\017\uffc4\022\uffc4\023\uffc4" +
    "\032\uffc4\036\uffc4\042\uffc4\001\002\000\056\006\030\015" +
    "\027\020\025\021\024\024\021\025\020\026\017\027\016" +
    "\030\042\031\040\033\036\034\035\035\034\037\033\040" +
    "\032\041\031\043\012\046\006\047\005\050\004\051\023" +
    "\052\010\001\002\000\032\002\uffc5\004\uffc5\005\uffc5\007" +
    "\uffc5\011\046\014\uffc5\017\uffc5\022\uffc5\023\uffc5\032\uffc5" +
    "\036\uffc5\042\uffc5\001\002\000\004\002\045\001\002\000" +
    "\004\002\001\001\002\000\056\006\050\015\027\020\025" +
    "\021\024\024\021\025\020\026\017\027\016\030\042\031" +
    "\040\033\036\034\035\035\034\037\033\040\032\041\031" +
    "\043\012\046\006\047\005\050\004\051\023\052\010\001" +
    "\002\000\030\002\uffc3\004\uffc3\005\uffc3\007\uffc3\014\uffc3" +
    "\017\065\022\uffc3\023\uffc3\032\uffc3\036\064\042\uffc3\001" +
    "\002\000\056\006\030\015\027\020\025\021\024\024\021" +
    "\025\020\026\017\027\016\030\042\031\040\033\036\034" +
    "\035\035\034\037\033\040\032\041\031\043\012\046\006" +
    "\047\005\050\004\051\023\052\051\001\002\000\022\005" +
    "\073\006\072\007\ufff4\010\071\011\075\016\070\017\ufff4" +
    "\036\ufff4\001\002\000\010\007\063\017\065\036\064\001" +
    "\002\000\014\005\054\007\uffc5\011\046\017\uffc5\036\uffc5" +
    "\001\002\000\004\052\055\001\002\000\004\010\060\001" +
    "\002\000\004\007\057\001\002\000\030\002\uffbf\004\uffbf" +
    "\005\uffbf\007\uffbf\014\uffbf\017\uffbf\022\uffbf\023\uffbf\032" +
    "\uffbf\036\uffbf\042\uffbf\001\002\000\022\020\025\021\024" +
    "\025\020\033\036\040\032\041\031\046\006\052\062\001" +
    "\002\000\034\002\uffc9\004\uffc9\005\uffc9\007\uffc9\011\uffc9" +
    "\012\uffc9\014\uffc9\017\uffc9\022\uffc9\023\uffc9\032\uffc9\036" +
    "\uffc9\042\uffc9\001\002\000\034\002\uffc8\004\uffc8\005\uffc8" +
    "\007\uffc8\011\uffc8\012\uffc8\014\uffc8\017\uffc8\022\uffc8\023" +
    "\uffc8\032\uffc8\036\uffc8\042\uffc8\001\002\000\030\002\uffe4" +
    "\004\uffe4\005\uffe4\007\uffe4\014\uffe4\017\uffe4\022\uffe4\023" +
    "\uffe4\032\uffe4\036\uffe4\042\uffe4\001\002\000\056\006\030" +
    "\015\027\020\025\021\024\024\021\025\020\026\017\027" +
    "\016\030\042\031\040\033\036\034\035\035\034\037\033" +
    "\040\032\041\031\043\012\046\006\047\005\050\004\051" +
    "\023\052\010\001\002\000\056\006\030\015\027\020\025" +
    "\021\024\024\021\025\020\026\017\027\016\030\042\031" +
    "\040\033\036\034\035\035\034\037\033\040\032\041\031" +
    "\043\012\046\006\047\005\050\004\051\023\052\010\001" +
    "\002\000\030\002\uffe7\004\uffe7\005\uffe7\007\uffe7\014\uffe7" +
    "\017\065\022\uffe7\023\uffe7\032\uffe7\036\064\042\uffe7\001" +
    "\002\000\030\002\uffe6\004\uffe6\005\uffe6\007\uffe6\014\uffe6" +
    "\017\065\022\uffe6\023\uffe6\032\uffe6\036\064\042\uffe6\001" +
    "\002\000\004\052\141\001\002\000\030\006\110\020\025" +
    "\021\024\025\111\033\036\040\032\041\031\044\106\045" +
    "\112\046\006\052\062\001\002\000\060\006\030\007\uffff" +
    "\015\027\020\025\021\024\024\021\025\020\026\017\027" +
    "\016\030\042\031\040\033\036\034\035\035\034\037\033" +
    "\040\032\041\031\043\012\046\006\047\005\050\004\051" +
    "\023\052\010\001\002\000\004\052\101\001\002\000\004" +
    "\011\077\001\002\000\056\006\030\015\027\020\025\021" +
    "\024\024\021\025\020\026\017\027\016\030\042\031\040" +
    "\033\036\034\035\035\034\037\033\040\032\041\031\043" +
    "\012\046\006\047\005\050\004\051\023\052\010\001\002" +
    "\000\030\002\uffbb\004\uffbb\005\uffbb\007\uffbb\014\uffbb\017" +
    "\065\022\uffbb\023\uffbb\032\uffbb\036\064\042\uffbb\001\002" +
    "\000\056\006\030\015\027\020\025\021\024\024\021\025" +
    "\020\026\017\027\016\030\042\031\040\033\036\034\035" +
    "\035\034\037\033\040\032\041\031\043\012\046\006\047" +
    "\005\050\004\051\023\052\010\001\002\000\030\002\uffd3" +
    "\004\uffd3\005\uffd3\007\uffd3\014\uffd3\017\065\022\uffd3\023" +
    "\uffd3\032\uffd3\036\064\042\uffd3\001\002\000\004\007\102" +
    "\001\002\000\030\002\uffc1\004\uffc1\005\uffc1\007\uffc1\014" +
    "\uffc1\017\uffc1\022\uffc1\023\uffc1\032\uffc1\036\uffc1\042\uffc1" +
    "\001\002\000\004\007\105\001\002\000\004\007\uffe2\001" +
    "\002\000\030\002\ufff0\004\ufff0\005\ufff0\007\ufff0\014\ufff0" +
    "\017\ufff0\022\ufff0\023\ufff0\032\ufff0\036\ufff0\042\ufff0\001" +
    "\002\000\004\011\uffd6\001\002\000\062\006\uffd4\011\uffd4" +
    "\015\uffd4\020\uffd4\021\uffd4\023\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\037\uffd4\040\uffd4\041\uffd4\043\uffd4\046\uffd4\047\uffd4\050" +
    "\uffd4\051\uffd4\052\uffd4\001\002\000\056\006\030\015\027" +
    "\020\025\021\024\024\021\025\020\026\017\027\016\030" +
    "\042\031\040\033\036\034\035\035\034\037\033\040\032" +
    "\041\031\043\012\046\006\047\005\050\004\051\023\052" +
    "\010\001\002\000\006\006\113\011\114\001\002\000\062" +
    "\006\uffd5\011\uffd5\015\uffd5\020\uffd5\021\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\037\uffd5\040\uffd5\041\uffd5\043\uffd5\046" +
    "\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\001\002\000\006" +
    "\012\uffe0\052\055\001\002\000\004\006\115\001\002\000" +
    "\006\007\uffe0\052\055\001\002\000\004\007\123\001\002" +
    "\000\010\005\121\007\uffdf\012\uffdf\001\002\000\006\007" +
    "\uffe1\012\uffe1\001\002\000\010\007\uffe0\012\uffe0\052\055" +
    "\001\002\000\006\007\uffde\012\uffde\001\002\000\004\012" +
    "\124\001\002\000\004\013\125\001\002\000\060\006\030" +
    "\014\uffff\015\027\020\025\021\024\024\021\025\020\026" +
    "\017\027\016\030\042\031\040\033\036\034\035\035\034" +
    "\037\033\040\032\041\031\043\012\046\006\047\005\050" +
    "\004\051\023\052\010\001\002\000\004\014\127\001\002" +
    "\000\004\010\130\001\002\000\022\020\025\021\024\025" +
    "\020\033\036\040\032\041\031\046\006\052\132\001\002" +
    "\000\030\002\uffed\004\uffed\005\uffed\007\uffed\014\uffed\017" +
    "\uffed\022\uffed\023\uffed\032\uffed\036\uffed\042\uffed\001\002" +
    "\000\030\002\uffec\004\uffec\005\uffec\007\uffec\014\uffec\017" +
    "\uffec\022\uffec\023\uffec\032\uffec\036\uffec\042\uffec\001\002" +
    "\000\004\012\134\001\002\000\020\020\025\021\024\025" +
    "\020\033\036\040\032\041\031\046\006\001\002\000\004" +
    "\007\136\001\002\000\112\002\uffd7\004\uffd7\005\uffd7\006" +
    "\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\014\uffd7\015\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042" +
    "\uffd7\043\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7" +
    "\001\002\000\010\007\140\017\065\036\064\001\002\000" +
    "\030\002\uffce\004\uffce\005\uffce\007\uffce\014\uffce\017\uffce" +
    "\022\uffce\023\uffce\032\uffce\036\uffce\042\uffce\001\002\000" +
    "\032\002\uffbd\004\uffbd\005\uffbd\007\uffbd\011\142\014\uffbd" +
    "\017\uffbd\022\uffbd\023\uffbd\032\uffbd\036\uffbd\042\uffbd\001" +
    "\002\000\056\006\030\015\027\020\025\021\024\024\021" +
    "\025\020\026\017\027\016\030\042\031\040\033\036\034" +
    "\035\035\034\037\033\040\032\041\031\043\012\046\006" +
    "\047\005\050\004\051\023\052\010\001\002\000\030\002" +
    "\uffbc\004\uffbc\005\uffbc\007\uffbc\014\uffbc\017\065\022\uffbc" +
    "\023\uffbc\032\uffbc\036\064\042\uffbc\001\002\000\010\017" +
    "\065\036\064\042\145\001\002\000\060\006\030\015\027" +
    "\020\025\021\024\022\uffff\024\021\025\020\026\017\027" +
    "\016\030\042\031\040\033\036\034\035\035\034\037\033" +
    "\040\032\041\031\043\012\046\006\047\005\050\004\051" +
    "\023\052\010\001\002\000\004\022\147\001\002\000\060" +
    "\006\030\015\027\020\025\021\024\023\uffff\024\021\025" +
    "\020\026\017\027\016\030\042\031\040\033\036\034\035" +
    "\035\034\037\033\040\032\041\031\043\012\046\006\047" +
    "\005\050\004\051\023\052\010\001\002\000\004\023\151" +
    "\001\002\000\030\002\ufff1\004\ufff1\005\ufff1\007\ufff1\014" +
    "\ufff1\017\ufff1\022\ufff1\023\ufff1\032\ufff1\036\ufff1\042\ufff1" +
    "\001\002\000\056\006\154\015\027\020\025\021\024\024" +
    "\021\025\020\026\017\027\016\030\042\031\040\033\036" +
    "\034\035\035\034\037\033\040\032\041\031\043\012\046" +
    "\006\047\005\050\004\051\023\052\010\001\002\000\030" +
    "\002\uffc2\004\uffc2\005\uffc2\007\uffc2\014\uffc2\017\065\022" +
    "\uffc2\023\uffc2\032\uffc2\036\064\042\uffc2\001\002\000\056" +
    "\006\030\015\027\020\025\021\024\024\021\025\020\026" +
    "\017\027\016\030\042\031\040\033\036\034\035\035\034" +
    "\037\033\040\032\041\031\043\012\046\006\047\005\050" +
    "\004\051\023\052\155\001\002\000\022\005\162\006\072" +
    "\007\ufff4\010\071\011\075\016\070\017\ufff4\036\ufff4\001" +
    "\002\000\014\005\157\007\uffc5\011\046\017\uffc5\036\uffc5" +
    "\001\002\000\004\052\055\001\002\000\004\007\161\001" +
    "\002\000\030\002\uffbe\004\uffbe\005\uffbe\007\uffbe\014\uffbe" +
    "\017\uffbe\022\uffbe\023\uffbe\032\uffbe\036\uffbe\042\uffbe\001" +
    "\002\000\004\052\163\001\002\000\004\007\164\001\002" +
    "\000\030\002\uffc0\004\uffc0\005\uffc0\007\uffc0\014\uffc0\017" +
    "\uffc0\022\uffc0\023\uffc0\032\uffc0\036\uffc0\042\uffc0\001\002" +
    "\000\030\002\ufff9\004\ufff9\005\ufff9\007\ufff9\014\ufff9\017" +
    "\ufff9\022\ufff9\023\ufff9\032\ufff9\036\ufff9\042\ufff9\001\002" +
    "\000\030\002\ufff5\004\ufff5\005\ufff5\007\ufff5\014\ufff5\017" +
    "\ufff5\022\ufff5\023\ufff5\032\ufff5\036\ufff5\042\ufff5\001\002" +
    "\000\030\002\ufff7\004\ufff7\005\170\007\ufff7\014\ufff7\017" +
    "\ufff7\022\ufff7\023\ufff7\032\ufff7\036\ufff7\042\ufff7\001\002" +
    "\000\032\002\ufff8\004\ufff8\005\ufff8\007\ufff8\014\ufff8\017" +
    "\ufff8\022\ufff8\023\ufff8\032\ufff8\036\ufff8\042\ufff8\052\167" +
    "\001\002\000\030\002\ufff6\004\ufff6\005\ufff6\007\ufff6\014" +
    "\ufff6\017\ufff6\022\ufff6\023\ufff6\032\ufff6\036\ufff6\042\ufff6" +
    "\001\002\000\004\032\uffb7\001\002\000\006\005\207\032" +
    "\uffb5\001\002\000\004\010\203\001\002\000\004\011\201" +
    "\001\002\000\004\032\177\001\002\000\056\006\030\015" +
    "\027\020\025\021\024\024\021\025\020\026\017\027\016" +
    "\030\042\031\040\033\036\034\035\035\034\037\033\040" +
    "\032\041\031\043\012\046\006\047\005\050\004\051\023" +
    "\052\010\001\002\000\030\002\uffe5\004\uffe5\005\uffe5\007" +
    "\uffe5\014\uffe5\017\065\022\uffe5\023\uffe5\032\uffe5\036\064" +
    "\042\uffe5\001\002\000\056\006\030\015\027\020\025\021" +
    "\024\024\021\025\020\026\017\027\016\030\042\031\040" +
    "\033\036\034\035\035\034\037\033\040\032\041\031\043" +
    "\012\046\006\047\005\050\004\051\023\052\010\001\002" +
    "\000\012\005\uffb8\017\065\032\uffb8\036\064\001\002\000" +
    "\024\020\025\021\024\025\020\033\036\040\032\041\031" +
    "\045\112\046\006\052\062\001\002\000\004\011\205\001" +
    "\002\000\056\006\030\015\027\020\025\021\024\024\021" +
    "\025\020\026\017\027\016\030\042\031\040\033\036\034" +
    "\035\035\034\037\033\040\032\041\031\043\012\046\006" +
    "\047\005\050\004\051\023\052\010\001\002\000\012\005" +
    "\uffb9\017\065\032\uffb9\036\064\001\002\000\006\032\uffb6" +
    "\052\174\001\002\000\004\032\uffb4\001\002\000\030\002" +
    "\uffeb\004\uffeb\005\uffeb\007\uffeb\014\uffeb\017\065\022\uffeb" +
    "\023\uffeb\032\uffeb\036\064\042\uffeb\001\002\000\030\002" +
    "\uffe8\004\uffe8\005\uffe8\007\uffe8\014\uffe8\017\065\022\uffe8" +
    "\023\uffe8\032\uffe8\036\064\042\uffe8\001\002\000\004\006" +
    "\214\001\002\000\056\006\030\015\027\020\025\021\024" +
    "\024\021\025\020\026\017\027\016\030\042\031\040\033" +
    "\036\034\035\035\034\037\033\040\032\041\031\043\012" +
    "\046\006\047\005\050\004\051\023\052\010\001\002\000" +
    "\010\007\216\017\065\036\064\001\002\000\030\002\uffcf" +
    "\004\uffcf\005\uffcf\007\uffcf\014\uffcf\017\uffcf\022\uffcf\023" +
    "\uffcf\032\uffcf\036\uffcf\042\uffcf\001\002\000\070\002\uffff" +
    "\006\030\007\uffff\014\uffff\015\027\020\025\021\024\022" +
    "\uffff\023\uffff\024\021\025\020\026\017\027\016\030\042" +
    "\031\040\033\036\034\035\035\034\037\033\040\032\041" +
    "\031\043\012\046\006\047\005\050\004\051\023\052\010" +
    "\001\002\000\070\002\uffff\006\030\007\uffff\014\uffff\015" +
    "\027\020\025\021\024\022\uffff\023\uffff\024\021\025\020" +
    "\026\017\027\016\030\042\031\040\033\036\034\035\035" +
    "\034\037\033\040\032\041\031\043\012\046\006\047\005" +
    "\050\004\051\023\052\010\001\002\000\014\002\ufffd\007" +
    "\ufffd\014\ufffd\022\ufffd\023\ufffd\001\002\000\014\002\ufffa" +
    "\007\ufffa\014\ufffa\022\ufffa\023\ufffa\001\002\000\004\006" +
    "\224\001\002\000\006\007\uffe0\052\055\001\002\000\004" +
    "\007\226\001\002\000\004\010\227\001\002\000\024\020" +
    "\025\021\024\025\020\033\036\040\032\041\031\045\112" +
    "\046\006\052\234\001\002\000\060\006\030\015\027\020" +
    "\025\021\024\023\uffff\024\021\025\020\026\017\027\016" +
    "\030\042\031\040\033\036\034\035\035\034\037\033\040" +
    "\032\041\031\043\012\046\006\047\005\050\004\051\023" +
    "\052\010\001\002\000\004\023\232\001\002\000\030\002" +
    "\uffd1\004\uffd1\005\uffd1\007\uffd1\014\uffd1\017\uffd1\022\uffd1" +
    "\023\uffd1\032\uffd1\036\uffd1\042\uffd1\001\002\000\060\006" +
    "\030\015\027\020\025\021\024\023\uffff\024\021\025\020" +
    "\026\017\027\016\030\042\031\040\033\036\034\035\035" +
    "\034\037\033\040\032\041\031\043\012\046\006\047\005" +
    "\050\004\051\023\052\010\001\002\000\060\006\030\015" +
    "\027\020\025\021\024\023\uffff\024\021\025\020\026\017" +
    "\027\016\030\042\031\040\033\036\034\035\035\034\037" +
    "\033\040\032\041\031\043\012\046\006\047\005\050\004" +
    "\051\023\052\010\001\002\000\004\023\236\001\002\000" +
    "\030\002\uffee\004\uffee\005\uffee\007\uffee\014\uffee\017\uffee" +
    "\022\uffee\023\uffee\032\uffee\036\uffee\042\uffee\001\002\000" +
    "\004\023\240\001\002\000\030\002\uffef\004\uffef\005\uffef" +
    "\007\uffef\014\uffef\017\uffef\022\uffef\023\uffef\032\uffef\036" +
    "\uffef\042\uffef\001\002\000\004\010\242\001\002\000\024" +
    "\020\025\021\024\025\020\033\036\040\032\041\031\045" +
    "\112\046\006\052\247\001\002\000\004\011\244\001\002" +
    "\000\056\006\030\015\027\020\025\021\024\024\021\025" +
    "\020\026\017\027\016\030\042\031\040\033\036\034\035" +
    "\035\034\037\033\040\032\041\031\043\012\046\006\047" +
    "\005\050\004\051\023\052\010\001\002\000\030\002\uffd2" +
    "\004\uffd2\005\uffd2\007\uffd2\014\uffd2\017\065\022\uffd2\023" +
    "\uffd2\032\uffd2\036\064\042\uffd2\001\002\000\032\002\uffc7" +
    "\004\uffc7\005\uffc7\007\uffc7\011\uffc7\014\uffc7\017\uffc7\022" +
    "\uffc7\023\uffc7\032\uffc7\036\uffc7\042\uffc7\001\002\000\032" +
    "\002\uffc6\004\uffc6\005\uffc6\007\uffc6\011\uffc6\014\uffc6\017" +
    "\uffc6\022\uffc6\023\uffc6\032\uffc6\036\uffc6\042\uffc6\001\002" +
    "\000\020\020\025\021\024\025\020\033\036\040\032\041" +
    "\031\046\006\001\002\000\030\002\uffe9\004\uffe9\005\uffe9" +
    "\007\uffe9\014\uffe9\017\uffe9\022\uffe9\023\uffe9\032\uffe9\036" +
    "\uffe9\042\uffe9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\030\002\043\003\036\006\021\012\025\013" +
    "\014\016\010\017\006\020\013\021\042\022\040\023\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\006\211\012\025\013\014\016\010\017" +
    "\006\020\013\021\042\022\040\023\012\001\001\000\024" +
    "\006\051\012\025\013\014\016\010\017\006\020\013\021" +
    "\042\022\040\023\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\006\210\012\025\013\014\016\010\017" +
    "\006\020\013\021\042\022\040\023\012\001\001\000\002" +
    "\001\001\000\012\021\174\024\172\025\175\026\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\165" +
    "\005\164\001\001\000\002\001\001\000\024\006\143\012" +
    "\025\013\014\016\010\017\006\020\013\021\042\022\040" +
    "\023\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\006\046\012\025\013\014\016\010" +
    "\017\006\020\013\021\042\022\040\023\012\001\001\000" +
    "\002\001\001\000\024\006\051\012\025\013\014\016\010" +
    "\017\006\020\013\021\052\022\040\023\012\001\001\000" +
    "\004\015\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\066\012\025\013\014\016\010\017\006\020\013\021\042" +
    "\022\040\023\012\001\001\000\024\006\065\012\025\013" +
    "\014\016\010\017\006\020\013\021\042\022\040\023\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\060\014\106\001\001\000\030\003\103" +
    "\006\021\007\102\012\025\013\014\016\010\017\006\020" +
    "\013\021\042\022\040\023\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\006\075\012\025\013\014\016" +
    "\010\017\006\020\013\021\042\022\040\023\012\001\001" +
    "\000\002\001\001\000\024\006\077\012\025\013\014\016" +
    "\010\017\006\020\013\021\042\022\040\023\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\006\136\012\025\013" +
    "\014\016\010\017\006\020\013\021\042\022\040\023\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\132\011\117\021\116\001\001\000\002\001\001\000\010" +
    "\010\115\011\117\021\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\121\021\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\002\125\003\036\006\021\012\025\013\014" +
    "\016\010\017\006\020\013\021\042\022\040\023\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\006\142\012\025\013\014\016\010\017\006" +
    "\020\013\021\042\022\040\023\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\002\145\003\036\006\021" +
    "\012\025\013\014\016\010\017\006\020\013\021\042\022" +
    "\040\023\012\001\001\000\002\001\001\000\030\002\147" +
    "\003\036\006\021\012\025\013\014\016\010\017\006\020" +
    "\013\021\042\022\040\023\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\006\152\012\025\013\014\016" +
    "\010\017\006\020\013\021\042\022\040\023\012\001\001" +
    "\000\002\001\001\000\024\006\051\012\025\013\014\016" +
    "\010\017\006\020\013\021\155\022\040\023\012\001\001" +
    "\000\004\015\073\001\001\000\002\001\001\000\004\021" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\006\177\012\025\013\014\016\010\017\006\020" +
    "\013\021\042\022\040\023\012\001\001\000\002\001\001" +
    "\000\024\006\201\012\025\013\014\016\010\017\006\020" +
    "\013\021\042\022\040\023\012\001\001\000\002\001\001" +
    "\000\006\012\060\014\203\001\001\000\002\001\001\000" +
    "\024\006\205\012\025\013\014\016\010\017\006\020\013" +
    "\021\042\022\040\023\012\001\001\000\002\001\001\000" +
    "\010\021\174\024\172\026\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\006\214\012\025\013\014\016\010\017\006\020\013" +
    "\021\042\022\040\023\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\221\006\021\012\025\013\014" +
    "\016\010\017\006\020\013\021\042\022\040\023\012\001" +
    "\001\000\026\003\220\006\021\012\025\013\014\016\010" +
    "\017\006\020\013\021\042\022\040\023\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\224\011\117\021\116\001\001\000\002\001\001\000" +
    "\004\015\227\001\001\000\006\012\232\014\106\001\001" +
    "\000\030\002\230\003\036\006\021\012\025\013\014\016" +
    "\010\017\006\020\013\021\042\022\040\023\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\002\236\003" +
    "\036\006\021\012\025\013\014\016\010\017\006\020\013" +
    "\021\042\022\040\023\012\001\001\000\030\002\234\003" +
    "\036\006\021\012\025\013\014\016\010\017\006\020\013" +
    "\021\042\022\040\023\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\242\001\001\000\006\012\245\014\106\001\001\000" +
    "\002\001\001\000\024\006\244\012\025\013\014\016\010" +
    "\017\006\020\013\021\042\022\040\023\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\250\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public sample.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (sample.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		sample.Absyn.Program start_val = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListExpr 
            {
              sample.Absyn.Program RESULT =null;
		sample.Absyn.ListExpr p_1 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ProgramExprs(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListExpr ::= 
            {
              sample.Absyn.ListExpr RESULT =null;
		 RESULT = new sample.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListExpr ::= Expr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListExpr ::= Expr _SYMB_0 ListExpr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.ListExpr p_3 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListExpr ::= 
            {
              sample.Absyn.ListExpr RESULT =null;
		 RESULT = new sample.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListExpr ::= Expr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListExpr ::= Expr _SYMB_1 ListExpr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.ListExpr p_3 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Idts ::= ListIdent 
            {
              sample.Absyn.Idts RESULT =null;
		sample.Absyn.ListIdent p_1 = (sample.Absyn.ListIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Idents(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Idts",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ListIdent ::= 
            {
              sample.Absyn.ListIdent RESULT =null;
		 RESULT = new sample.Absyn.ListIdent(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListIdent",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ListIdent ::= _IDENT_ 
            {
              sample.Absyn.ListIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ListIdent(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListIdent",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ListIdent ::= _IDENT_ _SYMB_1 ListIdent 
            {
              sample.Absyn.ListIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.ListIdent p_3 = (sample.Absyn.ListIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListIdent",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expr ::= _SYMB_21 Idts 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Idts p_2 = (sample.Absyn.Idts)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Import(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expr ::= _IDENT_ 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Var(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expr ::= _SYMB_31 
            {
              sample.Absyn.Expr RESULT =null;
		 RESULT = new sample.Absyn.ConstTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expr ::= _SYMB_16 
            {
              sample.Absyn.Expr RESULT =null;
		 RESULT = new sample.Absyn.ConstFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expr ::= _SYMB_20 Expr _SYMB_30 Program _SYMB_14 Program _SYMB_15 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		sample.Absyn.Program p_4 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Program p_6 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.If(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expr ::= _IDENT_ _SYMB_2 ComaExprs _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.ComaExprs p_3 = (sample.Absyn.ComaExprs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.FuncCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expr ::= _SYMB_18 _IDENT_ _SYMB_2 FArgs _SYMB_3 _SYMB_4 Type Program _SYMB_15 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		sample.Absyn.FArgs p_4 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		sample.Absyn.Type p_7 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Program p_8 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.Func(p_2,p_4,p_7,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expr ::= _SYMB_18 _IDENT_ _SYMB_2 FArgs _SYMB_3 _SYMB_4 _IDENT_ Program _SYMB_15 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		sample.Absyn.FArgs p_4 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Program p_8 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.TypeAlFunc(p_2,p_4,p_7,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expr ::= _IDENT_ _SYMB_4 _SYMB_17 _SYMB_5 _SYMB_2 FArgs _SYMB_3 _SYMB_6 _SYMB_7 Program _SYMB_8 _SYMB_4 Type 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		sample.Absyn.FArgs p_6 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		sample.Absyn.Program p_10 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Type p_13 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.AnonymFunc(p_1,p_6,p_10,p_13); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expr ::= _IDENT_ _SYMB_4 _SYMB_17 _SYMB_5 _SYMB_2 FArgs _SYMB_3 _SYMB_6 _SYMB_7 Program _SYMB_8 _SYMB_4 _IDENT_ 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		sample.Absyn.FArgs p_6 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		sample.Absyn.Program p_10 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String p_13 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TypeAlAnonymFunc(p_1,p_6,p_10,p_13); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expr ::= _SYMB_27 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Return(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expr ::= _SYMB_25 
            {
              sample.Absyn.Expr RESULT =null;
		 RESULT = new sample.Absyn.NilKeyword(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expr ::= TypeAl _SYMB_5 Type 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.TypeAl p_1 = (sample.Absyn.TypeAl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Type p_3 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TypeAliasing(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expr ::= _SYMB_9 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Not(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expr ::= Expr _SYMB_11 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.And(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expr ::= Expr _SYMB_26 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Or(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expr ::= _SYMB_24 Fields _SYMB_22 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Fields p_2 = (sample.Absyn.Fields)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_4 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.LetBinding(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expr ::= _SYMB_2 Expr _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expr ::= Expr1 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ComaExprs ::= ListExpr 
            {
              sample.Absyn.ComaExprs RESULT =null;
		sample.Absyn.ListExpr p_1 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Vars(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComaExprs",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FArgs ::= ListDec 
            {
              sample.Absyn.FArgs RESULT =null;
		sample.Absyn.ListDec p_1 = (sample.Absyn.ListDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.FuncArgs(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FArgs",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ListDec ::= 
            {
              sample.Absyn.ListDec RESULT =null;
		 RESULT = new sample.Absyn.ListDec(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListDec ::= Dec 
            {
              sample.Absyn.ListDec RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ListDec(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ListDec ::= Dec _SYMB_1 ListDec 
            {
              sample.Absyn.ListDec RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.ListDec p_3 = (sample.Absyn.ListDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Type ::= _SYMB_28 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.StringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Type ::= _SYMB_12 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.BoolType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Type ::= _SYMB_23 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Type ::= _SYMB_13 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.DoubleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Type ::= _SYMB_29 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.TableType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Type ::= _SYMB_34 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.VoidType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Type ::= _SYMB_17 _SYMB_2 FArgs _SYMB_6 Type _SYMB_3 
            {
              sample.Absyn.Type RESULT =null;
		sample.Absyn.FArgs p_3 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Type p_5 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.FuncType(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TypeAl ::= _IDENT_ _SYMB_4 _SYMB_32 
            {
              sample.Absyn.TypeAl RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new sample.Absyn.TypeAlIdent(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeAl",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VarKW ::= _SYMB_33 
            {
              sample.Absyn.VarKW RESULT =null;
		 RESULT = new sample.Absyn.VarKeyword(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarKW",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TAnnot ::= _SYMB_4 VarKW 
            {
              sample.Absyn.TAnnot RESULT =null;
		sample.Absyn.VarKW p_2 = (sample.Absyn.VarKW)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TypeAnnotation(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TAnnot",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr3 ::= _IDENT_ TAnnot _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.TAnnot p_2 = (sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_4 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.VarTypeAnnotation(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr3 ::= _SYMB_19 _IDENT_ TAnnot _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.TAnnot p_3 = (sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_5 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.GlVarTypeAnnotation(p_2,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr3 ::= _SYMB_18 _IDENT_ _SYMB_2 FArgs _SYMB_3 TAnnot Program _SYMB_15 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		sample.Absyn.FArgs p_4 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		sample.Absyn.TAnnot p_6 = (sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Program p_7 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.FuncTypeAnnotation(p_2,p_4,p_6,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr3 ::= Expr4 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr4 ::= Type _SYMB_4 _SYMB_2 Expr _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Type p_1 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		sample.Absyn.Expr p_4 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.TypeAscription(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr4 ::= _IDENT_ _SYMB_4 _SYMB_2 Expr _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		sample.Absyn.Expr p_4 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.TypeAscWithTypeAl(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr1 ::= _INTEGER_ 
            {
              sample.Absyn.Expr RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.EInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr1 ::= _DOUBLE_ 
            {
              sample.Absyn.Expr RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.EDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr1 ::= _STRING_ 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.EStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr1 ::= Expr2 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Dec ::= _IDENT_ _SYMB_4 Type 
            {
              sample.Absyn.Dec RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Type p_3 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Declaration(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Dec ::= _IDENT_ _SYMB_4 _IDENT_ 
            {
              sample.Absyn.Dec RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TypeAlDecl(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // GlDec ::= _SYMB_19 _IDENT_ _SYMB_4 Type 
            {
              sample.Absyn.GlDec RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Type p_4 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.GlDeclaration(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GlDec",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // GlDec ::= _SYMB_19 _IDENT_ _SYMB_4 _IDENT_ 
            {
              sample.Absyn.GlDec RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TypeAlGlDec(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GlDec",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr2 ::= Dec 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.OnlyDecl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr2 ::= GlDec 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.GlDec p_1 = (sample.Absyn.GlDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.OnlyGlDecl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr2 ::= Dec _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.InitDecl(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr2 ::= GlDec _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.GlDec p_1 = (sample.Absyn.GlDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.InitGlDecl(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr2 ::= Dec _SYMB_5 _SYMB_2 _IDENT_ _SYMB_1 _IDENT_ _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String p_6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.TableDecl(p_1,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr2 ::= GlDec _SYMB_5 _SYMB_2 _IDENT_ _SYMB_1 _IDENT_ _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.GlDec p_1 = (sample.Absyn.GlDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String p_6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.GlTableDecl(p_1,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr2 ::= Dec _SYMB_5 _SYMB_2 Dec _SYMB_1 Dec _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		sample.Absyn.Dec p_4 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Dec p_6 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.InitTableDecl(p_1,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr2 ::= GlDec _SYMB_5 _SYMB_2 Dec _SYMB_1 Dec _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.GlDec p_1 = (sample.Absyn.GlDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		sample.Absyn.Dec p_4 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Dec p_6 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.InitGlTableDecl(p_1,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr2 ::= _IDENT_ _SYMB_10 _IDENT_ 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TableElementCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr2 ::= _IDENT_ _SYMB_10 _IDENT_ _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_5 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TableElementAssignment(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr2 ::= _IDENT_ _SYMB_5 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Assignment(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr2 ::= Expr3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Field ::= _IDENT_ _SYMB_4 VarKW _SYMB_5 Expr 
            {
              sample.Absyn.Field RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		sample.Absyn.VarKW p_3 = (sample.Absyn.VarKW)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_5 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TypeAnField(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Field ::= Dec _SYMB_5 Expr 
            {
              sample.Absyn.Field RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.LBField(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Fields ::= ListField 
            {
              sample.Absyn.Fields RESULT =null;
		sample.Absyn.ListField p_1 = (sample.Absyn.ListField)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.LBFields(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Fields",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ListField ::= 
            {
              sample.Absyn.ListField RESULT =null;
		 RESULT = new sample.Absyn.ListField(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListField",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ListField ::= Field 
            {
              sample.Absyn.ListField RESULT =null;
		sample.Absyn.Field p_1 = (sample.Absyn.Field)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ListField(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListField",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ListField ::= Field _SYMB_1 ListField 
            {
              sample.Absyn.ListField RESULT =null;
		sample.Absyn.Field p_1 = (sample.Absyn.Field)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.ListField p_3 = (sample.Absyn.ListField)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListField",20, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
