
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sample;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\003\000\002\003\005\000\002\003\002" +
    "\000\002\003\003\000\002\003\005\000\002\004\004\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\011\000\002\004\006\000\002\004\013\000\002\004" +
    "\013\000\002\004\013\000\002\004\013\000\002\004\004" +
    "\000\002\004\003\000\002\004\005\000\002\004\004\000" +
    "\002\004\005\000\002\004\005\000\002\004\006\000\002" +
    "\004\005\000\002\004\003\000\002\005\003\000\002\006" +
    "\003\000\002\007\002\000\002\007\003\000\002\007\005" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\011\005\000\002\012\003\000\002\013\004\000\002\014" +
    "\006\000\002\014\007\000\002\014\012\000\002\014\003" +
    "\000\002\015\007\000\002\015\007\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\017\005\000\002\017\005\000\002\020\006\000\002\020" +
    "\006\000\002\021\003\000\002\021\003\000\002\021\005" +
    "\000\002\021\005\000\002\021\011\000\002\021\011\000" +
    "\002\021\011\000\002\021\011\000\002\021\005\000\002" +
    "\021\007\000\002\021\005\000\002\021\003\000\002\022" +
    "\007\000\002\022\005\000\002\023\003\000\002\024\002" +
    "\000\002\024\003\000\002\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\056\002\uffff\006\030\015\027\020\026\021" +
    "\024\024\021\025\020\026\017\027\016\030\041\032\037" +
    "\033\036\034\034\036\033\037\032\040\031\042\013\045" +
    "\006\046\005\047\004\050\023\051\010\001\002\000\030" +
    "\002\uffd2\004\uffd2\005\uffd2\007\uffd2\013\uffd2\017\uffd2\022" +
    "\uffd2\023\uffd2\031\uffd2\035\uffd2\041\uffd2\001\002\000\030" +
    "\002\uffd0\004\uffd0\005\uffd0\007\uffd0\013\uffd0\017\uffd0\022" +
    "\uffd0\023\uffd0\031\uffd0\035\uffd0\041\uffd0\001\002\000\106" +
    "\002\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031" +
    "\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc" +
    "\040\uffdc\041\uffdc\042\uffdc\045\uffdc\046\uffdc\047\uffdc\050" +
    "\uffdc\051\uffdc\001\002\000\030\002\uffd5\004\uffd5\005\uffd5" +
    "\007\uffd5\013\uffd5\017\uffd5\022\uffd5\023\uffd5\031\uffd5\035" +
    "\uffd5\041\uffd5\001\002\000\040\002\ufff8\004\ufff8\005\ufff8" +
    "\006\106\007\ufff8\010\104\013\ufff8\014\111\016\105\017" +
    "\ufff8\022\ufff8\023\ufff8\031\ufff8\035\ufff8\041\ufff8\001\002" +
    "\000\030\002\uffbf\004\uffbf\005\uffbf\007\uffbf\013\uffbf\017" +
    "\uffbf\022\uffbf\023\uffbf\031\uffbf\035\uffbf\041\uffbf\001\002" +
    "\000\030\002\uffcf\004\uffcf\005\uffcf\007\uffcf\013\uffcf\017" +
    "\uffcf\022\uffcf\023\uffcf\031\uffcf\035\uffcf\041\uffcf\001\002" +
    "\000\030\002\ufff7\004\ufff7\005\ufff7\007\ufff7\013\ufff7\017" +
    "\ufff7\022\ufff7\023\ufff7\031\ufff7\035\ufff7\041\ufff7\001\002" +
    "\000\030\002\uffe7\004\uffe7\005\uffe7\007\uffe7\013\uffe7\017" +
    "\uffe7\022\uffe7\023\uffe7\031\uffe7\035\uffe7\041\uffe7\001\002" +
    "\000\004\014\234\001\002\000\054\006\030\015\027\020" +
    "\026\021\024\024\021\025\020\026\017\027\016\030\041" +
    "\032\037\033\036\034\034\036\033\037\032\040\031\042" +
    "\013\045\006\046\005\047\004\050\023\051\010\001\002" +
    "\000\004\051\217\001\002\000\004\051\201\001\002\000" +
    "\030\002\ufff6\004\ufff6\005\ufff6\007\ufff6\013\ufff6\017\ufff6" +
    "\022\ufff6\023\ufff6\031\ufff6\035\ufff6\041\ufff6\001\002\000" +
    "\024\002\ufffe\004\176\005\175\007\ufffe\013\ufffe\017\101" +
    "\022\ufffe\023\ufffe\035\100\001\002\000\030\002\uffd1\004" +
    "\uffd1\005\uffd1\007\uffd1\013\uffd1\017\uffd1\022\uffd1\023\uffd1" +
    "\031\uffd1\035\uffd1\041\uffd1\001\002\000\106\002\uffde\004" +
    "\uffde\005\uffde\006\uffde\007\uffde\010\uffde\013\uffde\014\uffde" +
    "\015\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041" +
    "\uffde\042\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde" +
    "\001\002\000\004\010\171\001\002\000\106\002\uffe0\004" +
    "\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\013\uffe0\014\uffe0" +
    "\015\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0" +
    "\001\002\000\054\006\030\015\027\020\026\021\024\024" +
    "\021\025\020\026\017\027\016\030\041\032\037\033\036" +
    "\034\034\036\033\037\032\040\031\042\013\045\006\046" +
    "\005\047\004\050\023\051\010\001\002\000\056\006\030" +
    "\007\uffe4\015\027\020\026\021\024\024\021\025\020\026" +
    "\017\027\016\030\041\032\037\033\036\034\034\036\033" +
    "\037\032\040\031\042\013\045\006\046\005\047\004\050" +
    "\023\051\010\001\002\000\106\002\uffdd\004\uffdd\005\uffdd" +
    "\006\uffdd\007\uffdd\010\uffdd\013\uffdd\014\uffdd\015\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd" +
    "\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\001\002\000" +
    "\106\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1" +
    "\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\042\uffe1\045\uffe1\046\uffe1\047\uffe1" +
    "\050\uffe1\051\uffe1\001\002\000\054\006\030\015\027\020" +
    "\026\021\024\024\021\025\020\026\017\027\016\030\041" +
    "\032\037\033\036\034\034\036\033\037\032\040\031\042" +
    "\013\045\006\046\005\047\004\050\023\051\010\001\002" +
    "\000\030\002\uffee\004\uffee\005\uffee\007\uffee\013\uffee\017" +
    "\uffee\022\uffee\023\uffee\031\uffee\035\uffee\041\uffee\001\002" +
    "\000\012\002\000\013\000\022\000\023\000\001\002\000" +
    "\006\031\uffbb\051\151\001\002\000\106\002\uffdf\004\uffdf" +
    "\005\uffdf\006\uffdf\007\uffdf\010\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033" +
    "\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf" +
    "\042\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\001" +
    "\002\000\032\002\uffc9\004\uffc9\005\uffc9\007\uffc9\013\uffc9" +
    "\014\134\017\uffc9\022\uffc9\023\uffc9\031\uffc9\035\uffc9\041" +
    "\uffc9\001\002\000\004\051\133\001\002\000\032\002\uffca" +
    "\004\uffca\005\uffca\007\uffca\013\uffca\014\045\017\uffca\022" +
    "\uffca\023\uffca\031\uffca\035\uffca\041\uffca\001\002\000\004" +
    "\002\044\001\002\000\004\002\001\001\002\000\054\006" +
    "\047\015\027\020\026\021\024\024\021\025\020\026\017" +
    "\027\016\030\041\032\037\033\036\034\034\036\033\037" +
    "\032\040\031\042\013\045\006\046\005\047\004\050\023" +
    "\051\010\001\002\000\030\002\uffc8\004\uffc8\005\uffc8\007" +
    "\uffc8\013\uffc8\017\101\022\uffc8\023\uffc8\031\uffc8\035\100" +
    "\041\uffc8\001\002\000\056\006\030\007\uffe4\015\027\020" +
    "\026\021\024\024\021\025\020\026\017\027\016\030\041" +
    "\032\037\033\036\034\034\036\033\037\032\040\031\042" +
    "\013\045\006\046\005\047\004\050\023\051\050\001\002" +
    "\000\022\005\107\006\106\007\ufff8\010\104\014\111\016" +
    "\105\017\ufff8\035\ufff8\001\002\000\010\007\077\017\101" +
    "\035\100\001\002\000\004\007\067\001\002\000\004\007" +
    "\uffe5\001\002\000\014\005\055\007\uffe3\014\045\017\uffca" +
    "\035\uffca\001\002\000\006\007\uffe4\051\056\001\002\000" +
    "\004\010\064\001\002\000\006\005\062\007\061\001\002" +
    "\000\004\007\uffe2\001\002\000\030\002\uffc4\004\uffc4\005" +
    "\uffc4\007\uffc4\013\uffc4\017\uffc4\022\uffc4\023\uffc4\031\uffc4" +
    "\035\uffc4\041\uffc4\001\002\000\006\007\uffe4\051\056\001" +
    "\002\000\006\005\062\007\uffe3\001\002\000\020\020\026" +
    "\021\024\032\037\037\032\040\031\045\006\051\066\001" +
    "\002\000\032\002\uffce\004\uffce\005\uffce\007\uffce\013\uffce" +
    "\014\uffce\017\uffce\022\uffce\023\uffce\031\uffce\035\uffce\041" +
    "\uffce\001\002\000\032\002\uffcd\004\uffcd\005\uffcd\007\uffcd" +
    "\013\uffcd\014\uffcd\017\uffcd\022\uffcd\023\uffcd\031\uffcd\035" +
    "\uffcd\041\uffcd\001\002\000\004\011\070\001\002\000\004" +
    "\012\071\001\002\000\056\006\030\013\uffff\015\027\020" +
    "\026\021\024\024\021\025\020\026\017\027\016\030\041" +
    "\032\037\033\036\034\034\036\033\037\032\040\031\042" +
    "\013\045\006\046\005\047\004\050\023\051\010\001\002" +
    "\000\004\013\073\001\002\000\004\010\074\001\002\000" +
    "\020\020\026\021\024\032\037\037\032\040\031\045\006" +
    "\051\076\001\002\000\030\002\ufff1\004\ufff1\005\ufff1\007" +
    "\ufff1\013\ufff1\017\ufff1\022\ufff1\023\ufff1\031\ufff1\035\ufff1" +
    "\041\ufff1\001\002\000\030\002\ufff0\004\ufff0\005\ufff0\007" +
    "\ufff0\013\ufff0\017\ufff0\022\ufff0\023\ufff0\031\ufff0\035\ufff0" +
    "\041\ufff0\001\002\000\030\002\uffe8\004\uffe8\005\uffe8\007" +
    "\uffe8\013\uffe8\017\uffe8\022\uffe8\023\uffe8\031\uffe8\035\uffe8" +
    "\041\uffe8\001\002\000\054\006\030\015\027\020\026\021" +
    "\024\024\021\025\020\026\017\027\016\030\041\032\037" +
    "\033\036\034\034\036\033\037\032\040\031\042\013\045" +
    "\006\046\005\047\004\050\023\051\010\001\002\000\054" +
    "\006\030\015\027\020\026\021\024\024\021\025\020\026" +
    "\017\027\016\030\041\032\037\033\036\034\034\036\033" +
    "\037\032\040\031\042\013\045\006\046\005\047\004\050" +
    "\023\051\010\001\002\000\030\002\uffeb\004\uffeb\005\uffeb" +
    "\007\uffeb\013\uffeb\017\101\022\uffeb\023\uffeb\031\uffeb\035" +
    "\100\041\uffeb\001\002\000\030\002\uffea\004\uffea\005\uffea" +
    "\007\uffea\013\uffea\017\101\022\uffea\023\uffea\031\uffea\035" +
    "\100\041\uffea\001\002\000\026\006\130\020\026\021\024" +
    "\032\037\037\032\040\031\043\126\044\125\045\006\051" +
    "\066\001\002\000\004\051\122\001\002\000\056\006\030" +
    "\007\uffff\015\027\020\026\021\024\024\021\025\020\026" +
    "\017\027\016\030\041\032\037\033\036\034\034\036\033" +
    "\037\032\040\031\042\013\045\006\046\005\047\004\050" +
    "\023\051\010\001\002\000\004\051\115\001\002\000\004" +
    "\014\113\001\002\000\054\006\030\015\027\020\026\021" +
    "\024\024\021\025\020\026\017\027\016\030\041\032\037" +
    "\033\036\034\034\036\033\037\032\040\031\042\013\045" +
    "\006\046\005\047\004\050\023\051\010\001\002\000\030" +
    "\002\uffc0\004\uffc0\005\uffc0\007\uffc0\013\uffc0\017\101\022" +
    "\uffc0\023\uffc0\031\uffc0\035\100\041\uffc0\001\002\000\054" +
    "\006\030\015\027\020\026\021\024\024\021\025\020\026" +
    "\017\027\016\030\041\032\037\033\036\034\034\036\033" +
    "\037\032\040\031\042\013\045\006\046\005\047\004\050" +
    "\023\051\010\001\002\000\030\002\uffd8\004\uffd8\005\uffd8" +
    "\007\uffd8\013\uffd8\017\101\022\uffd8\023\uffd8\031\uffd8\035" +
    "\100\041\uffd8\001\002\000\004\007\116\001\002\000\030" +
    "\002\uffc6\004\uffc6\005\uffc6\007\uffc6\013\uffc6\017\uffc6\022" +
    "\uffc6\023\uffc6\031\uffc6\035\uffc6\041\uffc6\001\002\000\004" +
    "\007\121\001\002\000\004\007\uffe6\001\002\000\030\002" +
    "\ufff4\004\ufff4\005\ufff4\007\ufff4\013\ufff4\017\ufff4\022\ufff4" +
    "\023\ufff4\031\ufff4\035\ufff4\041\ufff4\001\002\000\032\002" +
    "\uffc2\004\uffc2\005\uffc2\007\uffc2\013\uffc2\014\123\017\uffc2" +
    "\022\uffc2\023\uffc2\031\uffc2\035\uffc2\041\uffc2\001\002\000" +
    "\054\006\030\015\027\020\026\021\024\024\021\025\020" +
    "\026\017\027\016\030\041\032\037\033\036\034\034\036" +
    "\033\037\032\040\031\042\013\045\006\046\005\047\004" +
    "\050\023\051\010\001\002\000\030\002\uffc1\004\uffc1\005" +
    "\uffc1\007\uffc1\013\uffc1\017\101\022\uffc1\023\uffc1\031\uffc1" +
    "\035\100\041\uffc1\001\002\000\060\006\uffda\014\uffda\015" +
    "\uffda\020\uffda\021\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\032\uffda\033\uffda\034\uffda\036\uffda\037" +
    "\uffda\040\uffda\042\uffda\045\uffda\046\uffda\047\uffda\050\uffda" +
    "\051\uffda\001\002\000\004\014\uffdb\001\002\000\060\006" +
    "\uffd9\014\uffd9\015\uffd9\020\uffd9\021\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\030\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\042\uffd9\045\uffd9\046\uffd9" +
    "\047\uffd9\050\uffd9\051\uffd9\001\002\000\054\006\030\015" +
    "\027\020\026\021\024\024\021\025\020\026\017\027\016" +
    "\030\041\032\037\033\036\034\034\036\033\037\032\040" +
    "\031\042\013\045\006\046\005\047\004\050\023\051\010" +
    "\001\002\000\010\007\132\017\101\035\100\001\002\000" +
    "\030\002\uffd3\004\uffd3\005\uffd3\007\uffd3\013\uffd3\017\uffd3" +
    "\022\uffd3\023\uffd3\031\uffd3\035\uffd3\041\uffd3\001\002\000" +
    "\030\002\ufff9\004\ufff9\005\ufff9\007\ufff9\013\ufff9\017\ufff9" +
    "\022\ufff9\023\ufff9\031\ufff9\035\ufff9\041\ufff9\001\002\000" +
    "\054\006\136\015\027\020\026\021\024\024\021\025\020" +
    "\026\017\027\016\030\041\032\037\033\036\034\034\036" +
    "\033\037\032\040\031\042\013\045\006\046\005\047\004" +
    "\050\023\051\010\001\002\000\030\002\uffc7\004\uffc7\005" +
    "\uffc7\007\uffc7\013\uffc7\017\101\022\uffc7\023\uffc7\031\uffc7" +
    "\035\100\041\uffc7\001\002\000\056\006\030\007\uffe4\015" +
    "\027\020\026\021\024\024\021\025\020\026\017\027\016" +
    "\030\041\032\037\033\036\034\034\036\033\037\032\040" +
    "\031\042\013\045\006\046\005\047\004\050\023\051\137" +
    "\001\002\000\022\005\144\006\106\007\ufff8\010\104\014" +
    "\111\016\105\017\ufff8\035\ufff8\001\002\000\014\005\141" +
    "\007\uffe3\014\045\017\uffca\035\uffca\001\002\000\006\007" +
    "\uffe4\051\056\001\002\000\006\005\062\007\143\001\002" +
    "\000\030\002\uffc3\004\uffc3\005\uffc3\007\uffc3\013\uffc3\017" +
    "\uffc3\022\uffc3\023\uffc3\031\uffc3\035\uffc3\041\uffc3\001\002" +
    "\000\004\051\145\001\002\000\004\007\146\001\002\000" +
    "\030\002\uffc5\004\uffc5\005\uffc5\007\uffc5\013\uffc5\017\uffc5" +
    "\022\uffc5\023\uffc5\031\uffc5\035\uffc5\041\uffc5\001\002\000" +
    "\004\031\uffbc\001\002\000\006\005\164\031\uffba\001\002" +
    "\000\004\010\160\001\002\000\004\014\156\001\002\000" +
    "\004\031\154\001\002\000\054\006\030\015\027\020\026" +
    "\021\024\024\021\025\020\026\017\027\016\030\041\032" +
    "\037\033\036\034\034\036\033\037\032\040\031\042\013" +
    "\045\006\046\005\047\004\050\023\051\010\001\002\000" +
    "\030\002\uffe9\004\uffe9\005\uffe9\007\uffe9\013\uffe9\017\101" +
    "\022\uffe9\023\uffe9\031\uffe9\035\100\041\uffe9\001\002\000" +
    "\054\006\030\015\027\020\026\021\024\024\021\025\020" +
    "\026\017\027\016\030\041\032\037\033\036\034\034\036" +
    "\033\037\032\040\031\042\013\045\006\046\005\047\004" +
    "\050\023\051\010\001\002\000\012\005\uffbd\017\101\031" +
    "\uffbd\035\100\001\002\000\022\020\026\021\024\032\037" +
    "\037\032\040\031\044\125\045\006\051\066\001\002\000" +
    "\004\014\162\001\002\000\054\006\030\015\027\020\026" +
    "\021\024\024\021\025\020\026\017\027\016\030\041\032" +
    "\037\033\036\034\034\036\033\037\032\040\031\042\013" +
    "\045\006\046\005\047\004\050\023\051\010\001\002\000" +
    "\012\005\uffbe\017\101\031\uffbe\035\100\001\002\000\006" +
    "\031\uffbb\051\151\001\002\000\004\031\uffb9\001\002\000" +
    "\030\002\uffef\004\uffef\005\uffef\007\uffef\013\uffef\017\101" +
    "\022\uffef\023\uffef\031\uffef\035\100\041\uffef\001\002\000" +
    "\014\005\062\007\uffe3\014\045\017\uffca\035\uffca\001\002" +
    "\000\030\002\uffec\004\uffec\005\uffec\007\uffec\013\uffec\017" +
    "\101\022\uffec\023\uffec\031\uffec\035\100\041\uffec\001\002" +
    "\000\004\006\172\001\002\000\054\006\030\015\027\020" +
    "\026\021\024\024\021\025\020\026\017\027\016\030\041" +
    "\032\037\033\036\034\034\036\033\037\032\040\031\042" +
    "\013\045\006\046\005\047\004\050\023\051\010\001\002" +
    "\000\010\007\174\017\101\035\100\001\002\000\030\002" +
    "\uffd4\004\uffd4\005\uffd4\007\uffd4\013\uffd4\017\uffd4\022\uffd4" +
    "\023\uffd4\031\uffd4\035\uffd4\041\uffd4\001\002\000\066\002" +
    "\uffff\006\030\007\uffff\013\uffff\015\027\020\026\021\024" +
    "\022\uffff\023\uffff\024\021\025\020\026\017\027\016\030" +
    "\041\032\037\033\036\034\034\036\033\037\032\040\031" +
    "\042\013\045\006\046\005\047\004\050\023\051\010\001" +
    "\002\000\066\002\uffff\006\030\007\uffff\013\uffff\015\027" +
    "\020\026\021\024\022\uffff\023\uffff\024\021\025\020\026" +
    "\017\027\016\030\041\032\037\033\036\034\034\036\033" +
    "\037\032\040\031\042\013\045\006\046\005\047\004\050" +
    "\023\051\010\001\002\000\014\002\ufffd\007\ufffd\013\ufffd" +
    "\022\ufffd\023\ufffd\001\002\000\014\002\ufffa\007\ufffa\013" +
    "\ufffa\022\ufffa\023\ufffa\001\002\000\004\006\202\001\002" +
    "\000\006\007\uffe4\051\056\001\002\000\004\007\204\001" +
    "\002\000\004\010\205\001\002\000\022\020\026\021\024" +
    "\032\037\037\032\040\031\044\125\045\006\051\212\001" +
    "\002\000\056\006\030\015\027\020\026\021\024\023\uffff" +
    "\024\021\025\020\026\017\027\016\030\041\032\037\033" +
    "\036\034\034\036\033\037\032\040\031\042\013\045\006" +
    "\046\005\047\004\050\023\051\010\001\002\000\004\023" +
    "\210\001\002\000\030\002\uffd6\004\uffd6\005\uffd6\007\uffd6" +
    "\013\uffd6\017\uffd6\022\uffd6\023\uffd6\031\uffd6\035\uffd6\041" +
    "\uffd6\001\002\000\056\006\030\015\027\020\026\021\024" +
    "\023\uffff\024\021\025\020\026\017\027\016\030\041\032" +
    "\037\033\036\034\034\036\033\037\032\040\031\042\013" +
    "\045\006\046\005\047\004\050\023\051\010\001\002\000" +
    "\056\006\030\015\027\020\026\021\024\023\uffff\024\021" +
    "\025\020\026\017\027\016\030\041\032\037\033\036\034" +
    "\034\036\033\037\032\040\031\042\013\045\006\046\005" +
    "\047\004\050\023\051\010\001\002\000\004\023\214\001" +
    "\002\000\030\002\ufff2\004\ufff2\005\ufff2\007\ufff2\013\ufff2" +
    "\017\ufff2\022\ufff2\023\ufff2\031\ufff2\035\ufff2\041\ufff2\001" +
    "\002\000\004\023\216\001\002\000\030\002\ufff3\004\ufff3" +
    "\005\ufff3\007\ufff3\013\ufff3\017\ufff3\022\ufff3\023\ufff3\031" +
    "\ufff3\035\ufff3\041\ufff3\001\002\000\004\010\220\001\002" +
    "\000\022\020\026\021\024\032\037\037\032\040\031\044" +
    "\125\045\006\051\225\001\002\000\004\014\222\001\002" +
    "\000\054\006\030\015\027\020\026\021\024\024\021\025" +
    "\020\026\017\027\016\030\041\032\037\033\036\034\034" +
    "\036\033\037\032\040\031\042\013\045\006\046\005\047" +
    "\004\050\023\051\010\001\002\000\030\002\uffd7\004\uffd7" +
    "\005\uffd7\007\uffd7\013\uffd7\017\101\022\uffd7\023\uffd7\031" +
    "\uffd7\035\100\041\uffd7\001\002\000\032\002\uffcc\004\uffcc" +
    "\005\uffcc\007\uffcc\013\uffcc\014\uffcc\017\uffcc\022\uffcc\023" +
    "\uffcc\031\uffcc\035\uffcc\041\uffcc\001\002\000\032\002\uffcb" +
    "\004\uffcb\005\uffcb\007\uffcb\013\uffcb\014\uffcb\017\uffcb\022" +
    "\uffcb\023\uffcb\031\uffcb\035\uffcb\041\uffcb\001\002\000\010" +
    "\017\101\035\100\041\227\001\002\000\056\006\030\015" +
    "\027\020\026\021\024\022\uffff\024\021\025\020\026\017" +
    "\027\016\030\041\032\037\033\036\034\034\036\033\037" +
    "\032\040\031\042\013\045\006\046\005\047\004\050\023" +
    "\051\010\001\002\000\004\022\231\001\002\000\056\006" +
    "\030\015\027\020\026\021\024\023\uffff\024\021\025\020" +
    "\026\017\027\016\030\041\032\037\033\036\034\034\036" +
    "\033\037\032\040\031\042\013\045\006\046\005\047\004" +
    "\050\023\051\010\001\002\000\004\023\233\001\002\000" +
    "\030\002\ufff5\004\ufff5\005\ufff5\007\ufff5\013\ufff5\017\ufff5" +
    "\022\ufff5\023\ufff5\031\ufff5\035\ufff5\041\ufff5\001\002\000" +
    "\016\020\026\021\024\032\037\037\032\040\031\045\006" +
    "\001\002\000\030\002\uffed\004\uffed\005\uffed\007\uffed\013" +
    "\uffed\017\uffed\022\uffed\023\uffed\031\uffed\035\uffed\041\uffed" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\030\002\042\003\034\004\021\010\024\011" +
    "\014\014\010\015\006\016\013\017\041\020\037\021\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\225\010\024\011\014" +
    "\014\010\015\006\016\013\017\041\020\037\021\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\004\167\010\024" +
    "\011\014\014\010\015\006\016\013\017\041\020\037\021" +
    "\011\001\001\000\030\004\050\006\051\007\052\010\024" +
    "\011\014\014\010\015\006\016\013\017\166\020\037\021" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\004\165\010\024\011\014\014\010\015\006\016\013\017" +
    "\041\020\037\021\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\151\022\147\023\152\024\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\045\010\024\011\014\014\010\015\006\016\013" +
    "\017\041\020\037\021\011\001\001\000\002\001\001\000" +
    "\030\004\050\006\051\007\052\010\024\011\014\014\010" +
    "\015\006\016\013\017\053\020\037\021\011\001\001\000" +
    "\004\013\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\057\017" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\057\017\062\001" +
    "\001\000\002\001\001\000\004\010\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\002\071\003\034\004\021\010\024\011\014" +
    "\014\010\015\006\016\013\017\041\020\037\021\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\004\102\010\024\011\014\014\010\015\006" +
    "\016\013\017\041\020\037\021\011\001\001\000\024\004" +
    "\101\010\024\011\014\014\010\015\006\016\013\017\041" +
    "\020\037\021\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\064\012\126\001\001\000\002\001\001" +
    "\000\030\003\117\004\021\005\116\010\024\011\014\014" +
    "\010\015\006\016\013\017\041\020\037\021\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\004\111\010" +
    "\024\011\014\014\010\015\006\016\013\017\041\020\037" +
    "\021\011\001\001\000\002\001\001\000\024\004\113\010" +
    "\024\011\014\014\010\015\006\016\013\017\041\020\037" +
    "\021\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\004\123\010\024\011" +
    "\014\014\010\015\006\016\013\017\041\020\037\021\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\130\010\024\011\014" +
    "\014\010\015\006\016\013\017\041\020\037\021\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\004\134\010\024\011\014\014\010\015\006\016" +
    "\013\017\041\020\037\021\011\001\001\000\002\001\001" +
    "\000\030\004\050\006\051\007\052\010\024\011\014\014" +
    "\010\015\006\016\013\017\137\020\037\021\011\001\001" +
    "\000\004\013\107\001\001\000\002\001\001\000\006\007" +
    "\057\017\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\004\154\010\024\011" +
    "\014\014\010\015\006\016\013\017\041\020\037\021\011" +
    "\001\001\000\002\001\001\000\024\004\156\010\024\011" +
    "\014\014\010\015\006\016\013\017\041\020\037\021\011" +
    "\001\001\000\002\001\001\000\006\010\064\012\160\001" +
    "\001\000\002\001\001\000\024\004\162\010\024\011\014" +
    "\014\010\015\006\016\013\017\041\020\037\021\011\001" +
    "\001\000\002\001\001\000\010\017\151\022\147\024\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\172" +
    "\010\024\011\014\014\010\015\006\016\013\017\041\020" +
    "\037\021\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\177\004\021\010\024\011\014\014\010\015" +
    "\006\016\013\017\041\020\037\021\011\001\001\000\026" +
    "\003\176\004\021\010\024\011\014\014\010\015\006\016" +
    "\013\017\041\020\037\021\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\202\007" +
    "\052\017\062\001\001\000\002\001\001\000\004\013\205" +
    "\001\001\000\006\010\210\012\126\001\001\000\030\002" +
    "\206\003\034\004\021\010\024\011\014\014\010\015\006" +
    "\016\013\017\041\020\037\021\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\002\214\003\034\004\021" +
    "\010\024\011\014\014\010\015\006\016\013\017\041\020" +
    "\037\021\011\001\001\000\030\002\212\003\034\004\021" +
    "\010\024\011\014\014\010\015\006\016\013\017\041\020" +
    "\037\021\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\220\001" +
    "\001\000\006\010\223\012\126\001\001\000\002\001\001" +
    "\000\024\004\222\010\024\011\014\014\010\015\006\016" +
    "\013\017\041\020\037\021\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\002\227\003\034\004\021\010\024\011\014\014\010" +
    "\015\006\016\013\017\041\020\037\021\011\001\001\000" +
    "\002\001\001\000\030\002\231\003\034\004\021\010\024" +
    "\011\014\014\010\015\006\016\013\017\041\020\037\021" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\234\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public sample.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (sample.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		sample.Absyn.Program start_val = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListExpr 
            {
              sample.Absyn.Program RESULT =null;
		sample.Absyn.ListExpr p_1 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ProgramExprs(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListExpr ::= 
            {
              sample.Absyn.ListExpr RESULT =null;
		 RESULT = new sample.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListExpr ::= Expr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListExpr ::= Expr _SYMB_0 ListExpr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.ListExpr p_3 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListExpr ::= 
            {
              sample.Absyn.ListExpr RESULT =null;
		 RESULT = new sample.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListExpr ::= Expr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListExpr ::= Expr _SYMB_1 ListExpr 
            {
              sample.Absyn.ListExpr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.ListExpr p_3 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expr ::= _SYMB_20 _IDENT_ 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Import(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expr ::= _IDENT_ 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Var(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expr ::= _SYMB_30 
            {
              sample.Absyn.Expr RESULT =null;
		 RESULT = new sample.Absyn.ConstTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expr ::= _SYMB_16 
            {
              sample.Absyn.Expr RESULT =null;
		 RESULT = new sample.Absyn.ConstFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expr ::= _SYMB_19 Expr _SYMB_29 Program _SYMB_14 Program _SYMB_15 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		sample.Absyn.Program p_4 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Program p_6 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.If(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expr ::= _IDENT_ _SYMB_2 ComaExprs _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.ComaExprs p_3 = (sample.Absyn.ComaExprs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.FuncCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expr ::= _SYMB_17 _IDENT_ _SYMB_2 FArgs _SYMB_3 _SYMB_4 Type Program _SYMB_15 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		sample.Absyn.FArgs p_4 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		sample.Absyn.Type p_7 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Program p_8 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.Func(p_2,p_4,p_7,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expr ::= _SYMB_17 _IDENT_ _SYMB_2 FArgs _SYMB_3 _SYMB_4 _IDENT_ Program _SYMB_15 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		sample.Absyn.FArgs p_4 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Program p_8 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.TypeAlFunc(p_2,p_4,p_7,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expr ::= _SYMB_2 FArgs _SYMB_3 _SYMB_5 _SYMB_6 Program _SYMB_7 _SYMB_4 Type 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.FArgs p_2 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		sample.Absyn.Program p_6 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Type p_9 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.AnonymFunc(p_2,p_6,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expr ::= _SYMB_2 FArgs _SYMB_3 _SYMB_5 _SYMB_6 Program _SYMB_7 _SYMB_4 _IDENT_ 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.FArgs p_2 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		sample.Absyn.Program p_6 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String p_9 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TypeAlAnonymFunc(p_2,p_6,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expr ::= _SYMB_26 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Return(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expr ::= _SYMB_24 
            {
              sample.Absyn.Expr RESULT =null;
		 RESULT = new sample.Absyn.NilKeyword(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expr ::= TypeAl _SYMB_8 Type 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.TypeAl p_1 = (sample.Absyn.TypeAl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Type p_3 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TypeAliasing(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expr ::= _SYMB_9 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Not(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expr ::= Expr _SYMB_11 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.And(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expr ::= Expr _SYMB_25 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Or(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expr ::= _SYMB_23 Fields _SYMB_21 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Fields p_2 = (sample.Absyn.Fields)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_4 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.LetBinding(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expr ::= _SYMB_2 Expr _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_2 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expr ::= Expr1 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ComaExprs ::= ListExpr 
            {
              sample.Absyn.ComaExprs RESULT =null;
		sample.Absyn.ListExpr p_1 = (sample.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Vars(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComaExprs",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FArgs ::= ListDec 
            {
              sample.Absyn.FArgs RESULT =null;
		sample.Absyn.ListDec p_1 = (sample.Absyn.ListDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.FuncArgs(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FArgs",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListDec ::= 
            {
              sample.Absyn.ListDec RESULT =null;
		 RESULT = new sample.Absyn.ListDec(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ListDec ::= Dec 
            {
              sample.Absyn.ListDec RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ListDec(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ListDec ::= Dec _SYMB_1 ListDec 
            {
              sample.Absyn.ListDec RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.ListDec p_3 = (sample.Absyn.ListDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDec",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Type ::= _SYMB_27 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.StringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Type ::= _SYMB_12 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.BoolType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Type ::= _SYMB_22 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Type ::= _SYMB_13 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.DoubleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Type ::= _SYMB_28 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.TableType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Type ::= _SYMB_33 
            {
              sample.Absyn.Type RESULT =null;
		 RESULT = new sample.Absyn.VoidType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TypeAl ::= _IDENT_ _SYMB_4 _SYMB_31 
            {
              sample.Absyn.TypeAl RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new sample.Absyn.TypeAlIdent(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeAl",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VarKW ::= _SYMB_32 
            {
              sample.Absyn.VarKW RESULT =null;
		 RESULT = new sample.Absyn.VarKeyword(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarKW",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TAnnot ::= _SYMB_4 VarKW 
            {
              sample.Absyn.TAnnot RESULT =null;
		sample.Absyn.VarKW p_2 = (sample.Absyn.VarKW)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TypeAnnotation(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TAnnot",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr3 ::= _IDENT_ TAnnot _SYMB_8 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.TAnnot p_2 = (sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_4 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.VarTypeAnnotation(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr3 ::= _SYMB_18 _IDENT_ TAnnot _SYMB_8 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.TAnnot p_3 = (sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_5 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.GlVarTypeAnnotation(p_2,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expr3 ::= _SYMB_17 _IDENT_ _SYMB_2 FArgs _SYMB_3 TAnnot Program _SYMB_15 
            {
              sample.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		sample.Absyn.FArgs p_4 = (sample.Absyn.FArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		sample.Absyn.TAnnot p_6 = (sample.Absyn.TAnnot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Program p_7 = (sample.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.FuncTypeAnnotation(p_2,p_4,p_6,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expr3 ::= Expr4 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expr4 ::= Type _SYMB_4 _SYMB_2 Expr _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Type p_1 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		sample.Absyn.Expr p_4 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.TypeAscription(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr4 ::= _IDENT_ _SYMB_4 _SYMB_2 Expr _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		sample.Absyn.Expr p_4 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.TypeAscWithTypeAl(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr1 ::= _INTEGER_ 
            {
              sample.Absyn.Expr RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.EInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr1 ::= _DOUBLE_ 
            {
              sample.Absyn.Expr RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.EDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr1 ::= _STRING_ 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.EStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr1 ::= Expr2 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Dec ::= _IDENT_ _SYMB_4 Type 
            {
              sample.Absyn.Dec RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Type p_3 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Declaration(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Dec ::= _IDENT_ _SYMB_4 _IDENT_ 
            {
              sample.Absyn.Dec RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TypeAlDecl(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // GlDec ::= _SYMB_18 _IDENT_ _SYMB_4 Type 
            {
              sample.Absyn.GlDec RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Type p_4 = (sample.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.GlDeclaration(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GlDec",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // GlDec ::= _SYMB_18 _IDENT_ _SYMB_4 _IDENT_ 
            {
              sample.Absyn.GlDec RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TypeAlGlDec(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GlDec",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr2 ::= Dec 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.OnlyDecl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr2 ::= GlDec 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.GlDec p_1 = (sample.Absyn.GlDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.OnlyGlDecl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr2 ::= Dec _SYMB_8 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.InitDecl(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr2 ::= GlDec _SYMB_8 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.GlDec p_1 = (sample.Absyn.GlDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.InitGlDecl(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr2 ::= Dec _SYMB_8 _SYMB_2 _IDENT_ _SYMB_1 _IDENT_ _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String p_6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.TableDecl(p_1,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr2 ::= GlDec _SYMB_8 _SYMB_2 _IDENT_ _SYMB_1 _IDENT_ _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.GlDec p_1 = (sample.Absyn.GlDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String p_6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.GlTableDecl(p_1,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr2 ::= Dec _SYMB_8 _SYMB_2 Dec _SYMB_1 Dec _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		sample.Absyn.Dec p_4 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Dec p_6 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.InitTableDecl(p_1,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr2 ::= GlDec _SYMB_8 _SYMB_2 Dec _SYMB_1 Dec _SYMB_3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.GlDec p_1 = (sample.Absyn.GlDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		sample.Absyn.Dec p_4 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		sample.Absyn.Dec p_6 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new sample.Absyn.InitGlTableDecl(p_1,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr2 ::= _IDENT_ _SYMB_10 _IDENT_ 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TableElementCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr2 ::= _IDENT_ _SYMB_10 _IDENT_ _SYMB_8 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_5 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TableElementAssignment(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr2 ::= _IDENT_ _SYMB_8 Expr 
            {
              sample.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.Assignment(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr2 ::= Expr3 
            {
              sample.Absyn.Expr RESULT =null;
		sample.Absyn.Expr p_1 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Field ::= _IDENT_ _SYMB_4 VarKW _SYMB_8 Expr 
            {
              sample.Absyn.Field RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		sample.Absyn.VarKW p_3 = (sample.Absyn.VarKW)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_5 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.TypeAnField(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Field ::= Dec _SYMB_8 Expr 
            {
              sample.Absyn.Field RESULT =null;
		sample.Absyn.Dec p_1 = (sample.Absyn.Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.Expr p_3 = (sample.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.LBField(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Fields ::= ListField 
            {
              sample.Absyn.Fields RESULT =null;
		sample.Absyn.ListField p_1 = (sample.Absyn.ListField)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.LBFields(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Fields",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ListField ::= 
            {
              sample.Absyn.ListField RESULT =null;
		 RESULT = new sample.Absyn.ListField(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListField",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ListField ::= Field 
            {
              sample.Absyn.ListField RESULT =null;
		sample.Absyn.Field p_1 = (sample.Absyn.Field)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new sample.Absyn.ListField(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListField",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ListField ::= Field _SYMB_1 ListField 
            {
              sample.Absyn.ListField RESULT =null;
		sample.Absyn.Field p_1 = (sample.Absyn.Field)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		sample.Absyn.ListField p_3 = (sample.Absyn.ListField)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListField",18, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
