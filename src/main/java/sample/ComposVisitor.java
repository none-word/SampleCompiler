// File generated by the BNF Converter (bnfc 2.9.4).

package sample;
/** Composition Visitor
*/

public class ComposVisitor<A> implements
  sample.Absyn.Program.Visitor<sample.Absyn.Program,A>,
  sample.Absyn.Expr.Visitor<sample.Absyn.Expr,A>,
  sample.Absyn.ComaExprs.Visitor<sample.Absyn.ComaExprs,A>,
  sample.Absyn.FArgs.Visitor<sample.Absyn.FArgs,A>,
  sample.Absyn.Type.Visitor<sample.Absyn.Type,A>,
  sample.Absyn.TypeKW.Visitor<sample.Absyn.TypeKW,A>,
  sample.Absyn.VarKW.Visitor<sample.Absyn.VarKW,A>,
  sample.Absyn.TAnnot.Visitor<sample.Absyn.TAnnot,A>,
  sample.Absyn.TAscript.Visitor<sample.Absyn.TAscript,A>,
  sample.Absyn.Dec.Visitor<sample.Absyn.Dec,A>
{
    /* Program */
    public sample.Absyn.Program visit(sample.Absyn.ProgramExprs p, A arg)
    {
      sample.Absyn.ListExpr listexpr_ = new sample.Absyn.ListExpr();
      for (sample.Absyn.Expr x : p.listexpr_)
      {
        listexpr_.add(x.accept(this,arg));
      }
      return new sample.Absyn.ProgramExprs(listexpr_);
    }

    /* Expr */
    public sample.Absyn.Expr visit(sample.Absyn.Var p, A arg)
    {
      String ident_ = p.ident_;
      return new sample.Absyn.Var(ident_);
    }
    public sample.Absyn.Expr visit(sample.Absyn.ConstTrue p, A arg)
    {
      return new sample.Absyn.ConstTrue();
    }
    public sample.Absyn.Expr visit(sample.Absyn.ConstFalse p, A arg)
    {
      return new sample.Absyn.ConstFalse();
    }
    public sample.Absyn.Expr visit(sample.Absyn.If p, A arg)
    {
      sample.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      sample.Absyn.Program program_1 = p.program_1.accept(this, arg);
      sample.Absyn.Program program_2 = p.program_2.accept(this, arg);
      return new sample.Absyn.If(expr_, program_1, program_2);
    }
    public sample.Absyn.Expr visit(sample.Absyn.FuncCall p, A arg)
    {
      String ident_ = p.ident_;
      sample.Absyn.ComaExprs comaexprs_ = p.comaexprs_.accept(this, arg);
      return new sample.Absyn.FuncCall(ident_, comaexprs_);
    }
    public sample.Absyn.Expr visit(sample.Absyn.Func p, A arg)
    {
      String ident_ = p.ident_;
      sample.Absyn.FArgs fargs_ = p.fargs_.accept(this, arg);
      sample.Absyn.Type type_ = p.type_.accept(this, arg);
      sample.Absyn.Program program_ = p.program_.accept(this, arg);
      return new sample.Absyn.Func(ident_, fargs_, type_, program_);
    }
    public sample.Absyn.Expr visit(sample.Absyn.Return p, A arg)
    {
      sample.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      return new sample.Absyn.Return(expr_);
    }
    public sample.Absyn.Expr visit(sample.Absyn.Not p, A arg)
    {
      sample.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      return new sample.Absyn.Not(expr_);
    }
    public sample.Absyn.Expr visit(sample.Absyn.And p, A arg)
    {
      sample.Absyn.Expr expr_1 = p.expr_1.accept(this, arg);
      sample.Absyn.Expr expr_2 = p.expr_2.accept(this, arg);
      return new sample.Absyn.And(expr_1, expr_2);
    }
    public sample.Absyn.Expr visit(sample.Absyn.Or p, A arg)
    {
      sample.Absyn.Expr expr_1 = p.expr_1.accept(this, arg);
      sample.Absyn.Expr expr_2 = p.expr_2.accept(this, arg);
      return new sample.Absyn.Or(expr_1, expr_2);
    }
    public sample.Absyn.Expr visit(sample.Absyn.ConstZero p, A arg)
    {
      return new sample.Absyn.ConstZero();
    }
    public sample.Absyn.Expr visit(sample.Absyn.Succ p, A arg)
    {
      sample.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      return new sample.Absyn.Succ(expr_);
    }
    public sample.Absyn.Expr visit(sample.Absyn.Pred p, A arg)
    {
      sample.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      return new sample.Absyn.Pred(expr_);
    }
    public sample.Absyn.Expr visit(sample.Absyn.IsZero p, A arg)
    {
      sample.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      return new sample.Absyn.IsZero(expr_);
    }
    public sample.Absyn.Expr visit(sample.Absyn.TypeAliasing p, A arg)
    {
      String ident_ = p.ident_;
      sample.Absyn.TypeKW typekw_ = p.typekw_.accept(this, arg);
      sample.Absyn.Type type_ = p.type_.accept(this, arg);
      return new sample.Absyn.TypeAliasing(ident_, typekw_, type_);
    }
    public sample.Absyn.Expr visit(sample.Absyn.LcTypeAliasing p, A arg)
    {
      String ident_ = p.ident_;
      sample.Absyn.TypeKW typekw_ = p.typekw_.accept(this, arg);
      sample.Absyn.Type type_ = p.type_.accept(this, arg);
      return new sample.Absyn.LcTypeAliasing(ident_, typekw_, type_);
    }
    public sample.Absyn.Expr visit(sample.Absyn.VarTypeAnnotation p, A arg)
    {
      String ident_ = p.ident_;
      sample.Absyn.TAnnot tannot_ = p.tannot_.accept(this, arg);
      sample.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      return new sample.Absyn.VarTypeAnnotation(ident_, tannot_, expr_);
    }
    public sample.Absyn.Expr visit(sample.Absyn.LcVarTypeAnnotation p, A arg)
    {
      String ident_ = p.ident_;
      sample.Absyn.TAnnot tannot_ = p.tannot_.accept(this, arg);
      sample.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      return new sample.Absyn.LcVarTypeAnnotation(ident_, tannot_, expr_);
    }
    public sample.Absyn.Expr visit(sample.Absyn.FuncTypeAnnotation p, A arg)
    {
      String ident_ = p.ident_;
      sample.Absyn.FArgs fargs_ = p.fargs_.accept(this, arg);
      sample.Absyn.TAnnot tannot_ = p.tannot_.accept(this, arg);
      sample.Absyn.Program program_ = p.program_.accept(this, arg);
      return new sample.Absyn.FuncTypeAnnotation(ident_, fargs_, tannot_, program_);
    }
    public sample.Absyn.Expr visit(sample.Absyn.VarTypeAscription p, A arg)
    {
      String ident_ = p.ident_;
      sample.Absyn.TAscript tascript_ = p.tascript_.accept(this, arg);
      sample.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      return new sample.Absyn.VarTypeAscription(ident_, tascript_, expr_);
    }
    public sample.Absyn.Expr visit(sample.Absyn.LcVarTypeAscription p, A arg)
    {
      String ident_ = p.ident_;
      sample.Absyn.TAscript tascript_ = p.tascript_.accept(this, arg);
      sample.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      return new sample.Absyn.LcVarTypeAscription(ident_, tascript_, expr_);
    }
    public sample.Absyn.Expr visit(sample.Absyn.FuncTypeAscription p, A arg)
    {
      String ident_ = p.ident_;
      sample.Absyn.FArgs fargs_ = p.fargs_.accept(this, arg);
      sample.Absyn.TAscript tascript_ = p.tascript_.accept(this, arg);
      sample.Absyn.Program program_ = p.program_.accept(this, arg);
      return new sample.Absyn.FuncTypeAscription(ident_, fargs_, tascript_, program_);
    }
    public sample.Absyn.Expr visit(sample.Absyn.EInt p, A arg)
    {
      Integer integer_ = p.integer_;
      return new sample.Absyn.EInt(integer_);
    }
    public sample.Absyn.Expr visit(sample.Absyn.EDouble p, A arg)
    {
      Double double_ = p.double_;
      return new sample.Absyn.EDouble(double_);
    }
    public sample.Absyn.Expr visit(sample.Absyn.EStr p, A arg)
    {
      String string_ = p.string_;
      return new sample.Absyn.EStr(string_);
    }
    public sample.Absyn.Expr visit(sample.Absyn.OnlyDecl p, A arg)
    {
      sample.Absyn.Dec dec_ = p.dec_.accept(this, arg);
      return new sample.Absyn.OnlyDecl(dec_);
    }
    public sample.Absyn.Expr visit(sample.Absyn.InitDecl p, A arg)
    {
      sample.Absyn.Dec dec_ = p.dec_.accept(this, arg);
      sample.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      return new sample.Absyn.InitDecl(dec_, expr_);
    }
    public sample.Absyn.Expr visit(sample.Absyn.InitTableDecl p, A arg)
    {
      sample.Absyn.Dec dec_1 = p.dec_1.accept(this, arg);
      sample.Absyn.Dec dec_2 = p.dec_2.accept(this, arg);
      sample.Absyn.Dec dec_3 = p.dec_3.accept(this, arg);
      return new sample.Absyn.InitTableDecl(dec_1, dec_2, dec_3);
    }

    /* ComaExprs */
    public sample.Absyn.ComaExprs visit(sample.Absyn.Vars p, A arg)
    {
      sample.Absyn.ListExpr listexpr_ = new sample.Absyn.ListExpr();
      for (sample.Absyn.Expr x : p.listexpr_)
      {
        listexpr_.add(x.accept(this,arg));
      }
      return new sample.Absyn.Vars(listexpr_);
    }

    /* FArgs */
    public sample.Absyn.FArgs visit(sample.Absyn.FuncArgs p, A arg)
    {
      sample.Absyn.ListDec listdec_ = new sample.Absyn.ListDec();
      for (sample.Absyn.Dec x : p.listdec_)
      {
        listdec_.add(x.accept(this,arg));
      }
      return new sample.Absyn.FuncArgs(listdec_);
    }

    /* Type */
    public sample.Absyn.Type visit(sample.Absyn.StringType p, A arg)
    {
      return new sample.Absyn.StringType();
    }
    public sample.Absyn.Type visit(sample.Absyn.BoolType p, A arg)
    {
      return new sample.Absyn.BoolType();
    }
    public sample.Absyn.Type visit(sample.Absyn.UnitType p, A arg)
    {
      return new sample.Absyn.UnitType();
    }
    public sample.Absyn.Type visit(sample.Absyn.IntType p, A arg)
    {
      return new sample.Absyn.IntType();
    }
    public sample.Absyn.Type visit(sample.Absyn.DoubleType p, A arg)
    {
      return new sample.Absyn.DoubleType();
    }
    public sample.Absyn.Type visit(sample.Absyn.TableType p, A arg)
    {
      return new sample.Absyn.TableType();
    }
    public sample.Absyn.Type visit(sample.Absyn.NilType p, A arg)
    {
      return new sample.Absyn.NilType();
    }
    public sample.Absyn.Type visit(sample.Absyn.VoidType p, A arg)
    {
      return new sample.Absyn.VoidType();
    }

    /* TypeKW */
    public sample.Absyn.TypeKW visit(sample.Absyn.TypeKeyword p, A arg)
    {
      return new sample.Absyn.TypeKeyword();
    }

    /* VarKW */
    public sample.Absyn.VarKW visit(sample.Absyn.VarKeyword p, A arg)
    {
      return new sample.Absyn.VarKeyword();
    }

    /* TAnnot */
    public sample.Absyn.TAnnot visit(sample.Absyn.TypeAnnotation p, A arg)
    {
      sample.Absyn.VarKW varkw_ = p.varkw_.accept(this, arg);
      return new sample.Absyn.TypeAnnotation(varkw_);
    }

    /* TAscript */
    public sample.Absyn.TAscript visit(sample.Absyn.TypeAscription p, A arg)
    {
      sample.Absyn.TAnnot tannot_ = p.tannot_.accept(this, arg);
      sample.Absyn.Type type_ = p.type_.accept(this, arg);
      return new sample.Absyn.TypeAscription(tannot_, type_);
    }

    /* Dec */
    public sample.Absyn.Dec visit(sample.Absyn.Declaration p, A arg)
    {
      String ident_ = p.ident_;
      sample.Absyn.Type type_ = p.type_.accept(this, arg);
      return new sample.Absyn.Declaration(ident_, type_);
    }
    public sample.Absyn.Dec visit(sample.Absyn.LcVarDeclaration p, A arg)
    {
      String ident_ = p.ident_;
      sample.Absyn.Type type_ = p.type_.accept(this, arg);
      return new sample.Absyn.LcVarDeclaration(ident_, type_);
    }
}
